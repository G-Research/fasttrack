{"version":3,"file":"static/js/714.e4e404fa.chunk.js","mappings":"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","sources":["experiment-tracking/components/experiment-page/hooks/useAsyncDispatch.ts","experiment-tracking/components/experiment-page/contexts/GetExperimentsContext.tsx","common/static/permission-denied-lock.svg","experiment-tracking/components/PermissionDeniedView.js","experiment-tracking/components/experiment-page/components/ExperimentViewArtifactLocation.tsx","experiment-tracking/components/experiment-page/components/ExperimentViewDescriptions.tsx","experiment-tracking/components/experiment-page/hooks/useFetchExperiments.ts","experiment-tracking/components/experiment-page/components/ExperimentViewNotes.tsx","experiment-tracking/components/experiment-page/hooks/useExperimentViewLocalStore.ts","experiment-tracking/components/experiment-page/components/ExperimentViewOnboarding.tsx","../node_modules/react-intl/lib/src/components/useIntl.js","experiment-tracking/components/experiment-page/components/header/ExperimentViewCopyTitle.tsx","shared/building_blocks/CopyButton.jsx","shared/building_blocks/CopyBox.jsx","experiment-tracking/components/modals/GetLinkModal.js","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderShareButton.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeader.tsx","experiment-tracking/components/experiment-page/components/header/ExperimentViewHeaderCompare.tsx","experiment-tracking/types.ts","experiment-tracking/components/experiment-page/utils/experimentRuns.selector.ts","common/components/ExpandableList.js","common/static/registryIcon.svg","common/components/TrimmedText.js","experiment-tracking/components/ExperimentViewUtil.js","experiment-tracking/components/experiment-page/utils/experimentPage.common-utils.ts","experiment-tracking/components/modals/DeleteRunModal.js","experiment-tracking/components/modals/RestoreRunModal.js","experiment-tracking/components/experiment-page/hooks/useExperimentIds.ts","experiment-tracking/components/experiment-page/utils/experimentPage.fetch-utils.ts","experiment-tracking/components/experiment-page/components/runs/cells/ColumnHeaderCell.tsx","experiment-tracking/components/experiment-page/components/runs/cells/DateCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/ExperimentNameCellRenderer.tsx","common/static/logged-model.svg","common/static/registered-model.svg","experiment-tracking/components/experiment-page/components/runs/cells/ModelsCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/SourceCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/VersionCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/PinRowCellRenderer.tsx","experiment-tracking/components/experiment-page/components/runs/cells/RunNameCellRenderer.tsx","experiment-tracking/components/experiment-page/utils/experimentPage.column-utils.ts","experiment-tracking/components/experiment-page/models/SearchExperimentRunsFacetsState.ts","experiment-tracking/components/experiment-page/utils/persistSearchFacets.ts","experiment-tracking/components/experiment-page/contexts/GetExperimentRunsContext.tsx","experiment-tracking/components/experiment-page/hooks/useFetchExperimentRuns.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunModals.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsActions.tsx","../node_modules/antd/es/badge/SingleNumber.js","../node_modules/antd/es/badge/ScrollNumber.js","../node_modules/antd/es/badge/utils.js","../node_modules/antd/es/badge/Ribbon.js","../node_modules/antd/es/badge/index.js","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRefreshButton.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsColumnSelector.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControlsFilters.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsControls.tsx","experiment-tracking/components/experiment-page/hooks/useRunSortOptions.ts","common/components/ag-grid/AgGridLoader.tsx","common/components/ExperimentRunsTableEmptyOverlay.js","experiment-tracking/components/experiment-page/utils/experimentPage.row-utils.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTableAddColumnCTA.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRunsTable.tsx","experiment-tracking/components/experiment-page/models/SearchExperimentRunsViewState.ts","experiment-tracking/components/experiment-page/components/runs/ExperimentViewLoadMore.tsx","experiment-tracking/components/experiment-page/components/runs/ExperimentViewRuns.tsx","experiment-tracking/components/experiment-page/ExperimentView.tsx","experiment-tracking/components/experiment-page/hooks/useExperiments.ts","experiment-tracking/components/experiment-page/ExperimentPage.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport type { AnyAction } from 'redux';\n\n/**\n * Since we're using redux middlewares that promisify action dispatch\n * ('redux-promise-middleware'), we use this method as a sugar for useDispatch()\n * with correct typings.\n */\nexport const useAsyncDispatch = useDispatch as () => (action: AnyAction) => Promise<AnyAction>;\n","import { isEqual } from 'lodash';\nimport React, { createContext, useCallback, useMemo, useState } from 'react';\nimport RequestStateWrapper from '../../../../common/components/RequestStateWrapper';\nimport Utils from '../../../../common/utils/Utils';\n\nimport type {\n  getExperimentApi,\n  setCompareExperiments,\n  setExperimentTagApi,\n} from '../../../actions';\nimport { useAsyncDispatch } from '../hooks/useAsyncDispatch';\n\nexport interface GetExperimentsContextActions {\n  setExperimentTagApi: typeof setExperimentTagApi;\n  getExperimentApi: typeof getExperimentApi;\n  setCompareExperiments: typeof setCompareExperiments;\n}\n\nexport interface GetExperimentsContextType {\n  /**\n   * Function used to (re)fetch experiments using their IDs.\n   */\n  fetchExperiments: (experimentIds: string[]) => void;\n\n  /**\n   * Indicates if experiments are being loaded at the moment\n   */\n  isLoadingExperiment: boolean;\n\n  /**\n   * Contains error descriptor if fetching runs failed\n   */\n  requestError: any;\n\n  /**\n   * All experiment-related actions creators\n   */\n  actions: GetExperimentsContextActions;\n}\n\n/**\n * Wrapper context that aggregates concrete redux actions necessary to fetch experiments.\n */\nexport const GetExperimentsContext = createContext<GetExperimentsContextType | null>(null);\n\n/**\n * Provider component for GetExperimentsContext.\n * Accepts concrete redux actions for searching experiments.\n */\nexport const GetExperimentsContextProvider = ({\n  children,\n  actions,\n}: React.PropsWithChildren<{\n  actions: GetExperimentsContextActions;\n}>) => {\n  const [fetchExperimentsRequestIds, setFetchExperimentsRequestIds] = useState<string[]>([]);\n  const [isLoadingExperiment, setIsLoadingExperiment] = useState(false);\n\n  const [requestError, setRequestError] = useState<any>(null);\n\n  const dispatch = useAsyncDispatch();\n\n  const fetchExperiments = useCallback(\n    (experimentIds: string[]) => {\n      const fetchFn = () => {\n        const newRequestIds = experimentIds.map((experimentId) => {\n          const requestAction = actions.getExperimentApi(experimentId);\n          dispatch(requestAction).catch((e) => {\n            Utils.logErrorAndNotifyUser(e);\n          });\n          return requestAction.meta.id;\n        });\n        setFetchExperimentsRequestIds((requestIds) =>\n          isEqual(newRequestIds, requestIds) ? requestIds : newRequestIds,\n        );\n      };\n\n      setRequestError(null);\n      fetchFn();\n    },\n    [actions, dispatch],\n  );\n\n  const contextValue = useMemo(\n    () => ({\n      fetchExperiments,\n      isLoadingExperiment,\n      requestError: requestError,\n      actions,\n    }),\n    [actions, fetchExperiments, isLoadingExperiment, requestError],\n  );\n\n  const renderFn = (_isLoading: false, _renderError: any, requests: any[]) => {\n    /**\n     * TODO:\n     * Defer setting this state because currently it might happen inside\n     * RequestStateWrapper's render function which causes React to act up.\n     * Either rebuild RequestStateWrapper or introduce some workaround.\n     */\n    setIsLoadingExperiment(\n      requests.some((r) => fetchExperimentsRequestIds.includes(r.id) && r.active),\n    );\n\n    if (!requestError) {\n      requests.forEach((request) => {\n        if (request.error) {\n          setRequestError(request.error);\n        }\n      });\n    }\n\n    return children;\n  };\n\n  return (\n    <GetExperimentsContext.Provider value={contextValue}>\n      <RequestStateWrapper\n        shouldOptimisticallyRender\n        // eslint-disable-next-line no-trailing-spaces\n        requestIds={fetchExperimentsRequestIds}\n      >\n        {renderFn}\n      </RequestStateWrapper>\n    </GetExperimentsContext.Provider>\n  );\n};\n","var _desc, _g;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgPermissionDeniedLock(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"58px\",\n    height: \"75px\",\n    viewBox: \"0 0 58 75\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title === undefined ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, \"Privacy_Lock\") : title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _desc || (_desc = /*#__PURE__*/React.createElement(\"desc\", null, \"Created with Sketch.\")), _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    id: \"EmptyState\",\n    stroke: \"none\",\n    strokeWidth: 1,\n    fill: \"none\",\n    fillRule: \"evenodd\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"ErrorPage-noPermission\",\n    transform: \"translate(-691.000000, -194.000000)\",\n    fill: \"#43C8EC\"\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"Privacy_Lock\",\n    transform: \"translate(691.000000, 194.250000)\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M45.8,24.31 L45.8,17.16 C45.8,7.84295627 38.2470437,0.29 28.93,0.29 C19.6129563,0.29 12.06,7.84295627 12.06,17.16 L12.06,24.3 L0.14,24.3 L0.14,74.64 L57.71,74.64 L57.71,24.31 L45.8,24.31 Z M14.05,17.16 C14.05,8.94752577 20.7075258,2.29 28.92,2.29 C37.1324742,2.29 43.79,8.94752577 43.79,17.16 L43.79,24.3 L14.05,24.3 L14.05,17.16 Z M55.71,72.64 L2.14,72.64 L2.14,26.31 L55.71,26.31 L55.71,72.64 Z\",\n    id: \"Shape\",\n    fillRule: \"nonzero\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M28.93,37.33 C26.5550177,37.3567611 24.5749652,39.154747 24.319954,41.5161505 C24.0649429,43.8775541 25.6154871,46.0568139 27.93,46.59 L27.93,62.54 L29.93,62.54 L29.93,46.6 C32.2445129,46.0668139 33.7950571,43.8875541 33.540046,41.5261505 C33.2850348,39.164747 31.3049823,37.3667611 28.93,37.34 L28.93,37.33 Z\",\n    id: \"Path\"\n  }))))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgPermissionDeniedLock);\nexport default __webpack_public_path__ + \"static/media/permission-denied-lock.16036747d57cd663d7df223781a447b2.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport permissionDeniedLock from '../../common/static/permission-denied-lock.svg';\nimport { useDesignSystemTheme } from '@databricks/design-system';\n\nconst defaultMessage = 'The current user does not have permission to view this page.';\n\nexport function PermissionDeniedView({ errorMessage }) {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <div className='center'>\n      <img\n        style={{ height: 300, marginTop: 80 }}\n        src={permissionDeniedLock}\n        alt='permission denied'\n      />\n      <h1 style={{ paddingTop: 10 }}>Permission Denied</h1>\n      <h2 data-testid='error-message' css={{ color: theme.colors.textSecondary }}>\n        {errorMessage || defaultMessage}\n      </h2>\n    </div>\n  );\n}\n\nPermissionDeniedView.propTypes = {\n  errorMessage: PropTypes.string,\n};\n","import React from 'react';\n\nexport interface ExperimentViewArtifactLocationProps {\n  artifactLocation: string;\n}\n\nexport const ExperimentViewArtifactLocation = ({\n  artifactLocation,\n}: ExperimentViewArtifactLocationProps) => {\n  return <>{artifactLocation}</>;\n};\n","import { Typography } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { ExperimentEntity } from '../../../types';\nimport { ExperimentViewArtifactLocation } from './ExperimentViewArtifactLocation';\n\nexport const ExperimentViewDescriptions = React.memo(\n  ({ experiment }: { experiment: ExperimentEntity }) => (\n    <div css={styles.container}>\n      <Typography.Text color='secondary'>\n        <FormattedMessage\n          defaultMessage='Experiment ID'\n          description='Label for displaying the current experiment in view'\n        />\n        : {experiment.experiment_id}\n      </Typography.Text>\n      <Typography.Text color='secondary'>\n        <FormattedMessage\n          defaultMessage='Artifact Location'\n          description='Label for displaying the experiment artifact location'\n        />\n        : <ExperimentViewArtifactLocation artifactLocation={experiment.artifact_location} />\n      </Typography.Text>\n    </div>\n  ),\n);\n\nconst styles = {\n  container: (theme: Theme) => ({\n    display: 'flex' as const,\n    gap: theme.spacing.lg,\n  }),\n};\n","import { useContext } from 'react';\n\nimport { GetExperimentsContext } from '../contexts/GetExperimentsContext';\n\nexport const useFetchExperiments = () => {\n  const getExperimentsContext = useContext(GetExperimentsContext);\n\n  if (!getExperimentsContext) {\n    throw new Error('Trying to use GetExperimentsContext actions outside of the context!');\n  }\n\n  return getExperimentsContext;\n};\n","import { Button } from '@databricks/design-system';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useSelector } from 'react-redux';\nimport { CollapsibleSection } from '../../../../common/components/CollapsibleSection';\nimport { EditableNote } from '../../../../common/components/EditableNote';\nimport { getExperimentTags } from '../../../reducers/Reducers';\nimport { ExperimentEntity, KeyValueEntity } from '../../../types';\nimport { NOTE_CONTENT_TAG } from '../../../utils/NoteUtils';\nimport { useAsyncDispatch } from '../hooks/useAsyncDispatch';\nimport { useFetchExperiments } from '../hooks/useFetchExperiments';\n\nconst extractNoteFromTags = (tags: Record<string, KeyValueEntity>) =>\n  Object.values(tags).find((t) => t.getKey() === NOTE_CONTENT_TAG)?.value || undefined;\n\nexport interface ExperimentViewNotesProps {\n  experiment: ExperimentEntity;\n}\n\n/**\n * ExperimentView part responsible for displaying/editing note.\n *\n * Consumes note from the redux store and dispatches\n * `setExperimentTagApi` redux action from the context.\n */\nexport const ExperimentViewNotes = React.memo(({ experiment }: ExperimentViewNotesProps) => {\n  const storedNote = useSelector((state) => {\n    const tags = getExperimentTags(experiment.experiment_id, state);\n    return tags ? extractNoteFromTags(tags) : '';\n  });\n\n  const [showNotesEditor, setShowNotesEditor] = useState(false);\n\n  const {\n    actions: { setExperimentTagApi },\n  } = useFetchExperiments();\n\n  const dispatch = useAsyncDispatch();\n\n  const handleSubmitEditNote = useCallback(\n    (updatedNote: any) => {\n      const action = setExperimentTagApi(experiment.experiment_id, NOTE_CONTENT_TAG, updatedNote);\n      dispatch(action).then(() => setShowNotesEditor(false));\n    },\n    [experiment.experiment_id, setExperimentTagApi, dispatch],\n  );\n\n  return (\n    <CollapsibleSection\n      title={\n        <span css={styles.collapsibleSectionHeader}>\n          <FormattedMessage\n            defaultMessage='Description'\n            description='Header for displaying notes for the experiment table'\n          />{' '}\n          {!showNotesEditor && (\n            <Button type='link' onClick={() => setShowNotesEditor(true)}>\n              <FormattedMessage\n                defaultMessage='Edit'\n                // eslint-disable-next-line max-len\n                description='Text for the edit button next to the description section title on the experiment view page'\n              />\n            </Button>\n          )}\n        </span>\n      }\n      forceOpen={showNotesEditor}\n      defaultCollapsed={!storedNote}\n      data-test-id='experiment-notes-section'\n    >\n      <EditableNote\n        defaultMarkdown={storedNote}\n        onSubmit={handleSubmitEditNote}\n        onCancel={() => setShowNotesEditor(false)}\n        showEditor={showNotesEditor}\n      />\n    </CollapsibleSection>\n  );\n});\n\nconst styles = {\n  collapsibleSectionHeader: {\n    height: '32px',\n    lineHeight: '32px',\n  },\n};\n","import { useMemo } from 'react';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\n\n/**\n * This hook returns a memoized version of persistable store namespaced for the ExperimentView.\n * It can serve as a store for persisting state for a particular experiment - in this case,\n * the experiment id should be provided as a `identifier` parameter. It can also serve as a store for some\n * general purpose - e.g. you can provide \"onboarding\" as a identifier to get a store specific\n * for the onboarding section of the experiment view.\n *\n * @param storeIdentifier a unique identifier of created store - can be an experiment id or a general purpose name\n */\nexport const useExperimentViewLocalStore = (storeIdentifier: string) =>\n  useMemo(\n    () => LocalStorageUtils.getStoreForComponent('ExperimentView', storeIdentifier),\n    [storeIdentifier],\n  );\n","import { Alert, Spacer } from '@databricks/design-system';\nimport React, { useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useExperimentViewLocalStore } from '../hooks/useExperimentViewLocalStore';\nimport { ExperimentTrackingDocUrl, onboarding as ONBOARDING } from '../../../../common/constants';\n\nconst showTrackingHelperStoreKey = 'showTrackingHelper';\n\nconst getLearnMoreLinkUrl = () => ExperimentTrackingDocUrl;\n\nexport const ExperimentViewOnboarding = React.memo(() => {\n  const onboardingLocalStore = useExperimentViewLocalStore(ONBOARDING);\n\n  const disableOnboardingHelper = useCallback(() => {\n    onboardingLocalStore.setItem(showTrackingHelperStoreKey, 'false');\n  }, [onboardingLocalStore]);\n\n  const displayOnboarding = onboardingLocalStore.getItem(showTrackingHelperStoreKey) !== 'false';\n\n  return displayOnboarding ? (\n    <>\n      <Alert\n        message={\n          <FormattedMessage\n            defaultMessage='Track machine learning training runs in experiments. <link>Learn more</link>'\n            description='Information banner text to provide more information about experiments runs page'\n            values={{\n              link: (chunks: any) => (\n                <a href={getLearnMoreLinkUrl()} target='_blank' rel='noopener noreferrer'>\n                  {chunks}\n                </a>\n              ),\n            }}\n          />\n        }\n        type='info'\n        closable\n        onClose={disableOnboardingHelper}\n      />\n      <Spacer size='medium' />\n    </>\n  ) : null;\n});\n","import * as React from 'react';\nimport { Context } from './injectIntl';\nimport { invariantIntlContext } from '../utils';\nexport default function useIntl() {\n    var intl = React.useContext(Context);\n    invariantIntlContext(intl);\n    return intl;\n}\n","import { CopyIcon, Typography } from '@databricks/design-system';\nimport { useIntl } from 'react-intl';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Experiment page header part responsible for copying\n * the title after clicking on the icon\n */\nexport const ExperimentViewCopyTitle = ({ experiment }: { experiment: ExperimentEntity }) => {\n  const intl = useIntl();\n\n  return (\n    <Typography.Text\n      size='xl'\n      dangerouslySetAntdProps={{\n        copyable: {\n          text: experiment.name,\n          icon: <CopyIcon />,\n          tooltips: [\n            intl.formatMessage({\n              defaultMessage: 'Copy path',\n              description: 'Copy tooltip to copy experiment path from experiment runs table header',\n            }),\n            intl.formatMessage({\n              defaultMessage: 'Path copied',\n              description:\n                'Tooltip displayed after experiment path was successfully copied to clipboard',\n            }),\n          ],\n        },\n      }}\n    />\n  );\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Button, Tooltip } from '@databricks/design-system';\n\nexport const CopyButton = ({ copyText }) => {\n  const [showTooltip, setShowTooltip] = useState(false);\n\n  const handleClick = () => {\n    navigator.clipboard.writeText(copyText);\n    setShowTooltip(true);\n    setTimeout(() => {\n      setShowTooltip(false);\n    }, 3000);\n  };\n\n  const handleMouseLeave = () => {\n    setShowTooltip(false);\n  };\n\n  return (\n    <Tooltip\n      title={\n        <FormattedMessage\n          defaultMessage='Copied'\n          description='Tooltip text shown when copy operation completes'\n        />\n      }\n      dangerouslySetAntdProps={{\n        visible: showTooltip,\n      }}\n    >\n      <Button type='primary' onClick={handleClick} onMouseLeave={handleMouseLeave}>\n        <FormattedMessage defaultMessage='Copy' description='Button text for copy button' />\n      </Button>\n    </Tooltip>\n  );\n};\n\nCopyButton.propTypes = {\n  copyText: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from '@databricks/design-system';\nimport { CopyButton } from './CopyButton';\n\nexport const CopyBox = ({ copyText }) => (\n  <div css={{ display: 'flex', gap: 4 }}>\n    <Input readOnly value={copyText} data-test-id='copy-box' />\n    <CopyButton copyText={copyText} />\n  </div>\n);\n\nCopyBox.propTypes = {\n  copyText: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Modal } from '@databricks/design-system';\nimport { CopyBox } from '../../../shared/building_blocks/CopyBox';\n\nexport const GetLinkModal = ({ visible, onCancel, link }) => {\n  return (\n    <Modal\n      title={\n        <FormattedMessage defaultMessage='Get Link' description={'Title text for get-link modal'} />\n      }\n      visible={visible}\n      onCancel={onCancel}\n    >\n      <CopyBox copyText={link} />\n    </Modal>\n  );\n};\n\nGetLinkModal.propTypes = {\n  visible: PropTypes.bool.isRequired,\n  onCancel: PropTypes.func.isRequired,\n  link: PropTypes.string.isRequired,\n};\n","import { Button } from '@databricks/design-system';\nimport { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { GetLinkModal } from '../../../modals/GetLinkModal';\n\n/**\n * Experiment page header part responsible for displaying button\n * that displays modal for sharing the link\n */\nexport const ExperimentViewHeaderShareButton = () => {\n  const [showGetLinkModal, setShowGetLinkModal] = useState(false);\n\n  return (\n    <>\n      <GetLinkModal\n        link={window.top?.location.href || window.location.href}\n        visible={showGetLinkModal}\n        onCancel={() => setShowGetLinkModal(false)}\n      />\n      {/* TODO: ensure that E2E tests are working after refactor is complete */}\n      <Button type='primary' onClick={() => setShowGetLinkModal(true)} data-test-id='share-button'>\n        <FormattedMessage\n          defaultMessage='Share'\n          description='Text for share button on experiment view page header'\n        />\n      </Button>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewCopyTitle } from './ExperimentViewCopyTitle';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Header for a single experiment page. Displays title, breadcrumbs and provides\n * controls for renaming, deleting and editing permissions.\n */\nexport const ExperimentViewHeader = React.memo(\n  ({ experiment }: { experiment: ExperimentEntity }) => {\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n\n    /**\n     * Extract the last part of the experiment name\n     */\n    const normalizedExperimentName = useMemo(\n      () => experiment.name.split('/').pop(),\n      [experiment.name],\n    );\n\n    /* eslint-disable prettier/prettier */\n    return (\n      <PageHeader\n        title={\n          <>\n            {normalizedExperimentName} <ExperimentViewCopyTitle experiment={experiment} />\n          </>\n        }\n        breadcrumbs={breadcrumbs}\n      >\n          <ExperimentViewHeaderShareButton />\n      </PageHeader>\n    );\n    /* eslint-enable prettier/prettier */\n  },\n);\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PageHeader } from '../../../../../shared/building_blocks/PageHeader';\nimport { ExperimentViewHeaderShareButton } from './ExperimentViewHeaderShareButton';\nimport { ExperimentEntity } from '../../../../types';\n\n/**\n * Header for experiment compare page. Displays title and breadcrumbs.\n */\nexport const ExperimentViewHeaderCompare = React.memo(\n  ({ experiments }: { experiments: ExperimentEntity[] }) => {\n    const pageTitle = useMemo(\n      () => (\n        <FormattedMessage\n          defaultMessage='Displaying Runs from {numExperiments} Experiments'\n          description='Message shown when displaying runs from multiple experiments'\n          values={{\n            numExperiments: experiments.length,\n          }}\n        />\n      ),\n      [experiments.length],\n    );\n\n    // eslint-disable-next-line prefer-const\n    let breadcrumbs: React.ReactNode[] = [];\n\n    /* eslint-disable prettier/prettier */\n    return (\n      <PageHeader title={pageTitle} breadcrumbs={breadcrumbs}>\n        <ExperimentViewHeaderShareButton />\n      </PageHeader>\n    );\n    /* eslint-enable prettier/prettier */\n  },\n);\n","/**\n * Type definitions for models used in experiment tracking.\n * See 'src/experiment-tracking/sdk/MlflowMessages.js' for reference\n *\n * Note: this could be automatically generated in the future.\n */\n\nimport { SearchExperimentRunsFacetsState } from './components/experiment-page/models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from './components/experiment-page/models/SearchExperimentRunsViewState';\n\n/**\n * Simple key/value model enhanced with immutable.js\n * getter methods\n */\nexport interface KeyValueEntity {\n  key: string;\n  value: string;\n\n  getKey(): string;\n  getValue(): string;\n}\n\n/**\n * An entity defining a single model entity\n */\nexport interface ModelInfoEntity {\n  name: string;\n  version: string;\n  creation_timestamp: number;\n  last_updated_timestamp: number;\n  user_id: string;\n  current_stage: string;\n  source: string;\n  run_id: string;\n  status: string;\n  permission_level: string;\n  email_subscription_status: string;\n}\n\nexport interface RunInfoEntity {\n  artifact_uri: string;\n  end_time: number;\n  experiment_id: string;\n  lifecycle_stage: string;\n  run_uuid: string;\n  run_name: string;\n  start_time: number;\n  status: string;\n\n  getArtifactUri(): string;\n  getEndTime(): string;\n  getExperimentId(): string;\n  getLifecycleStage(): string;\n  getRunUuid(): string;\n  getStartTime(): string;\n  getStatus(): string;\n}\n\nexport interface MetricEntity {\n  key: string;\n  step: number;\n  timestamp: number;\n  value: string | number;\n\n  getKey(): string;\n  getStep(): string;\n  getTimestamp(): string;\n  getValue(): string | number;\n}\n\nexport type MetricEntitiesByName = Record<string, MetricEntity>;\n\nexport interface ExperimentEntity {\n  allowed_actions: string[];\n  artifact_location: string;\n  creation_time: number;\n  experiment_id: string;\n  last_update_time: number;\n  lifecycle_stage: string;\n  name: string;\n  tags: KeyValueEntity[];\n\n  getAllowedActions(): string[];\n  getArtifactLocation(): string;\n  getCreationTime(): number;\n  getExperimentId(): string;\n  getLastUpdateTime(): number;\n  getLifecycleStage(): string;\n  getName(): string;\n  getTags(): KeyValueEntity[];\n}\n\nexport interface ExperimentStoreEntities {\n  /**\n   * Dictionary with experiment ID as key and entity object as a value\n   */\n  experimentsById: Record<string, ExperimentEntity>;\n\n  /**\n   * Dictionary with run UUID as key and run info object as a value\n   */\n  runInfosByUuid: Record<string, RunInfoEntity>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value.\n   * Represents all metrics.\n   */\n  metricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value\n   * Represents latest metrics (e.g. fetched along run history).\n   */\n  latestMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value\n   * Represents metrics with min value.\n   */\n  minMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary with run UUID as key and metric sub-dictionary as a value\n   * Represents metrics with max value.\n   */\n  maxMetricsByRunUuid: Record<string, MetricEntitiesByName>;\n\n  /**\n   * Dictionary of parameters for runs. Run UUID is a first key,\n   * param name is the second one.\n   */\n  paramsByRunUuid: Record<string, Record<string, KeyValueEntity>>;\n\n  /**\n   * Dictionary of tags for runs. Run UUID serves is a first key,\n   * tag name is the second one.\n   */\n  tagsByRunUuid: Record<string, Record<string, KeyValueEntity>>;\n\n  /**\n   * Dictionary of tags for experiments. Experiment ID serves is a first key,\n   * tag name is the second one.\n   */\n  experimentTagsByExperimentId: Record<string, Record<string, KeyValueEntity>>;\n\n  /**\n   * Dictionary of models. Model name is the first key, model version is the second one.\n   * Model entity object is the value.\n   */\n  modelVersionsByModel: Record<string, Record<string, ModelInfoEntity>>;\n\n  /**\n   * Dictionary of models for runs. Run UUID is the key, used model entity object is the value.\n   */\n  modelVersionsByRunUuid: Record<string, ModelInfoEntity[]>;\n\n  /**\n   * List of all runs that match recently used filter. Runs that were fetched because they are\n   * pinned (not because they fit the filter) are excluded from this list.\n   */\n  runUuidsMatchingFilter: string[];\n}\n\n// eslint-disable-next-line no-shadow\nexport enum LIFECYCLE_FILTER {\n  ACTIVE = 'Active',\n  DELETED = 'Deleted',\n}\n\n// eslint-disable-next-line no-shadow\nexport enum MODEL_VERSION_FILTER {\n  WITH_MODEL_VERSIONS = 'With Model Versions',\n  WTIHOUT_MODEL_VERSIONS = 'Without Model Versions',\n  ALL_RUNS = 'All Runs',\n}\n\nexport type ExperimentCategorizedUncheckedKeys = {\n  attributes: string[];\n  metrics: string[];\n  params: string[];\n  tags: string[];\n};\n\n/**\n * Function used to update the filter set and fetch new set of runs.\n * First parameter is the subset of fields that the current sort/filter model will be merged with.\n * If the second parameter is set to true, it will force re-fetching even if there\n * are no sufficient changes to the model.\n */\nexport type UpdateExperimentSearchFacetsFn = (\n  newFilterModel:\n    | Partial<SearchExperimentRunsFacetsState>\n    | React.SetStateAction<SearchExperimentRunsFacetsState>,\n  updateOptions?: {\n    forceRefresh?: boolean;\n    preservePristine?: boolean;\n  },\n) => void;\n\n/**\n * Function used to update the local (non-persistable) view state.\n * First parameter is the subset of fields that the current view state model will be merged with.\n */\nexport type UpdateExperimentViewStateFn = (\n  newPartialViewState: Partial<SearchExperimentRunsViewState>,\n) => void;\n","import {\n  ExperimentEntity,\n  ExperimentStoreEntities,\n  KeyValueEntity,\n  LIFECYCLE_FILTER,\n  ModelInfoEntity,\n  MODEL_VERSION_FILTER,\n  RunInfoEntity,\n} from '../../../types';\nimport { getLatestMetrics } from '../../../reducers/MetricReducer';\nimport { getExperimentTags, getParams, getRunInfo, getRunTags } from '../../../reducers/Reducers';\n\ntype StateWithEntities = { entities: ExperimentStoreEntities };\n\nexport type ExperimentRunsSelectorResult = {\n  /**\n   * Array of run infos\n   */\n  runInfos: RunInfoEntity[];\n\n  /**\n   * List of unique metric keys\n   */\n  runUuidsMatchingFilter: string[];\n\n  /**\n   * List of unique metric keys\n   */\n  metricKeyList: string[];\n\n  /**\n   * List of unique param keys\n   */\n  paramKeyList: string[];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: metricsList[2] contains list of all\n   * metrics corresponding to the 3rd run in the run list\n   */\n  metricsList: KeyValueEntity[][];\n\n  /**\n   * List of metrics indexed by the respective runs.\n   * Example: paramsList[2] contains list of all\n   * params corresponding to the 3rd run in the run list\n   */\n  paramsList: KeyValueEntity[][];\n\n  /**\n   * List of tags indexed by the respective runs.\n   * Example: tagsList[2] contains dictionary of all\n   * tags corresponding to the 3rd run in the run list\n   */\n  tagsList: Record<string, KeyValueEntity>[];\n\n  /**\n   * Dictionary containing model information objects indexed by run uuid\n   */\n  modelVersionsByRunUuid: Record<string, ModelInfoEntity[]>;\n\n  /**\n   * Dictionary containing all tags assigned to a experiment\n   * (single experiment only)\n   */\n  experimentTags: Record<string, KeyValueEntity>;\n};\n\nexport type ExperimentRunsSelectorParams = {\n  experiments: ExperimentEntity[];\n  lifecycleFilter?: LIFECYCLE_FILTER;\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n};\n\n/**\n * Extracts run infos filtered by lifecycle filter and model version filter\n */\nconst extractRunInfos = (\n  runUuids: string[],\n  state: StateWithEntities,\n  {\n    lifecycleFilter = LIFECYCLE_FILTER.ACTIVE,\n    modelVersionFilter = MODEL_VERSION_FILTER.ALL_RUNS,\n  }: ExperimentRunsSelectorParams,\n): RunInfoEntity[] => {\n  const { modelVersionsByRunUuid } = state.entities;\n\n  return (\n    runUuids\n      // Get the basic run info\n      .map((run_id) => getRunInfo(run_id, state))\n      // Filter out runs by given lifecycle filter\n      .filter((rInfo) => {\n        if (lifecycleFilter === LIFECYCLE_FILTER.ACTIVE) {\n          return rInfo.lifecycle_stage === 'active';\n        } else {\n          return rInfo.lifecycle_stage === 'deleted';\n        }\n      })\n      // Filter out runs by given model version filter\n      .filter((rInfo) => {\n        if (modelVersionFilter === MODEL_VERSION_FILTER.ALL_RUNS) {\n          return true;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WITH_MODEL_VERSIONS) {\n          return rInfo.run_uuid in modelVersionsByRunUuid;\n        } else if (modelVersionFilter === MODEL_VERSION_FILTER.WTIHOUT_MODEL_VERSIONS) {\n          return !(rInfo.run_uuid in modelVersionsByRunUuid);\n        } else {\n          console.warn('Invalid input to model version filter - defaulting to showing all runs.');\n          return true;\n        }\n      })\n  );\n};\n\nexport const experimentRunsSelector = (\n  state: { entities: ExperimentStoreEntities },\n  params: ExperimentRunsSelectorParams,\n): ExperimentRunsSelectorResult => {\n  const { experiments } = params;\n  const experimentIds = experiments.map((e) => e.experiment_id);\n  const comparingExperiments = experimentIds.length > 1;\n\n  /**\n   * Extract run UUIDs relevant to selected experiments\n   */\n  const runUuids = Object.values(state.entities.runInfosByUuid)\n    .filter(({ experiment_id }) => experimentIds.includes(experiment_id))\n    .map(({ run_uuid }) => run_uuid);\n\n  /**\n   * Extract model version and runs matching filter directly from the store\n   */\n  const { modelVersionsByRunUuid, runUuidsMatchingFilter } = state.entities;\n\n  /**\n   * Extract run infos\n   */\n  const runInfos = extractRunInfos(runUuids, state, params);\n\n  /**\n   * Set of unique metric keys\n   */\n  const metricKeysSet = new Set<string>();\n\n  /**\n   * Set of unique param keys\n   */\n  const paramKeysSet = new Set<string>();\n\n  /**\n   * Extracting lists of metrics by run index\n   */\n  const metricsList = runInfos.map((runInfo) => {\n    const metricsByRunUuid = getLatestMetrics(runInfo.run_uuid, state);\n    const metrics = Object.values(metricsByRunUuid || {}) as any[];\n    metrics.forEach((metric) => {\n      metricKeysSet.add(metric.key);\n    });\n    return metrics;\n  }) as KeyValueEntity[][];\n\n  /**\n   * Extracting lists of params by run index\n   */\n  const paramsList = runInfos.map((runInfo) => {\n    const paramValues = Object.values(getParams(runInfo.run_uuid, state)) as any[];\n    paramValues.forEach((param) => {\n      paramKeysSet.add(param.key);\n    });\n    return paramValues;\n  }) as KeyValueEntity[][];\n\n  /**\n   * Extracting dictionaries of tags by run index\n   */\n  const tagsList = runInfos.map((runInfo) => getRunTags(runInfo.run_uuid, state)) as Record<\n    string,\n    KeyValueEntity\n  >[];\n\n  const firstExperimentId = experimentIds[0];\n\n  /**\n   * If there is only one experiment, extract experiment tags as well\n   */\n  const experimentTags = (\n    comparingExperiments ? {} : getExperimentTags(firstExperimentId, state)\n  ) as Record<string, KeyValueEntity>;\n\n  return {\n    modelVersionsByRunUuid,\n    experimentTags,\n    runInfos,\n    paramsList,\n    tagsList,\n    metricsList,\n    runUuidsMatchingFilter,\n    metricKeyList: Array.from(metricKeysSet.values()).sort(),\n    paramKeyList: Array.from(paramKeysSet.values()).sort(),\n  };\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ExpandableList extends Component {\n  state = {\n    toggled: false,\n  };\n\n  static propTypes = {\n    children: PropTypes.array.isRequired,\n    onToggle: PropTypes.func,\n    // how many lines to show in the compressed state\n    showLines: PropTypes.number,\n  };\n\n  static defaultProps = {\n    showLines: 1,\n  };\n\n  handleToggle = () => {\n    this.setState((prevState) => ({\n      toggled: !prevState.toggled,\n    }));\n    if (this.props.onToggle) {\n      this.props.onToggle();\n    }\n  };\n\n  render() {\n    if (this.props.children.length <= this.props.showLines) {\n      return (\n        <div css={expandableListClassName}>\n          {this.props.children.map((item, index) => (\n            <div className='expandable-list-item' key={index}>\n              {item}\n            </div>\n          ))}\n        </div>\n      );\n    } else {\n      const expandedElems = this.props.children.slice(this.props.showLines).map((item, index) => (\n        <div className='expandable-list-item' key={index}>\n          {item}\n        </div>\n      ));\n      const expandedContent = (\n        <div className='expanded-list-elems'>\n          {expandedElems}\n          <div onClick={this.handleToggle} className='expander-text'>\n            Less\n          </div>\n        </div>\n      );\n      const showMore = (\n        <div onClick={this.handleToggle} className='expander-text'>\n          +{this.props.children.length - this.props.showLines} more\n        </div>\n      );\n      return (\n        <div css={expandableListClassName}>\n          {this.props.children.slice(0, this.props.showLines).map((item, index) => (\n            <div className='expandable-list-item' key={index}>\n              {item}\n            </div>\n          ))}\n          {this.state.toggled ? expandedContent : showMore}\n        </div>\n      );\n    }\n  }\n}\n\nconst expandableListClassName = {\n  '.expander-text': {\n    textDecoration: 'underline',\n    cursor: 'pointer',\n  },\n};\n\nexport default ExpandableList;\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgRegistryIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 15,\n    height: 15,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M6.93131 3.35872C6.63761 2.01 5.43675 1 4 1C2.34315 1 1 2.34315 1 4C1                 5.4365 2.00964 6.63719 3.35802 6.93115L4.65625 17.317C3.67409 17.8099 3                 18.8262 3 20C3 21.6569 4.34315 23 6 23C7.47907 23 8.70815 21.9296 8.95488                 20.5212L15.3738 19.4514C15.8853 20.3748 16.8696 21 18 21C19.6569 21 21 19.6569                 21 18C21 16.8694 20.3746 15.885 19.4509 15.3736L20.5207 8.95497C21.9294 8.70846                 23 7.47926 23 6C23 4.34315 21.6569 3 20 3C18.826 3 17.8095 3.67438 17.3167                 4.6569L6.93131 3.35872ZM17.4781 15.0452L18.548 8.62582C17.8047 8.21394 17.2548                 7.49564 17.0687 6.64147L6.7681 5.35389L16.7066 15.2924C16.9477 15.177 17.2066                 15.0929 17.4781 15.0452ZM15.0451 17.4786C15.0928 17.2069 15.1769 16.9478 15.2924                 16.7066L15.292 16.7062L15.2916 16.7069L5.35325 6.76851L6.64076 17.0686C7.49543                 17.2545 8.21412 17.8047 8.62608 18.5484L15.0451 17.4786ZM21 6C21 6.55228 20.5523                 7 20 7C19.4477 7 19 6.55228 19 6C19 5.44772 19.4477 5 20 5C20.5523 5 21 5.44772 21 6ZM4                 5C4.55228 5 5 4.55228 5 4C5 3.44772 4.55228 3 4 3C3.44772 3 3 3.44772 3 4C3 4.55228                 3.44772 5 4 5ZM19 18C19 18.5523 18.5523 19 18 19C17.4477 19 17 18.5523 17 18C17 17.4477                 17.4477 17 18 17C18.5523 17 19 17.4477 19 18ZM6 21C6.55228 21 7 20.5523 7 20C7 19.4477                 6.55228 19 6 19C5.44772 19 5 19.4477 5 20C5 20.5523 5.44772 21 6 21Z\",\n    fill: \"#2374bb\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegistryIcon);\nexport default __webpack_public_path__ + \"static/media/registryIcon.45763d5027ff453b5352e32a9802c012.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@databricks/design-system';\n\nexport const TrimmedText = ({ text, maxSize, className, allowShowMore = false }) => {\n  if (text.length <= maxSize) {\n    return <span className={className}>{text}</span>;\n  }\n  const trimmedText = `${text.substr(0, maxSize)}...`;\n  // Reported during ESLint upgrade\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [showMore, setShowMore] = useState(false);\n  return (\n    <span className={className}>\n      {showMore ? text : trimmedText}\n      {allowShowMore && (\n        <Button\n          type='link'\n          onClick={() => setShowMore(!showMore)}\n          size='small'\n          css={styles.expandButton}\n          data-test-id='trimmed-text-button'\n        >\n          {showMore ? 'collapse' : 'expand'}\n        </Button>\n      )}\n    </span>\n  );\n};\n\nconst styles = {\n  expandButton: {\n    display: 'inline-block',\n  },\n};\n\nTrimmedText.propTypes = {\n  text: PropTypes.string.isRequired,\n  maxSize: PropTypes.number.isRequired,\n  className: PropTypes.string.isRequired,\n  allowShowMore: PropTypes.bool,\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport Utils from '../../common/utils/Utils';\nimport { getModelVersionPageRoute } from '../../model-registry/routes';\nimport _ from 'lodash';\nimport ExpandableList from '../../common/components/ExpandableList';\nimport registryIcon from '../../common/static/registryIcon.svg';\nimport { TrimmedText } from '../../common/components/TrimmedText';\nimport {\n  ATTRIBUTE_COLUMN_LABELS,\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  DEFAULT_EXPANDED_VALUE,\n  COLUMN_TYPES,\n} from '../constants';\nimport {\n  CheckCircleBorderIcon,\n  ClockIcon,\n  XCircleBorderIcon,\n  useDesignSystemTheme,\n} from '@databricks/design-system';\n\nfunction ErrorIcon() {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <XCircleBorderIcon\n      css={{\n        color: theme.colors.textValidationDanger,\n      }}\n    />\n  );\n}\n\nfunction FinishedIcon() {\n  const { theme } = useDesignSystemTheme();\n  return (\n    <CheckCircleBorderIcon\n      css={{\n        color: theme.colors.textValidationSuccess,\n      }}\n    />\n  );\n}\n\nexport default class ExperimentViewUtil {\n  /** Returns checkbox cell for a row. */\n  static getCheckboxForRow(selected, checkboxHandler, cellType) {\n    const CellComponent = `${cellType}`;\n    return (\n      <CellComponent key='meta-check' className='run-table-container'>\n        <div>\n          <input type='checkbox' checked={selected} onChange={checkboxHandler} />\n        </div>\n      </CellComponent>\n    );\n  }\n\n  static styles = {\n    sortIconStyle: {\n      verticalAlign: 'middle',\n      fontSize: 20,\n    },\n    sortIconContainer: {\n      marginLeft: 2,\n      minWidth: 12.5,\n      display: 'inline-block',\n    },\n    expander: {\n      pointer: 'cursor',\n    },\n    runInfoCell: {\n      maxWidth: 250,\n    },\n  };\n\n  /**\n   * Returns an icon depending on run status.\n   */\n  static getRunStatusIcon(status) {\n    switch (status) {\n      case 'FAILED':\n      case 'KILLED':\n        return <ErrorIcon />;\n      case 'FINISHED':\n        return <FinishedIcon />;\n      case 'SCHEDULED':\n        return <ClockIcon />; // This one is the same color as the link\n      default:\n        return <i />;\n    }\n  }\n\n  /**\n   * Format a string for insertion into a CSV file.\n   */\n  static csvEscape(str) {\n    if (str === undefined) {\n      return '';\n    }\n    if (/[,\"\\r\\n]/.test(str)) {\n      return '\"' + str.replace(/\"/g, '\"\"') + '\"';\n    }\n    return str;\n  }\n\n  /**\n   * Convert a table to a CSV string.\n   *\n   * @param columns Names of columns\n   * @param data Array of rows, each of which are an array of field values\n   */\n  static tableToCsv(columns, data) {\n    let csv = '';\n    let i;\n\n    for (i = 0; i < columns.length; i++) {\n      csv += ExperimentViewUtil.csvEscape(columns[i]);\n      if (i < columns.length - 1) {\n        csv += ',';\n      }\n    }\n    csv += '\\n';\n\n    for (i = 0; i < data.length; i++) {\n      for (let j = 0; j < data[i].length; j++) {\n        csv += ExperimentViewUtil.csvEscape(data[i][j]);\n        if (j < data[i].length - 1) {\n          csv += ',';\n        }\n      }\n      csv += '\\n';\n    }\n\n    return csv;\n  }\n\n  /**\n   * Convert an array of run infos to a CSV string, extracting the params and metrics in the\n   * provided lists.\n   */\n  static runInfosToCsv(\n    runInfos,\n    paramKeyList,\n    metricKeyList,\n    tagKeyList,\n    paramsList,\n    metricsList,\n    tagsList,\n  ) {\n    const columns = [\n      'Start Time',\n      'Duration',\n      'Run ID',\n      'Name',\n      'Source Type',\n      'Source Name',\n      'User',\n      'Status',\n      ...paramKeyList,\n      ...metricKeyList,\n      ...tagKeyList,\n    ];\n\n    const data = runInfos.map((runInfo, index) => {\n      const row = [\n        Utils.formatTimestamp(runInfo.start_time),\n        Utils.getDuration(runInfo.start_time, runInfo.end_time) || '',\n        runInfo.run_uuid,\n        Utils.getRunNameFromTags(tagsList[index]), // add run name to csv export row\n        Utils.getSourceType(tagsList[index]),\n        Utils.getSourceName(tagsList[index]),\n        Utils.getUser(runInfo, tagsList[index]),\n        runInfo.status,\n      ];\n      const paramsMap = ExperimentViewUtil.toParamsMap(paramsList[index]);\n      const metricsMap = ExperimentViewUtil.toMetricsMap(metricsList[index]);\n      const tagsMap = tagsList[index];\n\n      paramKeyList.forEach((paramKey) => {\n        if (paramsMap[paramKey]) {\n          row.push(paramsMap[paramKey].getValue());\n        } else {\n          row.push('');\n        }\n      });\n      metricKeyList.forEach((metricKey) => {\n        if (metricsMap[metricKey]) {\n          row.push(metricsMap[metricKey].getValue());\n        } else {\n          row.push('');\n        }\n      });\n      tagKeyList.forEach((tagKey) => {\n        if (tagsMap[tagKey]) {\n          row.push(tagsMap[tagKey].getValue());\n        } else {\n          row.push('');\n        }\n      });\n      return row;\n    });\n\n    return ExperimentViewUtil.tableToCsv(columns, data);\n  }\n\n  /**\n   * Returns an icon for sorting the metric or param column with the specified key. The icon\n   * is visible if we're currently sorting by the corresponding column. Otherwise, the icon is\n   * invisible but takes up space.\n   */\n  static getSortIcon(curOrderByKey, curOrderByAsc, canonicalKey) {\n    if (curOrderByKey === canonicalKey) {\n      return (\n        <span>\n          <i\n            className={curOrderByAsc ? 'fas fa-caret-up' : 'fas fa-caret-down'}\n            style={ExperimentViewUtil.styles.sortIconStyle}\n          />\n        </span>\n      );\n    }\n    return undefined;\n  }\n\n  /** Returns checkbox element for selecting all runs */\n  static getSelectAllCheckbox(onCheckAll, isAllCheckedBool, cellType) {\n    const CellComponent = `${cellType}`;\n    return (\n      <CellComponent key='meta-check' className='bottom-row run-table-container'>\n        <input type='checkbox' onChange={onCheckAll} checked={isAllCheckedBool} />\n      </CellComponent>\n    );\n  }\n\n  /**\n   * Returns header-row table cells for columns containing run metadata.\n   */\n  static getRunMetadataHeaderCells(onSortBy, curOrderByKey, curOrderByAsc, cellType, excludedCols) {\n    const CellComponent = `${cellType}`;\n    const getHeaderCell = (key, text, canonicalSortKey) => {\n      const sortIcon = ExperimentViewUtil.getSortIcon(\n        curOrderByKey,\n        curOrderByAsc,\n        canonicalSortKey,\n      );\n      const isSortable = canonicalSortKey !== null;\n      const cellClassName = classNames('run-table-container', {\n        sortable: isSortable,\n      });\n      return (\n        <CellComponent\n          key={'meta-' + key}\n          className={cellClassName}\n          onClick={() => (isSortable ? onSortBy(canonicalSortKey, !curOrderByAsc) : null)}\n        >\n          <span>{text}</span>\n          {isSortable && (\n            <span style={ExperimentViewUtil.styles.sortIconContainer}>{sortIcon}</span>\n          )}\n        </CellComponent>\n      );\n    };\n    const excludedColsSet = new Set(excludedCols);\n    return [\n      {\n        key: 'status',\n        canonicalSortKey: null,\n      },\n      {\n        key: 'start_time',\n        displayName: ATTRIBUTE_COLUMN_LABELS.DATE,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      },\n      {\n        key: 'duration',\n        displayName: ATTRIBUTE_COLUMN_LABELS.DURATION,\n        canonicalSortKey: null,\n      },\n      {\n        key: 'user_id',\n        displayName: ATTRIBUTE_COLUMN_LABELS.USER,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      },\n      {\n        key: 'run_name',\n        displayName: ATTRIBUTE_COLUMN_LABELS.RUN_NAME,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      },\n      {\n        key: 'source',\n        displayName: ATTRIBUTE_COLUMN_LABELS.SOURCE,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.SOURCE,\n      },\n      {\n        key: 'source_version',\n        displayName: ATTRIBUTE_COLUMN_LABELS.VERSION,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.VERSION,\n      },\n      {\n        key: 'tags',\n        displayName: 'Tags',\n        canonicalSortKey: null,\n      },\n      {\n        key: 'linked-models',\n        displayName: 'Linked Models',\n        canonicalSortKey: null,\n      },\n    ]\n      .filter((column) => !excludedColsSet.has(column.displayName))\n      .map((h) => getHeaderCell(h.key, <span>{h.displayName}</span>, h.canonicalSortKey));\n  }\n\n  static makeCanonicalKey(keyType, keyName) {\n    return keyType + '.`' + keyName + '`';\n  }\n\n  static getExpanderHeader(cellType) {\n    const CellComponent = `${cellType}`;\n    return (\n      <CellComponent\n        key={'meta-expander'}\n        className={'bottom-row run-table-container'}\n        style={{ width: '5px' }}\n      />\n    );\n  }\n\n  /**\n   * Returns a table cell corresponding to a single metric value. The metric is assumed to be\n   * unbagged (marked to be displayed in its own column).\n   * @param metricKey The key of the desired metric\n   * @param metricsMap Object mapping metric keys to their latest values for a single run\n   * @param metricRanges Object mapping metric keys to objects of the form {min: ..., max: ...}\n   *                     containing min and max values of the metric across all visible runs.\n   * @param cellType Tag type (string like \"div\", \"td\", etc) of containing cell.\n   */\n  static getUnbaggedMetricCell(metricKey, metricsMap, metricRanges, cellType) {\n    const className = 'left-border run-table-container';\n    const keyName = 'metric-' + metricKey;\n    const CellComponent = `${cellType}`;\n    if (metricsMap[metricKey]) {\n      const metric = metricsMap[metricKey].getValue();\n      const range = metricRanges[metricKey];\n      let fraction = 1.0;\n      if (range.max > range.min) {\n        fraction = (metric - range.min) / (range.max - range.min);\n      }\n      const percent = fraction * 100 + '%';\n      return (\n        <CellComponent className={className} key={keyName}>\n          {/* We need the extra div because metric-filler-bg is inline-block */}\n          <div>\n            <div className='metric-filler-bg'>\n              <div className='metric-filler-fg' style={{ width: percent }} />\n              <div className='metric-text'>{Utils.formatMetric(metric)}</div>\n            </div>\n          </div>\n        </CellComponent>\n      );\n    }\n    return <CellComponent className={className} key={keyName} />;\n  }\n\n  static getUnbaggedParamCell(paramKey, paramsMap, cellType) {\n    const CellComponent = `${cellType}`;\n    const className = 'left-border run-table-container';\n    const keyName = 'param-' + paramKey;\n    if (paramsMap[paramKey]) {\n      return (\n        <CellComponent className={className} key={keyName}>\n          <div>{paramsMap[paramKey].getValue()}</div>\n        </CellComponent>\n      );\n    } else {\n      return <CellComponent className={className} key={keyName} />;\n    }\n  }\n\n  static renderLinkedModelCell(modelVersion) {\n    const { name, version } = modelVersion;\n    return (\n      <div className='version-link'>\n        <img src={registryIcon} alt='MLflow Model Registry Icon' />\n        <span className='model-link-text'>\n          {/* Reported during ESLint upgrade */}\n          {/* eslint-disable-next-line react/jsx-no-target-blank */}\n          <a\n            href={Utils.getIframeCorrectedRoute(getModelVersionPageRoute(name, version))}\n            className='model-version-link'\n            title={`${name}, v${version}`}\n            style={{ verticalAlign: 'middle' }}\n            target='_blank'\n          >\n            <TrimmedText text={name} maxSize={10} className={'model-name'} />\n            <span>/{version}&nbsp;</span>\n          </a>\n        </span>\n      </div>\n    );\n  }\n\n  static getLinkedModelCell(associatedModelVersions, handleCellToggle) {\n    const className = 'run-table-container';\n    if (associatedModelVersions && associatedModelVersions.length > 0) {\n      return (\n        <div className={className} key='linked=models'>\n          <ExpandableList\n            children={associatedModelVersions.map((version) => this.renderLinkedModelCell(version))}\n            showLines={1}\n            onToggle={handleCellToggle}\n          />\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  static computeMetricRanges(metricsByRun) {\n    const ret = {};\n    metricsByRun.forEach((metrics) => {\n      metrics.forEach((metric) => {\n        if (!ret.hasOwnProperty(metric.key)) {\n          ret[metric.key] = {\n            min: Math.min(metric.value, metric.value * 0.7),\n            max: metric.value,\n          };\n        } else {\n          if (metric.value < ret[metric.key].min) {\n            ret[metric.key].min = Math.min(metric.value, metric.value * 0.7);\n          }\n          if (metric.value > ret[metric.key].max) {\n            ret[metric.key].max = metric.value;\n          }\n        }\n      });\n    });\n    return ret;\n  }\n\n  /**\n   * Turn a list of metrics to a map of metric key to metric.\n   */\n  static toMetricsMap(metrics) {\n    const ret = {};\n    metrics.forEach((metric) => {\n      ret[metric.key] = metric;\n    });\n    return ret;\n  }\n\n  /**\n   * Turn a list of param to a map of metric key to metric.\n   */\n  static toParamsMap(params) {\n    const ret = {};\n    params.forEach((param) => {\n      ret[param.key] = param;\n    });\n    return ret;\n  }\n\n  static isExpanderOpen(runsExpanded, runId) {\n    let expanderOpen = DEFAULT_EXPANDED_VALUE;\n    if (runsExpanded[runId] !== undefined) expanderOpen = runsExpanded[runId];\n    return expanderOpen;\n  }\n\n  static getExpander(hasExpander, expanderOpen, onExpandBound, runUuid, cellType) {\n    const CellComponent = `${cellType}`;\n    if (!hasExpander) {\n      return <CellComponent key={'Expander-' + runUuid} style={{ padding: 8 }}></CellComponent>;\n    }\n    if (expanderOpen) {\n      return (\n        <CellComponent onClick={onExpandBound} key={'Expander-' + runUuid} style={{ padding: 8 }}>\n          <i className='ExperimentView-expander far fa-minus-square-o' />\n        </CellComponent>\n      );\n    } else {\n      return (\n        <CellComponent onClick={onExpandBound} key={'Expander-' + runUuid} style={{ padding: 8 }}>\n          <i className='ExperimentView-expander far fa-plus-square-o' />\n        </CellComponent>\n      );\n    }\n  }\n\n  static getNestedRowRenderMetadata({ runInfos, tagsList, runsExpanded }) {\n    const runIdToIdx = {};\n    runInfos.forEach((r, idx) => {\n      runIdToIdx[r.run_uuid] = idx;\n    });\n    const treeNodes = runInfos.map((r) => new TreeNode(r.run_uuid));\n    tagsList.forEach((tags, idx) => {\n      const parentRunId = tags['mlflow.parentRunId'];\n      if (parentRunId) {\n        const parentRunIdx = runIdToIdx[parentRunId.value];\n        if (parentRunIdx !== undefined) {\n          treeNodes[idx].parent = treeNodes[parentRunIdx];\n        }\n      }\n    });\n    // Map of parentRunIds to list of children runs (idx)\n    const parentIdToChildren = {};\n    const rootsIdxs = [];\n    treeNodes.forEach((t, idx) => {\n      const { parent } = t;\n      if (parent !== undefined && parent.value !== t.value) {\n        const old = parentIdToChildren[parent.value];\n        let newList;\n        if (old) {\n          old.push(idx);\n          newList = old;\n        } else {\n          newList = [idx];\n        }\n        parentIdToChildren[parent.value] = newList;\n      } else {\n        rootsIdxs.push(idx);\n      }\n    });\n\n    const mergedRows = [];\n    const visited = new Set();\n    rootsIdxs.forEach((index) => {\n      function dfs(idx, curr_level) {\n        if (!visited.has(idx)) {\n          const runId = runInfos[idx].run_uuid;\n          let row = undefined;\n          if (parentIdToChildren[runId]) {\n            row = {\n              idx,\n              isParent: true,\n              hasExpander: true,\n              expanderOpen: ExperimentViewUtil.isExpanderOpen(runsExpanded, runId),\n              childrenIds: parentIdToChildren[runId].map((cIdx) => runInfos[cIdx].run_uuid),\n              runId,\n              level: curr_level,\n            };\n          } else {\n            row = { idx, isParent: false, hasExpander: false, level: curr_level };\n          }\n\n          mergedRows.push(row);\n          visited.add(idx);\n\n          const childrenIdxs = parentIdToChildren[row.runId];\n          if (childrenIdxs) {\n            if (ExperimentViewUtil.isExpanderOpen(runsExpanded, row.runId)) {\n              childrenIdxs.forEach((dIdx) => {\n                dfs(dIdx, curr_level + 1);\n              });\n            }\n          }\n        }\n      }\n      dfs(index, 0);\n    });\n    return mergedRows.slice(0);\n  }\n\n  static getRowRenderMetadata({ runInfos, tagsList, runsExpanded, nestChildren }) {\n    if (nestChildren) {\n      return this.getNestedRowRenderMetadata({ runInfos, tagsList, runsExpanded });\n    } else {\n      return [...Array(runInfos.length).keys()].map((idx) => ({\n        idx,\n        isParent: true,\n        hasExpander: false,\n        runId: runInfos[idx].run_uuid,\n      }));\n    }\n  }\n\n  static getRows({ runInfos, tagsList, runsExpanded, getRow }) {\n    const mergedRows = ExperimentViewUtil.getRowRenderMetadata({\n      runInfos,\n      tagsList,\n      runsExpanded,\n    });\n    return mergedRows.map((rowMetadata) => getRow(rowMetadata));\n  }\n\n  static renderRows(rows) {\n    return rows.map((row) => {\n      const style = row.isChild ? { backgroundColor: '#fafafa' } : {};\n      return (\n        <tr key={row.key} style={style} className='ExperimentView-row'>\n          {row.contents}\n        </tr>\n      );\n    });\n  }\n\n  static disableLoadMoreButton({ numRunsFromLatestSearch, nextPageToken }) {\n    if (numRunsFromLatestSearch === null) {\n      // numRunsFromLatestSearch is null by default, so we should not disable the button\n      return false;\n    }\n    return nextPageToken === null;\n  }\n\n  /**\n   * Obtain the categorized columns (params, metrics & tags) for which the values\n   * in them have only a single value (or are undefined). For attribute columns,\n   * obtain the columns for which every value is undefined.\n   */\n  static getCategorizedUncheckedKeysDiffView({\n    categorizedUncheckedKeys,\n    paramKeyList,\n    metricKeyList,\n    runInfos,\n    paramsList,\n    metricsList,\n    tagsList,\n  }) {\n    const attributeColumnsToTags = {\n      // Leave the User and Source columns out of consideration because they normally have values.\n      [ATTRIBUTE_COLUMN_LABELS.RUN_NAME]: Utils.runNameTag,\n      [ATTRIBUTE_COLUMN_LABELS.VERSION]: Utils.gitCommitTag,\n      [ATTRIBUTE_COLUMN_LABELS.MODELS]: Utils.loggedModelsTag,\n    };\n    const attributeKeyList = Object.keys(attributeColumnsToTags);\n    const tagKeyList = Utils.getVisibleTagKeyList(tagsList);\n    let attributeColumnsToUncheck = _.difference(\n      attributeKeyList,\n      categorizedUncheckedKeys[COLUMN_TYPES.ATTRIBUTES],\n    );\n    let paramColumnsToUncheck = _.difference(\n      paramKeyList,\n      categorizedUncheckedKeys[COLUMN_TYPES.PARAMS],\n    );\n    let metricColumnsToUncheck = _.difference(\n      metricKeyList,\n      categorizedUncheckedKeys[COLUMN_TYPES.METRICS],\n    );\n    let tagColumnsToUncheck = _.difference(tagKeyList, categorizedUncheckedKeys[COLUMN_TYPES.TAGS]);\n\n    const dropDiffColumns = (columns, prevRow, currRow) => {\n      // What each argument represents:\n      // | a   | b   | c   | d   | e   | <- columns\n      // | --- | --- | --- | --- | --- |\n      // | -   | 1   | -   | 1   | 1   | <- prevRow\n      // | -   | -   | 1   | 1   | 2   | <- currRow\n      // | ?   | ?   | ?   | ?   | ?   |\n      //\n      // a, d: may be a diff column, we need to check the next row\n      // b, c, e: is a diff column, we don't need to check the next row\n\n      return columns.filter((col) => {\n        const prevValue = prevRow[col];\n        const currValue = currRow[col];\n        if (!prevValue && !currValue) {\n          // Case a\n          return true;\n        } else if (!prevValue || !currValue) {\n          // Case b & c\n          return false;\n        } else if (prevValue.getValue() === currValue.getValue()) {\n          // Case d\n          return true;\n        } else {\n          // Case e\n          return false;\n        }\n      });\n    };\n\n    for (const [index] of runInfos.entries()) {\n      // Drop non-empty attribute columns\n      attributeColumnsToUncheck = attributeColumnsToUncheck.filter(\n        (col) => !(attributeColumnsToTags[col] in tagsList[index]),\n      );\n\n      if (index === 0) {\n        continue;\n      }\n\n      // The following operations need to be skipped in the first iteration.\n\n      paramColumnsToUncheck = dropDiffColumns(\n        paramColumnsToUncheck,\n        ExperimentViewUtil.toParamsMap(paramsList[index - 1]),\n        ExperimentViewUtil.toParamsMap(paramsList[index]),\n      );\n\n      metricColumnsToUncheck = dropDiffColumns(\n        metricColumnsToUncheck,\n        ExperimentViewUtil.toMetricsMap(metricsList[index - 1]),\n        ExperimentViewUtil.toMetricsMap(metricsList[index]),\n      );\n\n      tagColumnsToUncheck = dropDiffColumns(\n        tagColumnsToUncheck,\n        tagsList[index - 1],\n        tagsList[index],\n      );\n\n      // Short-circuit loop if there are no more columns to take a look at\n      if (\n        attributeColumnsToUncheck.length === 0 &&\n        paramColumnsToUncheck.length === 0 &&\n        metricColumnsToUncheck.length === 0 &&\n        tagColumnsToUncheck.length === 0\n      ) {\n        break;\n      }\n    }\n\n    return {\n      [COLUMN_TYPES.ATTRIBUTES]: _.concat(\n        categorizedUncheckedKeys[COLUMN_TYPES.ATTRIBUTES],\n        attributeColumnsToUncheck,\n      ),\n      [COLUMN_TYPES.PARAMS]: _.concat(\n        categorizedUncheckedKeys[COLUMN_TYPES.PARAMS],\n        paramColumnsToUncheck,\n      ),\n      [COLUMN_TYPES.METRICS]: _.concat(\n        categorizedUncheckedKeys[COLUMN_TYPES.METRICS],\n        metricColumnsToUncheck,\n      ),\n      [COLUMN_TYPES.TAGS]: _.concat(\n        categorizedUncheckedKeys[COLUMN_TYPES.TAGS],\n        tagColumnsToUncheck,\n      ),\n    };\n  }\n\n  /**\n   * Get the categorized unchecked keys that were in place before hitting the diff switch\n   * with state changes in between also reflected\n   * @param preSwitchCategorizedUncheckedKeys the keys that were unchecked before diff-view\n   *  switch was turned on\n   * @param postSwitchCategorizedUncheckedKeys the keys that were unchecked by turning the\n   *  diff-view switch on\n   * @param currCategorizedUncheckedKeys currently unchecked keys (possibly includes keys\n   * that were checked or unchecked while being in the diff view)\n   */\n  static getRestoredCategorizedUncheckedKeys({\n    preSwitchCategorizedUncheckedKeys,\n    postSwitchCategorizedUncheckedKeys,\n    currCategorizedUncheckedKeys,\n  }) {\n    const restoredUncheckedKeys = (column_type) => {\n      // keys that the user checked while being in diff view\n      const userCheckedKeys = _.difference(\n        postSwitchCategorizedUncheckedKeys[column_type],\n        currCategorizedUncheckedKeys[column_type],\n      );\n      // keys that the user unchecked while being in diff view\n      const userUncheckedKeys = _.difference(\n        currCategorizedUncheckedKeys[column_type],\n        postSwitchCategorizedUncheckedKeys[column_type],\n      );\n      return _.uniq(\n        _.without(\n          _.concat(preSwitchCategorizedUncheckedKeys[column_type], userUncheckedKeys),\n          ...userCheckedKeys,\n        ),\n      );\n    };\n    return {\n      [COLUMN_TYPES.ATTRIBUTES]: restoredUncheckedKeys(COLUMN_TYPES.ATTRIBUTES),\n      [COLUMN_TYPES.PARAMS]: restoredUncheckedKeys(COLUMN_TYPES.PARAMS),\n      [COLUMN_TYPES.METRICS]: restoredUncheckedKeys(COLUMN_TYPES.METRICS),\n      [COLUMN_TYPES.TAGS]: restoredUncheckedKeys(COLUMN_TYPES.TAGS),\n    };\n  }\n}\n\nexport class TreeNode {\n  constructor(value) {\n    this.value = value;\n    this.parent = undefined;\n  }\n  /**\n   * Returns the root node. If there is a cycle it will return undefined;\n   */\n  findRoot() {\n    const visited = new Set([this.value]);\n    let current = this;\n    while (current.parent !== undefined) {\n      if (visited.has(current.parent.value)) {\n        return undefined;\n      }\n      visited.add(current.value);\n      current = current.parent;\n    }\n    return current;\n  }\n  isRoot() {\n    return this.findRoot().value === this.value;\n  }\n  isCycle() {\n    return this.findRoot() === undefined;\n  }\n}\n","import { IntlShape } from 'react-intl';\nimport { saveAs } from 'file-saver';\nimport { ExperimentEntity } from '../../../types';\nimport ExperimentViewUtil from '../../ExperimentViewUtil';\nimport { ExperimentRunsSelectorResult } from './experimentRuns.selector';\n\nexport const EXPERIMENT_FIELD_PREFIX_PARAM = '$$$param$$$';\nexport const EXPERIMENT_FIELD_PREFIX_METRIC = '$$$metric$$$';\nexport const EXPERIMENT_FIELD_PREFIX_TAG = '$$$tag$$$';\nexport const EXPERIMENT_PARENT_ID_TAG = 'mlflow.parentRunId';\nexport const EXPERIMENT_LOG_MODEL_HISTORY_TAG = 'mlflow.log-model.history';\n\nconst MLFLOW_NOTEBOOK_TYPE = 'NOTEBOOK';\nconst MLFLOW_EXPERIMENT_TYPE = 'MLFLOW_EXPERIMENT';\n\nconst EXPERIMENT_TYPE_TAG = 'mlflow.experimentType';\n\n/**\n * Function that gets the experiment type for a given experiment object\n */\nexport const getExperimentType = (experiment: ExperimentEntity) => {\n  const experimentType = experiment.tags.find((tag) => tag.key === EXPERIMENT_TYPE_TAG);\n  if (experimentType) {\n    return experimentType.value;\n  }\n  return null;\n};\n\nconst hasExperimentType = (experiment: ExperimentEntity, type: string) =>\n  getExperimentType(experiment) === type;\n\n/**\n * Function returns true if the experiment is of default (\"MLFLOW_EXPERIMENT\") type\n */\nexport const isExperimentTypeDefault = (experiment: ExperimentEntity) =>\n  hasExperimentType(experiment, MLFLOW_EXPERIMENT_TYPE);\n\n/**\n * Function returns true if the experiment is of notebook type\n */\nexport const isExperimentTypeNotebook = (experiment: ExperimentEntity) =>\n  hasExperimentType(experiment, MLFLOW_NOTEBOOK_TYPE);\n\n/**\n * Function that checks if experiment's allowed actions include\n * modification. TODO: fix typo in the const name.\n */\nexport const canModifyExperiment = (experiment: ExperimentEntity) =>\n  experiment.allowed_actions.includes('MODIFIY_PERMISSION');\n\n/**\n * Function used for downloading run data in CSV form.\n */\nexport const downloadRunsCsv = (\n  runsData: ExperimentRunsSelectorResult,\n  filteredTagKeys: string[],\n  filteredParamKeys: string[],\n  filteredMetricKeys: string[],\n) => {\n  const { runInfos, paramsList, metricsList, tagsList } = runsData;\n\n  // TODO: refactor runInfosToCsv() logic out of ExperimentViewUtil\n  const csv = ExperimentViewUtil.runInfosToCsv(\n    runInfos,\n    filteredParamKeys,\n    filteredMetricKeys,\n    filteredTagKeys,\n    paramsList,\n    metricsList,\n    tagsList,\n  );\n  const blob = new Blob([csv], { type: 'application/csv;charset=utf-8' });\n  saveAs(blob, 'runs.csv');\n};\n\n/**\n * Function used for preparing values for \"created\" (start time) runs filter.\n */\nexport const getStartTimeColumnDisplayName = (intl: IntlShape) => ({\n  ALL: intl.formatMessage({\n    defaultMessage: 'All time',\n    description: 'Option for the start select dropdown to render all runs',\n  }),\n  LAST_HOUR: intl.formatMessage({\n    defaultMessage: 'Last hour',\n    description: 'Option for the start select dropdown to filter runs from the last hour',\n  }),\n  LAST_24_HOURS: intl.formatMessage({\n    defaultMessage: 'Last 24 hours',\n    description: 'Option for the start select dropdown to filter runs from the last 24 hours',\n  }),\n  LAST_7_DAYS: intl.formatMessage({\n    defaultMessage: 'Last 7 days',\n    description: 'Option for the start select dropdown to filter runs from the last 7 days',\n  }),\n  LAST_30_DAYS: intl.formatMessage({\n    defaultMessage: 'Last 30 days',\n    description: 'Option for the start select dropdown to filter runs from the last 30 days',\n  }),\n  LAST_YEAR: intl.formatMessage({\n    defaultMessage: 'Last year',\n    description: 'Option for the start select dropdown to filter runs since the last 1 year',\n  }),\n});\n","import React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport PropTypes from 'prop-types';\nimport { deleteRunApi, openErrorModal } from '../../actions';\nimport { connect } from 'react-redux';\nimport Utils from '../../../common/utils/Utils';\n\nexport class DeleteRunModalImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    selectedRunIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    openErrorModal: PropTypes.func.isRequired,\n    deleteRunApi: PropTypes.func.isRequired,\n  };\n\n  handleSubmit() {\n    const deletePromises = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      deletePromises.push(this.props.deleteRunApi(runId));\n    });\n    return Promise.all(deletePromises).catch(() => {\n      this.props.openErrorModal('While deleting an experiment run, an error occurred.');\n    });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Delete Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={\n          <div>\n            <p>\n              <b>\n                {number} experiment {Utils.pluralize('run', number)} will be deleted.\n              </b>\n            </p>\n            {process.env.SHOW_GDPR_PURGING_MESSAGES === 'true' ? (\n              <p>\n                Deleted runs are restorable for 30 days, after which they are purged along with\n                associated metrics, params, tags, and artifacts.\n              </p>\n            ) : (\n              ''\n            )}\n          </div>\n        }\n        confirmButtonText={'Delete'}\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  deleteRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(DeleteRunModalImpl);\n","import React, { Component } from 'react';\nimport { ConfirmModal } from './ConfirmModal';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { openErrorModal, restoreRunApi } from '../../actions';\nimport Utils from '../../../common/utils/Utils';\n\nexport class RestoreRunModalImpl extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    selectedRunIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    openErrorModal: PropTypes.func.isRequired,\n    restoreRunApi: PropTypes.func.isRequired,\n  };\n\n  handleSubmit() {\n    const restorePromises = [];\n    this.props.selectedRunIds.forEach((runId) => {\n      restorePromises.push(this.props.restoreRunApi(runId));\n    });\n    return Promise.all(restorePromises).catch((e) => {\n      const errorMessage = 'While restoring an experiment run, an error occurred.';\n      this.props.openErrorModal(errorMessage);\n    });\n  }\n\n  render() {\n    const number = this.props.selectedRunIds.length;\n    return (\n      <ConfirmModal\n        isOpen={this.props.isOpen}\n        onClose={this.props.onClose}\n        handleSubmit={this.handleSubmit}\n        title={`Restore Experiment ${Utils.pluralize('Run', number)}`}\n        helpText={`${number} experiment ${Utils.pluralize('run', number)} will be restored.`}\n        confirmButtonText={'Restore'}\n      />\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  restoreRunApi,\n  openErrorModal,\n};\n\nexport default connect(null, mapDispatchToProps)(RestoreRunModalImpl);\n","import qs from 'qs';\nimport { useMemo } from 'react';\nimport { useLocation, useRouteMatch } from 'react-router';\nimport Utils from '../../../../common/utils/Utils';\n\nexport type UseExperimentIdsResult = string[];\n\n/**\n * Hook that returns requested experiment IDs basing on the URL.\n * It extracts ids basing on either route match (in case of a single experiment)\n * or query params (in case of comparing experiments.).\n *\n * @returns array of strings with experiment IDs\n */\n\nexport const useExperimentIds = (): UseExperimentIdsResult => {\n  const match = useRouteMatch<{ experimentId?: string }>();\n  const location = useLocation();\n\n  const normalizedLocationSearch = useMemo(\n    () => decodeURIComponent(location.search),\n    [location.search],\n  );\n\n  /**\n   * Memoized string containing experiment IDs for comparison (\"?experiments=...\")\n   */\n  const compareExperimentIdsQueryParam = useMemo(() => {\n    const queryParams = qs.parse(normalizedLocationSearch.substring(1));\n    if (queryParams['experiments']) {\n      const experimentIdsRaw = queryParams['experiments'];\n      return experimentIdsRaw?.toString() || '';\n    }\n\n    return '';\n  }, [normalizedLocationSearch]);\n\n  return useMemo(() => {\n    // Case #1: single experiment\n    if (match.params?.experimentId) {\n      return [match.params?.experimentId];\n    }\n\n    // Case #2: multiple (compare) experiments\n    if (compareExperimentIdsQueryParam) {\n      try {\n        return JSON.parse(compareExperimentIdsQueryParam);\n      } catch {\n        // Apparently URL is malformed\n        Utils.logErrorAndNotifyUser(\n          `Could not parse experiment query parameter ${compareExperimentIdsQueryParam}`,\n        );\n        return '';\n      }\n    }\n\n    return [];\n  }, [compareExperimentIdsQueryParam, match.params?.experimentId]);\n};\n","import { chunk, isEqual } from 'lodash';\nimport { AnyAction } from 'redux';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER } from '../../../../model-registry/constants';\nimport { ATTRIBUTE_COLUMN_SORT_KEY } from '../../../constants';\nimport { ViewType } from '../../../sdk/MlflowEnums';\nimport { KeyValueEntity, LIFECYCLE_FILTER } from '../../../types';\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport { EXPERIMENT_LOG_MODEL_HISTORY_TAG } from './experimentPage.common-utils';\n\nconst START_TIME_COLUMN_OFFSET = {\n  ALL: null,\n  LAST_HOUR: 1 * 60 * 60 * 1000,\n  LAST_24_HOURS: 24 * 60 * 60 * 1000,\n  LAST_7_DAYS: 7 * 24 * 60 * 60 * 1000,\n  LAST_30_DAYS: 30 * 24 * 60 * 60 * 1000,\n  LAST_YEAR: 12 * 30 * 24 * 60 * 60 * 1000,\n};\n\n/**\n * This function checks if the sort+model state update has\n * been updated enough and if the change should invoke re-fetching\n * the runs from the back-end. This enables differentiation between\n * front-end and back-end filtering.\n */\nexport const shouldRefetchRuns = (\n  currentSearchFacetsState: SearchExperimentRunsFacetsState,\n  newSearchFacetsState: SearchExperimentRunsFacetsState,\n) =>\n  !isEqual(currentSearchFacetsState.searchFilter, newSearchFacetsState.searchFilter) ||\n  !isEqual(currentSearchFacetsState.orderByAsc, newSearchFacetsState.orderByAsc) ||\n  !isEqual(currentSearchFacetsState.orderByKey, newSearchFacetsState.orderByKey) ||\n  !isEqual(currentSearchFacetsState.lifecycleFilter, newSearchFacetsState.lifecycleFilter) ||\n  !isEqual(currentSearchFacetsState.startTime, newSearchFacetsState.startTime);\n\n/**\n * Creates \"order by\" SQL expression\n */\nconst createOrderByExpression = ({ orderByKey, orderByAsc }: SearchExperimentRunsFacetsState) => {\n  if (orderByKey) {\n    return orderByAsc ? [orderByKey + ' ASC'] : [orderByKey + ' DESC'];\n  }\n  return [];\n};\n\n/**\n * Creates SQL expression for filtering by run start time\n */\nconst createStartTimeExpression = (\n  { startTime }: SearchExperimentRunsFacetsState,\n  referenceTime: number,\n) => {\n  const offset = START_TIME_COLUMN_OFFSET[startTime as keyof typeof START_TIME_COLUMN_OFFSET];\n  if (!startTime || !offset || startTime === 'ALL') {\n    return null;\n  }\n  const startTimeOffset = referenceTime - offset;\n\n  return `attributes.start_time >= ${startTimeOffset}`;\n};\n\n/**\n * Combines search filter and start time SQL expressions\n */\nconst createFilterExpression = (\n  { searchFilter }: SearchExperimentRunsFacetsState,\n  startTimeExpression: string | null,\n) => {\n  if (searchFilter && startTimeExpression) {\n    return `${searchFilter} and ${startTimeExpression}`;\n  } else if (!searchFilter && startTimeExpression) {\n    return startTimeExpression;\n  } else {\n    return searchFilter || undefined;\n  }\n};\n\n/**\n * If this function returns true, the ExperimentView should nest children underneath their parents\n * and fetch all root level parents of visible runs. If this function returns false, the views will\n * not nest children or fetch any additional parents. Will always return true if the orderByKey is\n * 'attributes.start_time'\n */\nconst shouldNestChildrenAndFetchParents = ({\n  orderByKey,\n  searchFilter,\n}: SearchExperimentRunsFacetsState) =>\n  (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE;\n\n/**\n *\n * Function creates API-compatible query object basing on the given criteria.\n * @param experimentIds IDs of experiments to be queries for runs\n * @param searchFacetsState the sort/filter model to use\n * @param referenceTime reference time to calculate startTime filter\n * @param pageToken next page token if fetching the next page\n */\nexport const createSearchRunsParams = (\n  experimentIds: (number | string)[],\n  searchFacetsState: SearchExperimentRunsFacetsState,\n  referenceTime: number,\n  pageToken?: string,\n) => {\n  const runViewType =\n    searchFacetsState.lifecycleFilter === LIFECYCLE_FILTER.ACTIVE\n      ? ViewType.ACTIVE_ONLY\n      : ViewType.DELETED_ONLY;\n\n  const { runsPinned = undefined } = searchFacetsState;\n\n  const orderBy = createOrderByExpression(searchFacetsState);\n  const startTimeExpression = createStartTimeExpression(searchFacetsState, referenceTime);\n  const filter = createFilterExpression(searchFacetsState, startTimeExpression);\n  const shouldFetchParents = shouldNestChildrenAndFetchParents(searchFacetsState);\n\n  return {\n    // Experiment IDs\n    experimentIds,\n\n    // Filters and sort options\n    filter,\n    runViewType,\n    orderBy,\n    shouldFetchParents,\n\n    // Next page token for loading more runs\n    pageToken,\n    runsPinned,\n  };\n};\n\n/**\n * Function checks if given runs set contain info about log model history and if true,\n * fetches model versions for them\n *\n * @param runsPayload runs payload returned from the searchRuns API\n * @param actionCreator redux-thunk action creator that for search model versions action\n * @param dispatch redux-compatible dispatch function\n */\nexport const fetchModelVersionsForRuns = (\n  runsPayload: {\n    info: {\n      run_id: string;\n    };\n    data: {\n      tags: KeyValueEntity[];\n    };\n  }[],\n  actionCreator: typeof searchModelVersionsApi,\n  dispatch: (action: AnyAction) => Promise<AnyAction>,\n) => {\n  const runsWithLogModelHistory = runsPayload.filter((run) =>\n    run.data.tags.some((t) => t.key === EXPERIMENT_LOG_MODEL_HISTORY_TAG),\n  );\n\n  chunk(runsWithLogModelHistory, MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER).forEach((runsChunk) => {\n    const action = actionCreator({ run_id: runsChunk.map((run) => run.info.run_id) });\n    dispatch(action);\n  });\n};\n","import React from 'react';\n\nexport interface ColumnHeaderCellProps {\n  enableSorting: boolean;\n  displayName: string;\n  canonicalSortKey: string;\n  orderByAsc: boolean;\n  orderByKey: string;\n  onSortBy: (sortKey: string, newOrder: boolean) => void;\n  getClassName: (sortKey: string) => string;\n}\n\nexport class ColumnHeaderCell extends React.Component<ColumnHeaderCellProps> {\n  handleSortBy() {\n    const { canonicalSortKey, orderByAsc, orderByKey } = this.props;\n    let newOrderByAsc = !orderByAsc;\n\n    // If the new sortKey is not equal to the previous sortKey, reset the orderByAsc\n    if (canonicalSortKey !== orderByKey) {\n      newOrderByAsc = false;\n    }\n\n    this.props.onSortBy(canonicalSortKey, newOrderByAsc);\n  }\n\n  render() {\n    const {\n      enableSorting,\n      canonicalSortKey,\n      displayName,\n      getClassName = () => '',\n      orderByKey,\n      orderByAsc,\n    } = this.props;\n\n    return (\n      // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/interactive-supports-focus\n      <div\n        role='columnheader'\n        css={styles.headerLabelWrapper}\n        className={getClassName(canonicalSortKey)}\n        onClick={enableSorting ? () => this.handleSortBy() : undefined}\n      >\n        {enableSorting && canonicalSortKey === orderByKey ? (\n          <span style={styles.headerSortIcon}>\n            <i className={`fa fa-long-arrow-${orderByAsc ? 'up' : 'down'}`} />\n          </span>\n        ) : null}\n        <span data-test-id={`sort-header-${displayName}`}>{displayName}</span>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  headerLabelWrapper: {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    padding: '0 12px',\n  },\n  headerSortIcon: {\n    marginRight: 4,\n  },\n};\n","import { CheckCircleBorderIcon, ClockIcon, XCircleBorderIcon } from '@databricks/design-system';\nimport React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowDateAndNestInfo } from '../../../utils/experimentPage.row-types';\n\nconst ErrorIcon = () => (\n  <XCircleBorderIcon css={(theme) => ({ color: theme.colors.textValidationDanger })} />\n);\n\nconst FinishedIcon = () => (\n  <CheckCircleBorderIcon css={(theme) => ({ color: theme.colors.textValidationSuccess })} />\n);\n\nconst getRunStatusIcon = (status: string) => {\n  switch (status) {\n    case 'FAILED':\n    case 'KILLED':\n      return <ErrorIcon />;\n    case 'FINISHED':\n      return <FinishedIcon />;\n    case 'SCHEDULED':\n      return <ClockIcon />; // This one is the same color as the link\n    default:\n      return <i />;\n  }\n};\n\nexport interface DateCellRendererProps {\n  value: RunRowDateAndNestInfo;\n  onExpand: (runUuid: string, childrenIds?: string[]) => void;\n}\n\nconst INDENT_PER_LEVEL = 18; // Pixels\nconst BASIC_INDENT = 12; // Pixels\n\nexport const DateCellRenderer = React.memo(\n  ({\n    value: {\n      startTime,\n      referenceTime,\n      runUuid,\n      runStatus,\n      isParent,\n      hasExpander,\n      expanderOpen,\n      childrenIds,\n      level,\n    },\n    onExpand,\n  }: DateCellRendererProps) => {\n    const isRenderingAsParent = !isNaN(level) && hasExpander;\n    const isRenderingAsChild = !isRenderingAsParent && !isNaN(level);\n\n    return (\n      <div>\n        {isRenderingAsParent && (\n          // eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events\n          <div\n            onClick={() => {\n              onExpand(runUuid, childrenIds);\n            }}\n            key={'Expander-' + runUuid}\n            css={(theme) => ({ paddingRight: theme.spacing.sm, display: 'inline' })}\n          >\n            <span style={{ paddingLeft: INDENT_PER_LEVEL * level }} />\n            <i\n              className={`ExperimentView-expander far fa-${expanderOpen ? 'minus' : 'plus'}-square`}\n              css={{ width: BASIC_INDENT }}\n            />\n          </div>\n        )}\n        {isRenderingAsChild && (\n          <span\n            style={{\n              paddingLeft: INDENT_PER_LEVEL * level + BASIC_INDENT,\n            }}\n          />\n        )}\n        <span css={{ paddingLeft: isParent ? 0 : 8 }} title={Utils.formatTimestamp(startTime)}>\n          {getRunStatusIcon(runStatus)} {Utils.timeSinceStr(startTime, referenceTime)}\n        </span>\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Routes from '../../../../../routes';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport interface ExperimentNameCellRendererProps {\n  value: {\n    name: string;\n    basename: string;\n  };\n  data: RunRowType;\n}\n\nexport const ExperimentNameCellRenderer = React.memo(\n  ({ data, value }: ExperimentNameCellRendererProps) => (\n    <Link to={Routes.getExperimentPageRoute(data.experimentId)} title={value.name}>\n      {value.basename}\n    </Link>\n  ),\n);\n","var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLoggedModel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 12,\n    height: 14,\n    viewBox: \"0 0 12 14\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M7.7265 0.726585C7.47317 0.473252 7.13317 0.333252 6.77984 0.333252H1.99984C1.2665 0.333252 0.666504 0.933252 0.666504 1.66659V12.3333C0.666504 13.0666 1.25984 13.6666 1.99317 13.6666H9.99984C10.7332 13.6666 11.3332 13.0666 11.3332 12.3333V4.88658C11.3332 4.53325 11.1932 4.19325 10.9398 3.94659L7.7265 0.726585ZM6.66648 4.33333V1.33333L10.3331 5H7.33315C6.96648 5 6.66648 4.7 6.66648 4.33333ZM5.99982 6.33333C5.99982 6.64213 5.92984 6.93457 5.80487 7.19568L7.13747 8.52828C7.39858 8.40331 7.69103 8.33333 7.99982 8.33333C9.10439 8.33333 9.99982 9.22876 9.99982 10.3333C9.99982 11.4379 9.10439 12.3333 7.99982 12.3333C6.89525 12.3333 5.99982 11.4379 5.99982 10.3333C5.99982 10.0246 6.06977 9.7322 6.1947 9.47113L4.86202 8.13845C4.60095 8.26338 4.30855 8.33333 3.99982 8.33333C2.89525 8.33333 1.99982 7.4379 1.99982 6.33333C1.99982 5.22876 2.89525 4.33333 3.99982 4.33333C5.10439 4.33333 5.99982 5.22876 5.99982 6.33333ZM3.99982 7.00008C4.36801 7.00008 4.66648 6.7016 4.66648 6.33342C4.66648 5.96523 4.36801 5.66675 3.99982 5.66675C3.63163 5.66675 3.33315 5.96523 3.33315 6.33342C3.33315 6.7016 3.63163 7.00008 3.99982 7.00008ZM8.66648 10.3334C8.66648 10.7016 8.36801 11.0001 7.99982 11.0001C7.63163 11.0001 7.33315 10.7016 7.33315 10.3334C7.33315 9.96522 7.63163 9.66675 7.99982 9.66675C8.36801 9.66675 8.66648 9.96522 8.66648 10.3334Z\",\n    fill: \"#6B6B6B\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLoggedModel);\nexport default __webpack_public_path__ + \"static/media/logged-model.dd9b21ff4fb07f3cadeada8046a2693b.svg\";\nexport { ForwardRef as ReactComponent };","var _circle, _circle2, _circle3, _circle4, _line, _line2, _line3, _line4, _line5;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgRegisteredModel(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 14,\n    height: 14,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 9,\n    cy: 20,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _circle2 || (_circle2 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 4,\n    cy: 7,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _circle3 || (_circle3 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 20,\n    cy: 4,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _circle4 || (_circle4 = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 19,\n    cy: 15,\n    r: 2,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line || (_line = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 8.05132,\n    y1: 18.3162,\n    x2: 5.05132,\n    y2: 9.31623,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line2 || (_line2 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 5.77514,\n    y1: 7.02561,\n    x2: 18.7751,\n    y2: 4.02561,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line3 || (_line3 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 19.0101,\n    y1: 12.8586,\n    x2: 20.01,\n    y2: 5.85858,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line4 || (_line4 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 11.5528,\n    y1: 19.1056,\n    x2: 17.5528,\n    y2: 16.1056,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })), _line5 || (_line5 = /*#__PURE__*/React.createElement(\"line\", {\n    x1: 17.5528,\n    y1: 13.8944,\n    x2: 5.55279,\n    y2: 7.89443,\n    stroke: \"#2374bb\",\n    strokeWidth: 2\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgRegisteredModel);\nexport default __webpack_public_path__ + \"static/media/registered-model.24429a4f6158e57b01b3928e2605aa25.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\nimport { TrimmedText } from '../../../../../../common/components/TrimmedText';\nimport loggedModelSvg from '../../../../../../common/static/logged-model.svg';\nimport registeredModelSvg from '../../../../../../common/static/registered-model.svg';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { getModelVersionPageRoute } from '../../../../../../model-registry/routes';\nimport Routes from '../../../../../routes';\nimport { RunRowModelsInfo } from '../../../utils/experimentPage.row-types';\n\nconst EMPTY_CELL_PLACEHOLDER = '-';\n\nexport interface ModelsCellRendererProps {\n  value: RunRowModelsInfo;\n}\n\nexport const ModelsCellRenderer = React.memo((props: ModelsCellRendererProps) => {\n  const { registeredModels, loggedModels, experimentId, runUuid } = props.value;\n  const models = Utils.mergeLoggedAndRegisteredModels(loggedModels, registeredModels);\n\n  if (models && models.length) {\n    const modelToRender = models[0];\n    let modelDiv;\n    if (modelToRender.registeredModelName) {\n      const { registeredModelName, registeredModelVersion } = modelToRender;\n      modelDiv = (\n        <>\n          <img\n            data-test-id='registered-model-icon'\n            alt=''\n            title='Registered Model'\n            src={registeredModelSvg}\n          />\n          <a\n            href={Utils.getIframeCorrectedRoute(\n              getModelVersionPageRoute(registeredModelName, registeredModelVersion),\n            )}\n            className='registered-model-link'\n            target='_blank'\n            rel='noreferrer'\n          >\n            <TrimmedText text={registeredModelName} maxSize={10} className={'model-name'} />\n            {`/${registeredModelVersion}`}\n          </a>\n        </>\n      );\n    } else if (modelToRender.flavors) {\n      const loggedModelFlavorText = modelToRender.flavors ? modelToRender.flavors[0] : 'Model';\n      const loggedModelLink = Utils.getIframeCorrectedRoute(\n        `${Routes.getRunPageRoute(experimentId, runUuid)}/artifactPath/${\n          modelToRender.artifactPath\n        }`,\n      );\n      modelDiv = (\n        <>\n          <img data-test-id='logged-model-icon' alt='' title='Logged Model' src={loggedModelSvg} />\n          {/* Reported during ESLint upgrade */}\n          {/* eslint-disable-next-line react/jsx-no-target-blank */}\n          <a href={loggedModelLink} target='_blank' className='logged-model-link'>\n            {loggedModelFlavorText}\n          </a>\n        </>\n      );\n    }\n\n    return (\n      <div className='logged-model-cell' css={styles.imageWrapper}>\n        {modelDiv}\n        {loggedModels.length > 1 ? `, ${loggedModels.length - 1} more` : ''}\n      </div>\n    );\n  }\n  return <>{EMPTY_CELL_PLACEHOLDER}</>;\n});\n\nconst styles = {\n  imageWrapper: {\n    img: {\n      height: '15px',\n      position: 'relative' as const,\n      marginRight: '4px',\n    },\n  },\n};\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport const SourceCellRenderer = React.memo(({ value }: { value: RunRowType['tags'] }) => {\n  const sourceType = Utils.renderSource(value, undefined, undefined);\n  return sourceType ? (\n    <>\n      {Utils.renderSourceTypeIcon(value)}\n      {sourceType}\n    </>\n  ) : (\n    <>-</>\n  );\n});\n","import React from 'react';\nimport Utils from '../../../../../../common/utils/Utils';\nimport { RunRowVersionInfo } from '../../../utils/experimentPage.row-types';\n\nexport const VersionCellRenderer = React.memo(\n  ({\n    value: {\n      // Run row version object parameters\n      version,\n      name,\n      type,\n    },\n  }: {\n    value: RunRowVersionInfo;\n  }) =>\n    Utils.renderSourceVersion(\n      // Using function from utils to render the source link\n      version,\n      name,\n      type,\n    ) || <>-</>,\n);\n","import { PinBorderIcon, PinFillIcon, Tooltip } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { RunRowType } from '../../../utils/experimentPage.row-types';\n\nexport const PinRowCellRenderer = React.memo(\n  (props: { data: RunRowType; value: boolean; onTogglePin: any }) => {\n    if (!props.data.pinnable) {\n      return null;\n    }\n    return (\n      <Tooltip\n        placement='right'\n        title={\n          props.value ? (\n            <FormattedMessage\n              defaultMessage='Unpin run'\n              description='A tooltip for the pin icon button in the runs table next to the pinned run'\n            />\n          ) : (\n            <FormattedMessage\n              defaultMessage='Click to pin the run'\n              description='A tooltip for the pin icon button in the runs table next to the not pinned run'\n            />\n          )\n        }\n      >\n        <label css={styles.pinWrapper}>\n          <input\n            type='checkbox'\n            checked={props.value}\n            onChange={() => {\n              props.onTogglePin(props.data.runUuid);\n            }}\n          />\n          {props.value ? <PinFillIcon /> : <PinBorderIcon />}\n        </label>\n      </Tooltip>\n    );\n  },\n);\n\nconst styles = {\n  pinWrapper: (theme: Theme) => ({\n    input: { width: 0 },\n    cursor: 'pointer',\n    display: 'inline-block',\n    svg: {\n      width: 16,\n      height: 16,\n      cursor: 'pointer',\n      color: 'transparent',\n    },\n    // Two selectors below need to be separate - emotion doesn't\n    // allow nested \"&\" in selectors joined by a comma\n    '.ag-row-hover & svg': {\n      color: theme.colors.grey600,\n    },\n    'input:checked + span svg': {\n      color: theme.colors.grey600,\n    },\n  }),\n};\n","import { ICellRendererParams } from '@ag-grid-community/core';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Routes from '../../../../../routes';\n\nexport interface RunNameCellRendererProps extends ICellRendererParams {\n  value: string;\n}\n\nexport const RunNameCellRenderer = React.memo(\n  ({ value, data: { experimentId, runUuid } }: RunNameCellRendererProps) => (\n    <Link css={styles.link} to={Routes.getRunPageRoute(experimentId, runUuid)}>\n      {value}\n    </Link>\n  ),\n);\n\nconst styles = {\n  link: (theme: Theme) => ({\n    display: 'inline-block',\n    minWidth: theme.typography.fontSizeBase,\n    minHeight: theme.typography.fontSizeBase,\n  }),\n};\n","import { ColDef, ColumnApi } from '@ag-grid-community/core';\nimport { Spinner } from '@databricks/design-system';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { isEqual } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport {\n  ATTRIBUTE_COLUMN_LABELS,\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  COLUMN_TYPES,\n} from '../../../constants';\nimport { ColumnHeaderCell } from '../components/runs/cells/ColumnHeaderCell';\nimport { DateCellRenderer } from '../components/runs/cells/DateCellRenderer';\nimport { ExperimentNameCellRenderer } from '../components/runs/cells/ExperimentNameCellRenderer';\nimport { ModelsCellRenderer } from '../components/runs/cells/ModelsCellRenderer';\nimport { SourceCellRenderer } from '../components/runs/cells/SourceCellRenderer';\nimport { VersionCellRenderer } from '../components/runs/cells/VersionCellRenderer';\nimport type { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n} from './experimentPage.common-utils';\nimport { RunRowType } from './experimentPage.row-types';\nimport { PinRowCellRenderer } from '../components/runs/cells/PinRowCellRenderer';\nimport { RunNameCellRenderer } from '../components/runs/cells/RunNameCellRenderer';\n\n/**\n * Creates canonical sort key name for metrics and params in form\n * of \"keyType.`keyName`\", e.g. \"params.`paramName`\"\n */\nexport const makeCanonicalSortKey = (keyType: string, keyName: string) =>\n  keyType + '.`' + keyName + '`';\n\n/**\n * Creates canonical sort key name for metrics and params\n */\nexport const isCanonicalSortKeyOfType = (canonicalKey: string, keyType: string) =>\n  canonicalKey.startsWith(keyType);\n\n/**\n * Extracts param/metric/tag name from the canonical key\n */\nexport const extractCanonicalSortKey = (canonicalKey: string, keyType: string) =>\n  canonicalKey.substring(keyType.length + 2).slice(0, -1);\n\n/*\n * Functions used to generate grid field names for params, metrics and prefixes\n */\nconst createParamFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_PARAM}-${key}`;\nconst createMetricFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_METRIC}-${key}`;\nconst createTagFieldName = (key: string) => `${EXPERIMENT_FIELD_PREFIX_TAG}-${key}`;\n\n/**\n * Functions returns all framework components to be used by agGrid\n */\nexport const getFrameworkComponents = () => ({\n  agColumnHeader: ColumnHeaderCell,\n  loadingOverlayComponent: Spinner,\n\n  /**\n   * We're saving cell renderer component references, otherwise\n   * agGrid will unnecessarily flash cells' content (e.g. when changing sort order)\n   */\n  SourceCellRenderer,\n  ModelsCellRenderer,\n  VersionCellRenderer,\n  DateCellRenderer,\n  ExperimentNameCellRenderer,\n  PinRowCellRenderer,\n  RunNameCellRenderer,\n});\n\n/**\n * Certain columns are described as run attributes (opposed to metrics, params etc.), however\n * they actually source their data from the run tags. This objects maps tag names to column identifiers.\n */\nexport const TAGS_TO_COLUMNS_MAP = {\n  [ATTRIBUTE_COLUMN_SORT_KEY.USER]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'User'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Run Name'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.SOURCE]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Source'),\n  [ATTRIBUTE_COLUMN_SORT_KEY.VERSION]: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, 'Version'),\n};\n\n/**\n * Function returns unique row ID to be used in runs table\n */\nexport const getRowId = ({ data }: { data: RunRowType }) => data.runUuid;\n\n/**\n * Parameters used by `useRunsColumnDefinitions()` hook\n */\nexport interface UseRunsColumnDefinitionsParams {\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  onSortBy: (newOrderByKey: string, newOrderByAsc: boolean) => void;\n  onExpand: (parentUuid: string, childrenIds: string[]) => void;\n  onTogglePin: (runUuid: string) => void;\n  compareExperiments: boolean;\n  metricKeyList: string[];\n  paramKeyList: string[];\n  tagKeyList: string[];\n  columnApi?: ColumnApi;\n}\n\n/**\n * List of all attribute columns that can be shown/hidden by user\n * - when displaying a single experiment (ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT)\n * - when comparing experiments (ADJUSTABLE_ATTRIBUTE_COLUMNS)\n */\nexport const ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT = [\n  ATTRIBUTE_COLUMN_LABELS.USER,\n  ATTRIBUTE_COLUMN_LABELS.SOURCE,\n  ATTRIBUTE_COLUMN_LABELS.VERSION,\n  ATTRIBUTE_COLUMN_LABELS.MODELS,\n];\nexport const ADJUSTABLE_ATTRIBUTE_COLUMNS = [\n  ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n  ...ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT,\n];\n\n/**\n * This internal hook passes through the list of all metric/param/tag keys.\n * The lists are memoized internally so if somehow a particular param/metric/tag key is not present\n * in the new runs set (e.g. due to reverse sorting), the relevant column will be still displayed.\n * This prevents weirdly disappearing columns on exotic run sets.\n */\nconst useCumulativeColumnKeys = ({\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n}: Pick<UseRunsColumnDefinitionsParams, 'tagKeyList' | 'metricKeyList' | 'paramKeyList'>) => {\n  const cachedMetricKeys = useRef<Set<string>>(new Set());\n  const cachedParamKeys = useRef<Set<string>>(new Set());\n  const cachedTagKeys = useRef<Set<string>>(new Set());\n\n  const paramKeys = useMemo(() => {\n    paramKeyList.forEach((key) => cachedParamKeys.current.add(key));\n    return Array.from(cachedParamKeys.current);\n  }, [paramKeyList]);\n\n  const metricKeys = useMemo(() => {\n    metricKeyList.forEach((key) => cachedMetricKeys.current.add(key));\n    return Array.from(cachedMetricKeys.current);\n  }, [metricKeyList]);\n\n  const tagKeys = useMemo(() => {\n    tagKeyList.forEach((key) => cachedTagKeys.current.add(key));\n    return Array.from(cachedTagKeys.current);\n  }, [tagKeyList]);\n\n  const cumulativeColumns = useMemo(\n    () => ({\n      paramKeys,\n      metricKeys,\n      tagKeys,\n    }),\n    [metricKeys, paramKeys, tagKeys],\n  );\n\n  return cumulativeColumns;\n};\n\n/**\n * This hook creates a agGrid-compatible column set definition basing on currently\n * used sort-filter model and provided list of metrics, params and tags.\n *\n * Internally, it reacts to changes to `selectedColumns` and hides/shows relevant columns\n * if necessary.\n *\n * @param params see UseRunsColumnDefinitionsParams\n */\nexport const useRunsColumnDefinitions = ({\n  searchFacetsState,\n  onSortBy,\n  compareExperiments,\n  onTogglePin,\n  onExpand,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  columnApi,\n}: UseRunsColumnDefinitionsParams) => {\n  const { orderByAsc, orderByKey, selectedColumns } = searchFacetsState;\n\n  const cumulativeColumns = useCumulativeColumnKeys({\n    metricKeyList,\n    tagKeyList,\n    paramKeyList,\n  });\n\n  const columnSet = useMemo(() => {\n    const commonSortOrderProps = { orderByKey, orderByAsc, onSortBy };\n\n    const getOrderedByClassName = (key: string) =>\n      key === orderByKey ? 'is-ordered-by' : undefined;\n\n    const getHeaderClassName = (key: string) => getOrderedByClassName(key);\n    const getCellClassName = ({ colDef }: { colDef: ColDef }) =>\n      getOrderedByClassName(colDef.headerComponentParams.canonicalSortKey);\n\n    const columns: ColDefWithChildren[] = [];\n\n    // Checkbox selection column\n    columns.push({\n      field: 'pinned',\n      checkboxSelection: true,\n      headerName: '',\n      headerCheckboxSelection: true,\n      cellRenderer: 'PinRowCellRenderer',\n      cellRendererParams: { onTogglePin },\n      pinned: 'left',\n      minWidth: 70,\n      width: 70,\n      maxWidth: 70,\n      resizable: false,\n    });\n\n    // Date and expander selection column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DATE,\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      pinned: 'left',\n      field: 'runDateAndNestInfo',\n      initialWidth: 150,\n      cellRenderer: 'DateCellRenderer',\n      cellRendererParams: { onExpand },\n      equals: (dateInfo1, dateInfo2) => isEqual(dateInfo1, dateInfo2),\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n    });\n\n    // Run name column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.RUN_NAME,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n      pinned: 'left',\n      field: 'runName',\n      sortable: true,\n      cellRenderer: 'RunNameCellRenderer',\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.RUN_NAME,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialWidth: 260,\n    });\n\n    // Duration column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.DURATION,\n      field: 'duration',\n      initialWidth: 80,\n      cellClass: getCellClassName,\n    });\n\n    // Experiment name column\n    if (compareExperiments) {\n      columns.push({\n        headerName: ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        colId: makeCanonicalSortKey(\n          COLUMN_TYPES.ATTRIBUTES,\n          ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME,\n        ),\n        field: 'experimentName',\n        cellRenderer: 'ExperimentNameCellRenderer',\n        equals: (experimentName1, experimentName2) => isEqual(experimentName1, experimentName2),\n        initialWidth: 140,\n        cellClass: getCellClassName,\n        initialHide: true,\n      });\n    }\n\n    // User column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.USER,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.USER],\n      headerTooltip: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n      field: 'user',\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.USER,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialHide: true,\n    });\n\n    // Source column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.SOURCE,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.SOURCE],\n      field: 'tags',\n      cellRenderer: 'SourceCellRenderer',\n      equals: (tags1, tags2) => Utils.getSourceName(tags1) === Utils.getSourceName(tags2),\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.SOURCE,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialHide: true,\n    });\n\n    // Version column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.VERSION,\n      colId: TAGS_TO_COLUMNS_MAP[ATTRIBUTE_COLUMN_SORT_KEY.VERSION],\n      field: 'version',\n      cellRenderer: 'VersionCellRenderer',\n      equals: (version1, version2) => isEqual(version1, version2),\n      sortable: true,\n      headerComponentParams: {\n        ...commonSortOrderProps,\n        canonicalSortKey: ATTRIBUTE_COLUMN_SORT_KEY.VERSION,\n        getClassName: getHeaderClassName,\n      },\n      cellClass: getCellClassName,\n      initialHide: true,\n    });\n\n    // Models column\n    columns.push({\n      headerName: ATTRIBUTE_COLUMN_LABELS.MODELS,\n      colId: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n      field: 'models',\n      cellRenderer: 'ModelsCellRenderer',\n      initialWidth: 200,\n      equals: (models1, models2) => isEqual(models1, models2),\n      initialHide: true,\n    });\n\n    const { metricKeys, paramKeys, tagKeys } = cumulativeColumns;\n\n    // Metrics columns\n    if (metricKeys.length) {\n      columns.push({\n        headerName: 'Metrics',\n        colId: COLUMN_TYPES.METRICS,\n        children: metricKeys.map((metricKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey);\n          return {\n            headerName: metricKey,\n            colId: canonicalSortKey,\n            headerTooltip: canonicalSortKey,\n            field: createMetricFieldName(metricKey),\n            initialWidth: 100,\n            initialHide: true,\n            sortable: true,\n            headerComponentParams: {\n              ...commonSortOrderProps,\n              canonicalSortKey,\n              getClassName: getHeaderClassName,\n            },\n            cellClass: getCellClassName,\n          };\n        }),\n      });\n    }\n\n    // Parameter columns\n    if (paramKeys.length) {\n      columns.push({\n        headerName: 'Parameters',\n        colId: COLUMN_TYPES.PARAMS,\n        children: paramKeys.map((paramKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: paramKey,\n            headerTooltip: canonicalSortKey,\n            field: createParamFieldName(paramKey),\n            initialHide: true,\n            initialWidth: 100,\n            sortable: true,\n            headerComponentParams: {\n              ...commonSortOrderProps,\n              canonicalSortKey,\n              getClassName: getHeaderClassName,\n            },\n            cellClass: getCellClassName,\n          };\n        }),\n      });\n    }\n\n    // Tags columns\n    if (tagKeys.length) {\n      columns.push({\n        headerName: 'Tags',\n        colId: COLUMN_TYPES.TAGS,\n        children: tagKeys.map((tagKey) => {\n          const canonicalSortKey = makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey);\n          return {\n            colId: canonicalSortKey,\n            headerName: tagKey,\n            initialHide: true,\n            initialWidth: 100,\n            headerTooltip: canonicalSortKey,\n            field: createTagFieldName(tagKey),\n          };\n        }),\n      });\n    }\n\n    return columns;\n  }, [\n    orderByKey,\n    orderByAsc,\n    onSortBy,\n    onTogglePin,\n    onExpand,\n    compareExperiments,\n    cumulativeColumns,\n  ]);\n\n  const canonicalSortKeys = useMemo(\n    () => [\n      ...ADJUSTABLE_ATTRIBUTE_COLUMNS.map((key) =>\n        makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key),\n      ),\n      ...cumulativeColumns.paramKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key)),\n      ...cumulativeColumns.metricKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.METRICS, key)),\n      ...cumulativeColumns.tagKeys.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n    ],\n    [cumulativeColumns],\n  );\n\n  useEffect(() => {\n    if (!columnApi) {\n      return;\n    }\n    for (const canonicalKey of canonicalSortKeys) {\n      const visible = selectedColumns.includes(canonicalKey);\n      columnApi.setColumnVisible(canonicalKey, visible);\n    }\n  }, [selectedColumns, columnApi, canonicalSortKeys]);\n\n  return columnSet;\n};\n\ntype ColDefWithChildren = ColDef & {\n  children?: ColDef[];\n};\n\nexport const EXPERIMENTS_DEFAULT_COLUMN_SETUP = {\n  initialWidth: 100,\n  autoSizePadding: 0,\n  headerComponentParams: { menuIcon: 'fa-bars' },\n  resizable: true,\n  filter: true,\n  suppressMenu: true,\n  suppressMovable: true,\n};\n","import {\n  ATTRIBUTE_COLUMN_LABELS,\n  COLUMN_TYPES,\n  DEFAULT_LIFECYCLE_FILTER,\n  DEFAULT_MODEL_VERSION_FILTER,\n  DEFAULT_ORDER_BY_ASC,\n  DEFAULT_ORDER_BY_KEY,\n  DEFAULT_START_TIME,\n} from '../../../constants';\nimport { makeCanonicalSortKey } from '../utils/experimentPage.column-utils';\n\nconst DEFAULT_SELECTED_COLUMNS = [\n  // \"Source\" and \"Model\" columns are visible by default\n  makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.SOURCE),\n  makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, ATTRIBUTE_COLUMN_LABELS.MODELS),\n];\n\n/**\n * Defines persistable model respresenting sort and filter values\n * used by runs table and controls\n */\nexport class SearchExperimentRunsFacetsState {\n  /**\n   * SQL-like query string used to filter runs, e.g. \"params.alpha = '0.5'\"\n   */\n  searchFilter = '';\n\n  /**\n   * Canonical order_by key like \"params.`alpha`\". May be null to indicate the table\n   * should use the natural row ordering provided by the server.\n   */\n  orderByKey = DEFAULT_ORDER_BY_KEY;\n\n  /**\n   * Whether the order imposed by orderByKey should be ascending or descending.\n   */\n  orderByAsc = DEFAULT_ORDER_BY_ASC;\n\n  /**\n   * Filter key to show results based on start time\n   */\n  startTime = DEFAULT_START_TIME;\n\n  /**\n   * Lifecycle filter of runs to display\n   */\n  lifecycleFilter = DEFAULT_LIFECYCLE_FILTER;\n\n  /**\n   * Filter of model versions to display\n   */\n  modelVersionFilter = DEFAULT_MODEL_VERSION_FILTER;\n\n  /**\n   * Currently selected columns\n   */\n  selectedColumns: string[] = [...DEFAULT_SELECTED_COLUMNS];\n\n  /**\n   * Object mapping run UUIDs (strings) to booleans, where a boolean value of true indicates that\n   * a run has been expanded (its child runs are visible).\n   */\n  runsExpanded: Record<string, boolean> = {};\n\n  /**\n   * List of pinned row UUIDs\n   */\n  runsPinned: string[] = [];\n}\n","import { isArray, isEqual, isObject } from 'lodash';\nimport QueryString, { IParseOptions } from 'qs';\nimport LocalStorageUtils from '../../../../common/utils/LocalStorageUtils';\nimport Utils from '../../../../common/utils/Utils';\n\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\n\nconst KNOWN_STATE_KEYS = Object.keys(new SearchExperimentRunsFacetsState());\n\n/**\n * Function used by QueryString.parse(), implements better handling of booleans and undefined values\n */\nconst urlParserDecoder: IParseOptions['decoder'] = (str, defaultDecoder, _, type) => {\n  if (type === 'value') {\n    if (str === 'true') {\n      return true;\n    } else if (str === 'false') {\n      return false;\n    } else if (str === undefined) {\n      return '';\n    }\n  }\n  return defaultDecoder(str);\n};\n\n/**\n * Function used for merging two facets search states.\n */\nconst mergeFacetsStates = (\n  base: SearchExperimentRunsFacetsState,\n  object: Partial<SearchExperimentRunsFacetsState>,\n): SearchExperimentRunsFacetsState =>\n  Object.assign(new SearchExperimentRunsFacetsState(), {\n    ...base,\n    ...object,\n  });\n\n/**\n * Performs basic checks on partial facets state model. Returns false if\n * fields expected to be objects or arrays are not what they are supposed to be.\n */\nfunction validateFacetsState(model: Partial<SearchExperimentRunsFacetsState>) {\n  if (model.runsExpanded && !isObject(model.runsExpanded)) {\n    return false;\n  }\n\n  if (model.selectedColumns && !isArray(model.selectedColumns)) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Persists current facets state in local storage.\n */\nfunction persistLocalStorage(data: Partial<SearchExperimentRunsFacetsState>, idKey: string) {\n  // TODO: decide if we want to use LocalStorageUtils store or fall back to direct use of localStorage\n  const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n  localStorageInstance.saveComponentState(data);\n}\n\n/**\n * Creates the URL query string representing the current search facets state.\n */\nfunction createPersistedQueryString(\n  sortFilterModelToSave: Partial<SearchExperimentRunsFacetsState> & { experiments?: any },\n) {\n  return QueryString.stringify(sortFilterModelToSave, {\n    addQueryPrefix: true,\n    arrayFormat: 'comma',\n    encodeValuesOnly: true,\n  });\n}\n\n/**\n * Consumes object containing all fields parsed from search query and\n * separates those relevant to the search state from the rest.\n */\nfunction extractExperimentSearchFacetsState<\n  // Template for partial state type\n  PartialState extends Partial<SearchExperimentRunsFacetsState>,\n  // Template for partial state + the rest type\n  URLObject extends PartialState,\n>(rawURLSearchData: URLObject) {\n  const stateData: PartialState = {} as PartialState;\n  const restData: Omit<URLObject, keyof PartialState> = {} as Omit<URLObject, keyof PartialState>;\n\n  for (const field in rawURLSearchData) {\n    if (rawURLSearchData.hasOwnProperty(field)) {\n      const isKnownField = KNOWN_STATE_KEYS.includes(field);\n      Object.assign(isKnownField ? stateData : restData, { [field]: rawURLSearchData[field] });\n    }\n  }\n  return { stateData, restData };\n}\n\n/**\n * Persists current facets state in local storage and returns query string to be persisted in the URL.\n */\nexport function persistExperimentSearchFacetsState(\n  sortFilterModelToSave: SearchExperimentRunsFacetsState,\n  idKey: string,\n  currentLocationSearch = '',\n) {\n  const currentParameters = QueryString.parse(currentLocationSearch, {\n    ignoreQueryPrefix: true,\n    comma: true,\n    arrayLimit: 500,\n    decoder: urlParserDecoder,\n  });\n  // Extract current query params and re-persist relevant ones.\n  // In this case, it's only \"experiments\" field used for comparison.\n  const { experiments } = currentParameters;\n  persistLocalStorage(sortFilterModelToSave, idKey);\n  return createPersistedQueryString({ experiments, ...sortFilterModelToSave });\n}\n\n/**\n * Restores facets state from local storage and URL query string.\n *\n * @param location extracted e.g. from useLocation\n * @param idKey unique key for the storage\n * @param persistCombinedToLocalStorage if true, the combined state will be re-persisted to local storage\n */\nexport function restoreExperimentSearchFacetsState(locationSearch: string, idKey: string) {\n  // Step 1: prepare base value\n  let baseState = new SearchExperimentRunsFacetsState();\n\n  // Step 2: extract current state from local storage\n  try {\n    // TODO: decide if we want to use LocalStorageUtils store or fall back to direct use of localStorage\n    const localStorageInstance = LocalStorageUtils.getStoreForComponent('ExperimentPage', idKey);\n    const localStorageValue = localStorageInstance.loadComponentState();\n    if (validateFacetsState(localStorageValue)) {\n      // Merge it with the base state only if it's valid\n      baseState = mergeFacetsStates(baseState, localStorageValue);\n    }\n  } catch {\n    Utils.logErrorAndNotifyUser(\n      `Error: malformed persisted search state for experiment(s) ${idKey}`,\n    );\n  }\n\n  // Preliminarily decode the search query, despite QueryString.parse doing the same.\n  // In certain scenarios the search values can arrive double-encoded\n  // (e.g. after being redirected from the login page) so by doing this, we ensure\n  // that the values will be properly decoded at the end.\n  const normalizedLocationSearch = decodeURIComponent(locationSearch);\n\n  // Step 3: extract data from URL...\n  const rawUrlData = QueryString.parse(normalizedLocationSearch, {\n    ignoreQueryPrefix: true,\n    comma: true,\n    arrayLimit: 500,\n    decoder: urlParserDecoder,\n  });\n  const { restData, stateData } = extractExperimentSearchFacetsState(rawUrlData);\n\n  // If the is at least one relevant query params in URL, take URL into consideration.\n  const isURLStateEmpty = Object.keys(stateData).length < 1;\n  if (!isURLStateEmpty) {\n    // We need merge specified fields from the URL query to the empty state.\n    // In certain scenarios, parts of the state (e.g. empty arrays) are not being persisted in the URL\n    // and we need to regenerate them.\n    const urlState = Object.assign(new SearchExperimentRunsFacetsState(), stateData);\n    baseState = mergeFacetsStates(baseState, urlState);\n  }\n\n  // Step 4: persist combined state again\n  persistLocalStorage(baseState, idKey);\n\n  return {\n    state: baseState,\n    isPristine: isEqual(new SearchExperimentRunsFacetsState(), baseState),\n    queryString: createPersistedQueryString({ ...restData, ...baseState }),\n  };\n}\n","import { isFunction } from 'lodash';\nimport React, { createContext, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport RequestStateWrapper from '../../../../common/components/RequestStateWrapper';\nimport { loadMoreRunsApi, searchRunsApi, searchRunsPayload } from '../../../actions';\nimport { useExperimentIds } from '../hooks/useExperimentIds';\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport Utils from '../../../../common/utils/Utils';\nimport { searchModelVersionsApi } from '../../../../model-registry/actions';\nimport { UpdateExperimentSearchFacetsFn } from '../../../types';\nimport { useAsyncDispatch } from '../hooks/useAsyncDispatch';\nimport {\n  createSearchRunsParams,\n  fetchModelVersionsForRuns,\n  shouldRefetchRuns,\n} from '../utils/experimentPage.fetch-utils';\nimport {\n  persistExperimentSearchFacetsState,\n  restoreExperimentSearchFacetsState,\n} from '../utils/persistSearchFacets';\n\nexport interface GetExperimentRunsContextActions {\n  searchRunsApi: typeof searchRunsApi;\n  loadMoreRunsApi: typeof loadMoreRunsApi;\n  searchRunsPayload: typeof searchRunsPayload;\n  searchModelVersionsApi: typeof searchModelVersionsApi;\n}\n\nexport interface GetExperimentRunsContextType {\n  /**\n   * Represents the currently used filter/sort model\n   */\n  searchFacetsState: SearchExperimentRunsFacetsState;\n\n  /**\n   * Indicates if runs are being loaded at the moment\n   */\n  isLoadingRuns: boolean;\n\n  /**\n   * Function used to (re)fetch runs with the currently used filter set.\n   * Use scenarios: initial fetch, refreshing the list.\n   */\n  fetchExperimentRuns: () => void;\n\n  /**\n   * Function used to update the filter set and fetch new set of runs.\n   * First parameter is the subset of fields that the current sort/filter model will be merged with.\n   * If the second parameter is set to true, it will force re-fetching even if there\n   * are no sufficient changes to the model.\n   */\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n\n  /**\n   * Function used to load more runs (if available) using currently used filters\n   */\n  loadMoreRuns: () => void;\n\n  /**\n   * Contains error descriptor if fetching runs failed\n   */\n  requestError: any;\n\n  /**\n   * All run-related actions creators\n   */\n  actions: GetExperimentRunsContextActions;\n\n  /**\n   * True if there are more paginated runs available\n   */\n  moreRunsAvailable: boolean;\n\n  /**\n   * Returns true if user has not changed sort/filter model and is using the default one\n   */\n  isPristine: () => boolean;\n}\n\n/**\n * Wrapper context that serves two purposes:\n * - aggregates concrete redux actions necessary to perform experiments run search\n * - holds currently used state with sort and filter options, also is responsible for persisting it\n */\nexport const GetExperimentRunsContext = createContext<GetExperimentRunsContextType | null>(null);\n\n/**\n * Provider component for SearchExperimentRunsContext.\n * Accepts concrete redux actions for searching runs.\n */\nexport const GetExperimentRunsContextProvider = ({\n  children,\n  actions,\n}: React.PropsWithChildren<{\n  actions: GetExperimentRunsContextActions;\n}>) => {\n  const history = useHistory();\n  const experimentIds = useExperimentIds();\n  const dispatch = useAsyncDispatch();\n\n  const [searchRunsRequestId, setSearchRunsRequestId] = useState<string>('');\n  const [isLoadingRuns, setIsLoadingRuns] = useState(false);\n  const [moreRunsAvailable, setMoreRunsAvailable] = useState(false);\n  const [requestError, setRequestError] = useState<any>(null);\n\n  const experimentIdsHash = useMemo(() => JSON.stringify(experimentIds.sort()), [experimentIds]);\n\n  const [searchFacetsState, setSearchFacetsState] = useState<SearchExperimentRunsFacetsState>(\n    () => {\n      // useState() initialization function that restores current search facets state\n      const { queryString, state } = restoreExperimentSearchFacetsState(\n        history.location.search,\n        experimentIdsHash,\n      );\n\n      // If resulting query string differs from the current one, replace it.\n      if (history.location.search !== queryString) {\n        history.replace(`${history.location.pathname}${queryString}`);\n      }\n      return state;\n    },\n  );\n\n  // Next page token is not a stateful field and can be mutable.\n  const nextPageToken = useRef<string>('');\n\n  // Indicates reference time for fetching subsuquent pages which\n  // requires us to keep the same startTime parameter value.\n  // Not a stateful field.\n  const referenceTime = useRef<string>('');\n\n  // Indicates if user has explicitly changed the sort/filter state\n  const isPristineFlag = useRef(true);\n  // Immutable method that returns value from the mutable flag\n  const isPristine = useCallback(() => isPristineFlag.current, []);\n\n  const internalFetchExperimentRuns = useCallback(\n    (\n      requestSearchFacetsState: SearchExperimentRunsFacetsState,\n      requestExperimentIds: string[],\n      requestReferenceTime = Date.now(),\n      requestNextPageToken?: string,\n    ) => {\n      const loadMore = Boolean(requestNextPageToken);\n      if (!loadMore) {\n        referenceTime.current = requestReferenceTime;\n      }\n\n      const actionToUse = loadMore ? actions.loadMoreRunsApi : actions.searchRunsApi;\n\n      const action = actionToUse(\n        createSearchRunsParams(\n          requestExperimentIds,\n          requestSearchFacetsState,\n          requestReferenceTime,\n          requestNextPageToken || undefined,\n        ),\n      );\n\n      // Immediately set loading runs flag, don't wait for RequestStateWrapper\n      // otherwise it will result in the unnecessary rerender\n      setIsLoadingRuns(true);\n      dispatch(action)\n        .then(({ value }) => {\n          nextPageToken.current = value.next_page_token;\n          setMoreRunsAvailable(Boolean(value.next_page_token));\n          fetchModelVersionsForRuns(value.runs || [], actions.searchModelVersionsApi, dispatch);\n        })\n        .catch((e) => {\n          Utils.logErrorAndNotifyUser(e);\n        });\n\n      setSearchRunsRequestId(action.meta.id);\n    },\n    [dispatch, actions],\n  );\n\n  const loadMoreRuns = useCallback(() => {\n    internalFetchExperimentRuns(\n      searchFacetsState,\n      experimentIds,\n      referenceTime.current || undefined,\n      nextPageToken.current || undefined,\n    );\n  }, [internalFetchExperimentRuns, searchFacetsState, experimentIds]);\n\n  /**\n   * Fetches fresh batch of runs using current sort model\n   */\n  const fetchExperimentRuns = useCallback(() => {\n    internalFetchExperimentRuns(searchFacetsState, experimentIds);\n  }, [experimentIds, internalFetchExperimentRuns, searchFacetsState]);\n\n  const persistState = useCallback(\n    (sortFilterModelToSave: SearchExperimentRunsFacetsState) => {\n      const newQueryString = persistExperimentSearchFacetsState(\n        sortFilterModelToSave,\n        experimentIdsHash,\n        history.location.search,\n      );\n      if (history.location.search !== newQueryString) {\n        history.push(`${history.location.pathname}${newQueryString}`);\n      }\n    },\n    [history, experimentIdsHash],\n  );\n\n  /**\n   * Updates current search facets model and invokes re-fetching runs if necessary.\n   * Persists new search state in storage and URL.\n   *\n   * @param newFilterModel A search facets model to replace the current one. It can\n   *                       be provided in the form of the partial object that will be merged\n   *                       with the current one or the setter function having the current model\n   *                       provided as a parameter and returning the merged model, similarly to the\n   *                       React's `setState()` pattern.\n   * @param updateOptions  Additional update options provided:\n   *                       - `forceRefresh` - if set to `true`, will force re-fetching runs\n   *                         regardless of the resulting search facets model.\n   *                       - `preservePristine` - if set to `true`, will not change internal \"pristine\"\n   *                         flag used to detect if user have tampered with the search model.\n   *\n   * @examples\n   * ```\n   * // Simple use, updates search filter\n   * updateSearchFacets({\n   *   searchFilter: 'attributes.start_time > 1000',\n   * });\n   *\n   * // Setter function variant, updates selected columns\n   * updateSearchFacets((currentModel) => ({\n   *   ...currentModel,\n   *   selectedColumns: [...currentModel.selectedColumns, 'someColumn'],\n   * }));\n   *\n   * // Using function to force re-fetch while retaining pristine flag\n   * const forceRefreshModel = updateSearchFacets({}, {\n   *   forceRefresh: true,\n   *   preservePristine: true,\n   * });\n   * ```\n   */\n  const updateSearchFacets = useCallback<UpdateExperimentSearchFacetsFn>(\n    (newFilterModel, updateOptions = {}) => {\n      const { forceRefresh = false, preservePristine = false } = updateOptions;\n      // While dispatching new state, append new filter model\n      // and fetch new runs using it\n      setSearchFacetsState((oldModel) => {\n        const newModel = isFunction(newFilterModel)\n          ? newFilterModel(oldModel)\n          : { ...oldModel, ...newFilterModel };\n        if (forceRefresh || shouldRefetchRuns(oldModel, newModel)) {\n          internalFetchExperimentRuns(newModel, experimentIds);\n        }\n        persistState(newModel);\n        return newModel;\n      });\n      // Update the flag which indicates that the user have performed\n      // a search with changed sort/filter model\n      if (!preservePristine) {\n        isPristineFlag.current = false;\n      }\n    },\n    [experimentIds, internalFetchExperimentRuns, persistState],\n  );\n\n  /**\n   * Dynamically restore searchFacets state on history navigation.\n   * Note: MLFlow running in iFrame won't get proper history pop updates\n   * from overrarching router, meaning that history.listen() won't work at all. In this case,\n   * the page will get reloaded and useState()'s initialization function will restore the state instead.\n   */\n  useEffect(() => {\n    return history.listen((location, action) => {\n      if (action === 'POP') {\n        const { state } = restoreExperimentSearchFacetsState(location.search, experimentIdsHash);\n        updateSearchFacets(state);\n      }\n    });\n  }, [history, experimentIdsHash, updateSearchFacets]);\n\n  const contextValue = useMemo(\n    () => ({\n      actions,\n      searchFacetsState,\n      fetchExperimentRuns,\n      updateSearchFacets,\n      loadMoreRuns,\n      requestError,\n      isLoadingRuns,\n      moreRunsAvailable,\n      isPristine,\n    }),\n    [\n      actions,\n      searchFacetsState,\n      fetchExperimentRuns,\n      loadMoreRuns,\n      requestError,\n      isLoadingRuns,\n      updateSearchFacets,\n      moreRunsAvailable,\n      isPristine,\n    ],\n  );\n\n  const renderFn = (_isLoading: false, _renderError: any, requests: any[]) => {\n    /**\n     * TODO:\n     * Defer setting this state because currently it might happen inside\n     * RequestStateWrapper's render function which causes React to act up.\n     * Either rebuild RequestStateWrapper or introduce some workaround.\n     */\n    setIsLoadingRuns(requests.some((r) => r.id === searchRunsRequestId && r.active));\n\n    requests.forEach((request) => {\n      if (request.error) {\n        setRequestError(request.error);\n      }\n    });\n    return children;\n  };\n\n  return (\n    <GetExperimentRunsContext.Provider value={contextValue}>\n      <RequestStateWrapper\n        shouldOptimisticallyRender\n        // eslint-disable-next-line no-trailing-spaces\n        requestIds={searchRunsRequestId ? [searchRunsRequestId] : []}\n      >\n        {renderFn}\n      </RequestStateWrapper>\n    </GetExperimentRunsContext.Provider>\n  );\n};\n","import { useContext } from 'react';\n\nimport { GetExperimentRunsContext } from '../contexts/GetExperimentRunsContext';\n\nexport const useFetchExperimentRuns = () => {\n  const getExperimentRunsContextValue = useContext(GetExperimentRunsContext);\n\n  if (!getExperimentRunsContextValue) {\n    throw new Error('Trying to use SearchExperimentRunsContext actions outside of the context!');\n  }\n\n  return getExperimentRunsContextValue;\n};\n","import { useCallback } from 'react';\nimport DeleteRunModal from '../../../modals/DeleteRunModal';\nimport { RenameRunModal } from '../../../modals/RenameRunModal';\nimport RestoreRunModal from '../../../modals/RestoreRunModal';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\n\nexport interface ExperimentViewModalsProps {\n  showDeleteRunModal: boolean;\n  showRestoreRunModal: boolean;\n  showRenameRunModal: boolean;\n  runsSelected: Record<string, boolean>;\n  onCloseDeleteRunModal: () => void;\n  onCloseRestoreRunModal: () => void;\n  onCloseRenameRunModal: () => void;\n  renamedRunName: string;\n}\n\n/**\n * A component that contains modals required for the run\n * management, i.e. delete and restore actions.\n */\nexport const ExperimentViewRunModals = ({\n  showDeleteRunModal,\n  showRestoreRunModal,\n  showRenameRunModal,\n  runsSelected,\n  onCloseDeleteRunModal,\n  onCloseRestoreRunModal,\n  onCloseRenameRunModal,\n  renamedRunName,\n}: ExperimentViewModalsProps) => {\n  const { updateSearchFacets } = useFetchExperimentRuns();\n\n  const selectedRunIds = Object.entries(runsSelected)\n    .filter(([, selected]) => selected)\n    .map(([key]) => key);\n\n  /**\n   * Function used to refresh the list after renaming the run\n   */\n  const refreshRuns = useCallback(\n    () =>\n      updateSearchFacets(\n        {},\n        {\n          forceRefresh: true,\n          preservePristine: true,\n        },\n      ),\n    [updateSearchFacets],\n  );\n\n  return (\n    <>\n      <DeleteRunModal\n        isOpen={showDeleteRunModal}\n        onClose={onCloseDeleteRunModal}\n        selectedRunIds={selectedRunIds}\n      />\n      <RestoreRunModal\n        isOpen={showRestoreRunModal}\n        onClose={onCloseRestoreRunModal}\n        selectedRunIds={selectedRunIds}\n      />\n      <RenameRunModal\n        runUuid={selectedRunIds[0]}\n        onClose={onCloseRenameRunModal}\n        runName={renamedRunName}\n        isOpen={showRenameRunModal}\n        onSuccess={() => refreshRuns()}\n      />\n    </>\n  );\n};\n","import { Button } from '@databricks/design-system';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport { LIFECYCLE_FILTER } from '../../../../constants';\nimport Routes from '../../../../routes';\nimport { UpdateExperimentSearchFacetsFn } from '../../../../types';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunModals } from './ExperimentViewRunModals';\n\nexport type ExperimentViewRunsControlsActionsProps = {\n  viewState: SearchExperimentRunsViewState;\n\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  runsData: ExperimentRunsSelectorResult;\n};\n\nexport const ExperimentViewRunsControlsActions = React.memo(\n  ({ viewState, runsData, searchFacetsState }: ExperimentViewRunsControlsActionsProps) => {\n    const { runsSelected } = viewState;\n    const { runInfos } = runsData;\n    const { lifecycleFilter } = searchFacetsState;\n\n    const history = useHistory();\n\n    const [showDeleteRunModal, setShowDeleteRunModal] = useState(false);\n    const [showRestoreRunModal, setShowRestoreRunModal] = useState(false);\n    const [showRenameRunModal, setShowRenameRunModal] = useState(false);\n    const [renamedRunName, setRenamedRunName] = useState('');\n\n    const renameButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const selectedRun = runInfos.find((info) => info.run_uuid === runsSelectedList[0]);\n      if (selectedRun) {\n        setRenamedRunName(selectedRun.run_name);\n        setShowRenameRunModal(true);\n      }\n    }, [runInfos, runsSelected]);\n\n    const compareButtonClicked = useCallback(() => {\n      const runsSelectedList = Object.keys(runsSelected);\n      const experimentIds = runInfos\n        .filter(({ run_uuid }: any) => runsSelectedList.includes(run_uuid))\n        .map(({ experiment_id }: any) => experiment_id);\n      history.push(\n        Routes.getCompareRunPageRoute(runsSelectedList, [...new Set(experimentIds)].sort()),\n      );\n    }, [history, runInfos, runsSelected]);\n\n    const onDeleteRun = useCallback(() => setShowDeleteRunModal(true), []);\n    const onRestoreRun = useCallback(() => setShowRestoreRunModal(true), []);\n    const onCloseDeleteRunModal = useCallback(() => setShowDeleteRunModal(false), []);\n    const onCloseRestoreRunModal = useCallback(() => setShowRestoreRunModal(false), []);\n    const onCloseRenameRunModal = useCallback(() => setShowRenameRunModal(false), []);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n    const canRestoreRuns = selectedRunsCount > 0;\n    const canRenameRuns = selectedRunsCount === 1;\n    const canCompareRuns = selectedRunsCount > 1;\n\n    return (\n      <div css={styles.controlBar}>\n        <ExperimentViewRunModals\n          runsSelected={runsSelected}\n          onCloseRenameRunModal={onCloseRenameRunModal}\n          onCloseDeleteRunModal={onCloseDeleteRunModal}\n          onCloseRestoreRunModal={onCloseRestoreRunModal}\n          showDeleteRunModal={showDeleteRunModal}\n          showRestoreRunModal={showRestoreRunModal}\n          showRenameRunModal={showRenameRunModal}\n          renamedRunName={renamedRunName}\n        />\n        <Button\n          data-testid='runs-compare-button'\n          disabled={!canCompareRuns}\n          onClick={compareButtonClicked}\n        >\n          <FormattedMessage\n            defaultMessage='Compare'\n            // eslint-disable-next-line max-len\n            description='String for the compare button to compare experiment runs to find an ideal model'\n          />\n        </Button>\n        <Button\n          data-testid='run-rename-button'\n          onClick={renameButtonClicked}\n          disabled={!canRenameRuns}\n        >\n          <FormattedMessage\n            defaultMessage='Rename'\n            description='Label for the rename run button above the experiment runs table'\n          />\n        </Button>\n        <div css={styles.gapElement} />\n        {lifecycleFilter === LIFECYCLE_FILTER.ACTIVE ? (\n          <Button\n            data-testid='runs-delete-button'\n            disabled={!canRestoreRuns}\n            onClick={onDeleteRun}\n            danger\n          >\n            <FormattedMessage\n              defaultMessage='Delete'\n              // eslint-disable-next-line max-len\n              description='String for the delete button to delete a particular experiment run'\n            />\n          </Button>\n        ) : null}\n        {lifecycleFilter === LIFECYCLE_FILTER.DELETED ? (\n          <Button\n            data-testid='runs-restore-button'\n            disabled={!canRestoreRuns}\n            onClick={onRestoreRun}\n          >\n            <FormattedMessage\n              defaultMessage='Restore'\n              // eslint-disable-next-line max-len\n              description='String for the restore button to undo the experiments that were deleted'\n            />\n          </Button>\n        ) : null}\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  controlBar: { display: 'flex', gap: 8, alignItems: 'center' },\n  gapElement: { flex: 1 },\n};\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nfunction UnitNumber(_ref) {\n  var prefixCls = _ref.prefixCls,\n      value = _ref.value,\n      current = _ref.current,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset;\n  var style;\n\n  if (offset) {\n    style = {\n      position: 'absolute',\n      top: \"\".concat(offset, \"00%\"),\n      left: 0\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: style,\n    className: classNames(\"\".concat(prefixCls, \"-only-unit\"), {\n      current: current\n    })\n  }, value);\n}\n\nfunction getOffset(start, end, unit) {\n  var index = start;\n  var offset = 0;\n\n  while ((index + 10) % 10 !== end) {\n    index += unit;\n    offset += unit;\n  }\n\n  return offset;\n}\n\nexport default function SingleNumber(props) {\n  var prefixCls = props.prefixCls,\n      originCount = props.count,\n      originValue = props.value;\n  var value = Number(originValue);\n  var count = Math.abs(originCount);\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      prevValue = _React$useState2[0],\n      setPrevValue = _React$useState2[1];\n\n  var _React$useState3 = React.useState(count),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      prevCount = _React$useState4[0],\n      setPrevCount = _React$useState4[1]; // ============================= Events =============================\n\n\n  var onTransitionEnd = function onTransitionEnd() {\n    setPrevValue(value);\n    setPrevCount(count);\n  }; // Fallback if transition event not support\n\n\n  React.useEffect(function () {\n    var timeout = setTimeout(function () {\n      onTransitionEnd();\n    }, 1000);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [value]); // ============================= Render =============================\n  // Render unit list\n\n  var unitNodes;\n  var offsetStyle;\n\n  if (prevValue === value || Number.isNaN(value) || Number.isNaN(prevValue)) {\n    // Nothing to change\n    unitNodes = [/*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n      key: value,\n      current: true\n    }))];\n    offsetStyle = {\n      transition: 'none'\n    };\n  } else {\n    unitNodes = []; // Fill basic number units\n\n    var end = value + 10;\n    var unitNumberList = [];\n\n    for (var index = value; index <= end; index += 1) {\n      unitNumberList.push(index);\n    } // Fill with number unit nodes\n\n\n    var prevIndex = unitNumberList.findIndex(function (n) {\n      return n % 10 === prevValue;\n    });\n    unitNodes = unitNumberList.map(function (n, index) {\n      var singleUnit = n % 10;\n      return /*#__PURE__*/React.createElement(UnitNumber, _extends({}, props, {\n        key: n,\n        value: singleUnit,\n        offset: index - prevIndex,\n        current: index === prevIndex\n      }));\n    }); // Calculate container offset value\n\n    var unit = prevCount < count ? 1 : -1;\n    offsetStyle = {\n      transform: \"translateY(\".concat(-getOffset(prevValue, value, unit), \"00%)\")\n    };\n  }\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-only\"),\n    style: offsetStyle,\n    onTransitionEnd: onTransitionEnd\n  }, unitNodes);\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\nimport SingleNumber from './SingleNumber';\n\nvar ScrollNumber = function ScrollNumber(_a) {\n  var customizePrefixCls = _a.prefixCls,\n      count = _a.count,\n      className = _a.className,\n      motionClassName = _a.motionClassName,\n      style = _a.style,\n      title = _a.title,\n      show = _a.show,\n      _a$component = _a.component,\n      component = _a$component === void 0 ? 'sup' : _a$component,\n      children = _a.children,\n      restProps = __rest(_a, [\"prefixCls\", \"count\", \"className\", \"motionClassName\", \"style\", \"title\", \"show\", \"component\", \"children\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls;\n\n  var prefixCls = getPrefixCls('scroll-number', customizePrefixCls); // ============================ Render ============================\n\n  var newProps = _extends(_extends({}, restProps), {\n    'data-show': show,\n    style: style,\n    className: classNames(prefixCls, className, motionClassName),\n    title: title\n  }); // Only integer need motion\n\n\n  var numberNodes = count;\n\n  if (count && Number(count) % 1 === 0) {\n    var numberList = String(count).split('');\n    numberNodes = numberList.map(function (num, i) {\n      return /*#__PURE__*/React.createElement(SingleNumber, {\n        prefixCls: prefixCls,\n        count: Number(count),\n        value: num // eslint-disable-next-line react/no-array-index-key\n        ,\n        key: numberList.length - i\n      });\n    });\n  } // allow specify the border\n  // mock border-color by box-shadow for compatible with old usage:\n  // <Badge count={4} style={{ backgroundColor: '#fff', color: '#999', borderColor: '#d9d9d9' }} />\n\n\n  if (style && style.borderColor) {\n    newProps.style = _extends(_extends({}, style), {\n      boxShadow: \"0 0 0 1px \".concat(style.borderColor, \" inset\")\n    });\n  }\n\n  if (children) {\n    return cloneElement(children, function (oriProps) {\n      return {\n        className: classNames(\"\".concat(prefixCls, \"-custom-component\"), oriProps === null || oriProps === void 0 ? void 0 : oriProps.className, motionClassName)\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(component, newProps, numberNodes);\n};\n\nexport default ScrollNumber;","import { PresetColorTypes } from '../_util/colors'; // eslint-disable-next-line import/prefer-default-export\n\nexport function isPresetColor(color) {\n  return PresetColorTypes.indexOf(color) !== -1;\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { ConfigContext } from '../config-provider';\nimport { isPresetColor } from './utils';\n\nvar Ribbon = function Ribbon(_ref) {\n  var _classNames;\n\n  var className = _ref.className,\n      customizePrefixCls = _ref.prefixCls,\n      style = _ref.style,\n      color = _ref.color,\n      children = _ref.children,\n      text = _ref.text,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? 'end' : _ref$placement;\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('ribbon', customizePrefixCls);\n  var colorInPreset = isPresetColor(color);\n  var ribbonCls = classNames(prefixCls, \"\".concat(prefixCls, \"-placement-\").concat(placement), (_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames, \"\".concat(prefixCls, \"-color-\").concat(color), colorInPreset), _classNames), className);\n  var colorStyle = {};\n  var cornerColorStyle = {};\n\n  if (color && !colorInPreset) {\n    colorStyle.background = color;\n    cornerColorStyle.color = color;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-wrapper\")\n  }, children, /*#__PURE__*/React.createElement(\"div\", {\n    className: ribbonCls,\n    style: _extends(_extends({}, colorStyle), style)\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-text\")\n  }, text), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"\".concat(prefixCls, \"-corner\"),\n    style: cornerColorStyle\n  })));\n};\n\nexport default Ribbon;","import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport { useMemo, useRef } from 'react';\nimport CSSMotion from 'rc-motion';\nimport classNames from 'classnames';\nimport ScrollNumber from './ScrollNumber';\nimport Ribbon from './Ribbon';\nimport { ConfigContext } from '../config-provider';\nimport { cloneElement } from '../_util/reactNode';\nimport { isPresetColor } from './utils';\n\nvar Badge = function Badge(_a) {\n  var _classNames, _classNames2;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeScrollNumberPrefixCls = _a.scrollNumberPrefixCls,\n      children = _a.children,\n      status = _a.status,\n      text = _a.text,\n      color = _a.color,\n      _a$count = _a.count,\n      count = _a$count === void 0 ? null : _a$count,\n      _a$overflowCount = _a.overflowCount,\n      overflowCount = _a$overflowCount === void 0 ? 99 : _a$overflowCount,\n      _a$dot = _a.dot,\n      dot = _a$dot === void 0 ? false : _a$dot,\n      _a$size = _a.size,\n      size = _a$size === void 0 ? 'default' : _a$size,\n      title = _a.title,\n      offset = _a.offset,\n      style = _a.style,\n      className = _a.className,\n      _a$showZero = _a.showZero,\n      showZero = _a$showZero === void 0 ? false : _a$showZero,\n      restProps = __rest(_a, [\"prefixCls\", \"scrollNumberPrefixCls\", \"children\", \"status\", \"text\", \"color\", \"count\", \"overflowCount\", \"dot\", \"size\", \"title\", \"offset\", \"style\", \"className\", \"showZero\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getPrefixCls = _React$useContext.getPrefixCls,\n      direction = _React$useContext.direction;\n\n  var prefixCls = getPrefixCls('badge', customizePrefixCls); // ================================ Misc ================================\n\n  var numberedDisplayCount = count > overflowCount ? \"\".concat(overflowCount, \"+\") : count;\n  var hasStatus = status !== null && status !== undefined || color !== null && color !== undefined;\n  var isZero = numberedDisplayCount === '0' || numberedDisplayCount === 0;\n  var showAsDot = dot && !isZero || hasStatus;\n  var mergedCount = showAsDot ? '' : numberedDisplayCount;\n  var isHidden = useMemo(function () {\n    var isEmpty = mergedCount === null || mergedCount === undefined || mergedCount === '';\n    return (isEmpty || isZero && !showZero) && !showAsDot;\n  }, [mergedCount, isZero, showZero, showAsDot]); // Count should be cache in case hidden change it\n\n  var countRef = useRef(count);\n\n  if (!isHidden) {\n    countRef.current = count;\n  }\n\n  var livingCount = countRef.current; // We need cache count since remove motion should not change count display\n\n  var displayCountRef = useRef(mergedCount);\n\n  if (!isHidden) {\n    displayCountRef.current = mergedCount;\n  }\n\n  var displayCount = displayCountRef.current; // We will cache the dot status to avoid shaking on leaved motion\n\n  var isDotRef = useRef(showAsDot);\n\n  if (!isHidden) {\n    isDotRef.current = showAsDot;\n  } // =============================== Styles ===============================\n\n\n  var mergedStyle = useMemo(function () {\n    if (!offset) {\n      return _extends({}, style);\n    }\n\n    var offsetStyle = {\n      marginTop: offset[1]\n    };\n\n    if (direction === 'rtl') {\n      offsetStyle.left = parseInt(offset[0], 10);\n    } else {\n      offsetStyle.right = -parseInt(offset[0], 10);\n    }\n\n    return _extends(_extends({}, offsetStyle), style);\n  }, [direction, offset, style]); // =============================== Render ===============================\n  // >>> Title\n\n  var titleNode = title !== null && title !== void 0 ? title : typeof livingCount === 'string' || typeof livingCount === 'number' ? livingCount : undefined; // >>> Status Text\n\n  var statusTextNode = isHidden || !text ? null : /*#__PURE__*/React.createElement(\"span\", {\n    className: \"\".concat(prefixCls, \"-status-text\")\n  }, text); // >>> Display Component\n\n  var displayNode = !livingCount || _typeof(livingCount) !== 'object' ? undefined : cloneElement(livingCount, function (oriProps) {\n    return {\n      style: _extends(_extends({}, mergedStyle), oriProps.style)\n    };\n  }); // Shared styles\n\n  var statusCls = classNames((_classNames = {}, _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-dot\"), hasStatus), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames));\n  var statusStyle = {};\n\n  if (color && !isPresetColor(color)) {\n    statusStyle.background = color;\n  }\n\n  var badgeClassName = classNames(prefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-status\"), hasStatus), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-not-a-wrapper\"), !children), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _classNames2), className); // <Badge status=\"success\" />\n\n  if (!children && hasStatus) {\n    var statusTextColor = mergedStyle.color;\n    return /*#__PURE__*/React.createElement(\"span\", _extends({}, restProps, {\n      className: badgeClassName,\n      style: mergedStyle\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: statusCls,\n      style: statusStyle\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: statusTextColor\n      },\n      className: \"\".concat(prefixCls, \"-status-text\")\n    }, text));\n  } // <Badge status=\"success\" count={<Icon type=\"xxx\" />}></Badge>\n\n\n  return /*#__PURE__*/React.createElement(\"span\", _extends({}, restProps, {\n    className: badgeClassName\n  }), children, /*#__PURE__*/React.createElement(CSSMotion, {\n    visible: !isHidden,\n    motionName: \"\".concat(prefixCls, \"-zoom\"),\n    motionAppear: false\n  }, function (_ref) {\n    var _classNames3;\n\n    var motionClassName = _ref.className;\n    var scrollNumberPrefixCls = getPrefixCls('scroll-number', customizeScrollNumberPrefixCls);\n    var isDot = isDotRef.current;\n    var scrollNumberCls = classNames((_classNames3 = {}, _defineProperty(_classNames3, \"\".concat(prefixCls, \"-dot\"), isDot), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-count\"), !isDot), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-count-sm\"), size === 'small'), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-multiple-words\"), !isDot && displayCount && displayCount.toString().length > 1), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-\").concat(status), !!status), _defineProperty(_classNames3, \"\".concat(prefixCls, \"-status-\").concat(color), isPresetColor(color)), _classNames3));\n\n    var scrollNumberStyle = _extends({}, mergedStyle);\n\n    if (color && !isPresetColor(color)) {\n      scrollNumberStyle = scrollNumberStyle || {};\n      scrollNumberStyle.background = color;\n    }\n\n    return /*#__PURE__*/React.createElement(ScrollNumber, {\n      prefixCls: scrollNumberPrefixCls,\n      show: !isHidden,\n      motionClassName: motionClassName,\n      className: scrollNumberCls,\n      count: displayCount,\n      title: titleNode,\n      style: scrollNumberStyle,\n      key: \"scrollNumber\"\n    }, displayNode);\n  }), statusTextNode);\n};\n\nBadge.Ribbon = Ribbon;\nexport default Badge;","import { Button, SyncIcon } from '@databricks/design-system';\nimport React, { useCallback, useEffect, useState } from 'react';\n// TODO: de-antd-ify Badge as soon as it appears in the design system\nimport { Theme } from '@emotion/react';\nimport { Badge } from 'antd';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { MAX_DETECT_NEW_RUNS_RESULTS, POLL_INTERVAL } from '../../../../constants';\nimport { ExperimentStoreEntities } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\n\nexport interface ExperimentViewRefreshButtonProps {\n  runInfos: ExperimentStoreEntities['runInfosByUuid'];\n}\n\n/**\n * A component that displays \"refresh runs\" button with the relevant number\n * of the new runs and handles the refresh action.\n */\nexport const ExperimentViewRefreshButtonImpl = React.memo(\n  ({ runInfos }: React.PropsWithChildren<ExperimentViewRefreshButtonProps>) => {\n    const {\n      actions: { searchRunsPayload },\n      updateSearchFacets,\n    } = useFetchExperimentRuns();\n\n    const experimentIds = useExperimentIds();\n\n    // Keeps the time of the last runs fetch\n    const [lastFetchTime, setLastFetchTime] = useState(0);\n\n    // Keeps the number of available new runs\n    const [newRunsCount, setNewRunsCount] = useState(0);\n\n    // Refreshes the runs\n    const refreshRuns = useCallback(\n      () =>\n        updateSearchFacets(\n          {},\n          {\n            forceRefresh: true,\n            preservePristine: true,\n          },\n        ),\n      [updateSearchFacets],\n    );\n\n    // We're resetting number of new runs and the fetch date\n    // every time when the runs payload has changed\n    useEffect(() => {\n      setNewRunsCount(0);\n      setLastFetchTime(() => Date.now());\n    }, [runInfos]);\n\n    useEffect(\n      () => {\n        if (!lastFetchTime) {\n          return undefined;\n        }\n        const interval = setInterval(() => {\n          // Let's query for new runs that have started after a certain time\n          const searchPayloadData: any = {\n            experimentIds,\n            filter: `attributes.start_time > ${lastFetchTime}`,\n            // We're not interested in more than 26 new runs\n            maxResults: MAX_DETECT_NEW_RUNS_RESULTS,\n          };\n          searchRunsPayload(searchPayloadData).then((result) => {\n            const newRuns = result.runs?.length || 0;\n            setNewRunsCount(newRuns);\n          });\n        }, POLL_INTERVAL);\n        return () => clearInterval(interval);\n      },\n      // We're resetting the interval each time the reference time or experiment IDs have changed\n      [lastFetchTime, searchRunsPayload, experimentIds],\n    );\n\n    return (\n      <Badge\n        count={newRunsCount}\n        offset={[-5, 5]}\n        css={styles.pill}\n        overflowCount={MAX_DETECT_NEW_RUNS_RESULTS - 1}\n      >\n        <Button onClick={refreshRuns} data-testid='runs-refresh-button' icon={<SyncIcon />}>\n          <FormattedMessage\n            defaultMessage='Refresh'\n            description='refresh button text to refresh the experiment runs'\n          />\n        </Button>\n      </Badge>\n    );\n  },\n);\n\nconst styles = {\n  pill: (theme: Theme) => ({ sup: { backgroundColor: theme.colors.lime, zIndex: 1 } }),\n};\n\n/**\n * The only thing that we're interested in the store is the current set of runInfos.\n * We're going to monitor it so we will know when new runs are fetched.\n */\nconst mapStateToProps = (state: { entities: ExperimentStoreEntities }) => {\n  return { runInfos: state.entities.runInfosByUuid };\n};\n\nexport const ExperimentViewRefreshButton = connect(mapStateToProps, undefined, undefined, {\n  // We're interested only in \"entities\" sub-tree so we won't\n  // re-render on other state changes (e.g. API request IDs)\n  areStatesEqual: (nextState, prevState) => nextState.entities === prevState.entities,\n})(ExperimentViewRefreshButtonImpl);\n","import {\n  Button,\n  ChevronDownIcon,\n  Dropdown,\n  Input,\n  Search1Icon,\n  Tree,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_LABELS, COLUMN_TYPES } from '../../../../constants';\nimport { UpdateExperimentSearchFacetsFn } from '../../../../types';\nimport { useExperimentIds } from '../../hooks/useExperimentIds';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport {\n  extractCanonicalSortKey,\n  isCanonicalSortKeyOfType,\n  makeCanonicalSortKey,\n} from '../../utils/experimentPage.column-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\n\n/**\n * We need to recreate antd's tree check callback signature since it's not importable\n */\ntype AntdTreeCheckCallback = { node: { key: string | number; checked: boolean } };\n\n/**\n * Function localizing antd tree inside a DOM element. Used to focusing by keyboard.\n */\nconst locateAntdTree = (parent: HTMLElement | null): HTMLElement | null =>\n  parent?.querySelector('[role=\"tree\"] input') || null;\n\nconst GROUP_KEY = 'GROUP';\n\nconst GROUP_KEY_ATTRIBUTES = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.ATTRIBUTES);\nconst GROUP_KEY_PARAMS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.PARAMS);\nconst GROUP_KEY_METRICS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.METRICS);\nconst GROUP_KEY_TAGS = makeCanonicalSortKey(GROUP_KEY, COLUMN_TYPES.TAGS);\n\nconst ATTRIBUTE_COLUMNS = [\n  ATTRIBUTE_COLUMN_LABELS.USER,\n  ATTRIBUTE_COLUMN_LABELS.SOURCE,\n  ATTRIBUTE_COLUMN_LABELS.VERSION,\n  ATTRIBUTE_COLUMN_LABELS.MODELS,\n];\nconst ATTRIBUTE_COLUMNS_COMPARE = [ATTRIBUTE_COLUMN_LABELS.EXPERIMENT_NAME, ...ATTRIBUTE_COLUMNS];\n\n/**\n * Function filters list of string by a given query string.\n */\nconst findMatching = (values: string[], filterQuery: string) =>\n  values.filter((v) => v.toLowerCase().includes(filterQuery.toLowerCase()));\n\n/**\n * Function dissects given string and wraps the\n * searched query with <strong>...</strong> if found. Used for highlighting search.\n */\nconst createHighlightedNode = (value: string, filterQuery: string) => {\n  if (!filterQuery) {\n    return value;\n  }\n  const index = value.toLowerCase().indexOf(filterQuery.toLowerCase());\n  const beforeStr = value.substring(0, index);\n  const matchStr = value.substring(index, index + filterQuery.length);\n  const afterStr = value.substring(index + filterQuery.length);\n\n  return index > -1 ? (\n    <span>\n      {beforeStr}\n      <strong>{matchStr}</strong>\n      {afterStr}\n    </span>\n  ) : (\n    value\n  );\n};\nexport interface ExperimentViewRunsColumnSelectorProps {\n  runsData: ExperimentRunsSelectorResult;\n  columnSelectorVisible: boolean;\n  onChangeColumnSelectorVisible: (value: boolean) => void;\n}\n\n/**\n * A component displaying the searchable column list - implementation.\n */\nexport const ExperimentViewRunsColumnSelectorImpl = React.memo(\n  ({\n    runsData,\n    columnSelectorVisible,\n    onChangeColumnSelectorVisible,\n    updateSearchFacets,\n    selectedColumns,\n  }: ExperimentViewRunsColumnSelectorProps & {\n    updateSearchFacets: UpdateExperimentSearchFacetsFn;\n    selectedColumns: SearchExperimentRunsFacetsState['selectedColumns'];\n  }) => {\n    const experimentIds = useExperimentIds();\n    const [filter, setFilter] = useState('');\n\n    const searchInputRef = useRef<any>(null);\n    const scrollableContainerRef = useRef<HTMLDivElement>(null);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n\n    // Extract all attribute columns\n    const attributeColumnNames = useMemo(\n      () => (experimentIds.length > 1 ? ATTRIBUTE_COLUMNS_COMPARE : ATTRIBUTE_COLUMNS),\n      [experimentIds.length],\n    );\n\n    const setCheckedColumns = useCallback(\n      (updateFn: (existingCheckedColumns: string[]) => string[]) =>\n        updateSearchFacets((facets) => {\n          const newColumns = updateFn(facets.selectedColumns);\n          const uniqueNewColumns = Array.from(new Set(newColumns));\n          return { ...facets, selectedColumns: uniqueNewColumns };\n        }),\n      [updateSearchFacets],\n    );\n\n    // Extract unique list of tags\n    const tagsKeyList = useMemo(() => Utils.getVisibleTagKeyList(runsData.tagsList), [runsData]);\n\n    // Extract canonical key names for attributes, params, metrics and tags.\n    const canonicalKeyNames = useMemo(\n      () => ({\n        [COLUMN_TYPES.ATTRIBUTES]: attributeColumnNames.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, key),\n        ),\n        [COLUMN_TYPES.PARAMS]: runsData.paramKeyList.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.PARAMS, key),\n        ),\n        [COLUMN_TYPES.METRICS]: runsData.metricKeyList.map((key) =>\n          makeCanonicalSortKey(COLUMN_TYPES.METRICS, key),\n        ),\n        [COLUMN_TYPES.TAGS]: tagsKeyList.map((key) => makeCanonicalSortKey(COLUMN_TYPES.TAGS, key)),\n      }),\n      [runsData, attributeColumnNames, tagsKeyList],\n    );\n\n    // This memoized value holds the tree structure generated from\n    // attributes, params, metrics and tags. Displays only filtered values.\n    const treeData = useMemo(() => {\n      const result = [];\n\n      const filteredAttributes = findMatching(attributeColumnNames, filter);\n      const filteredParams = findMatching(runsData.paramKeyList, filter);\n      const filteredMetrics = findMatching(runsData.metricKeyList, filter);\n      const filteredTags = findMatching(tagsKeyList, filter);\n\n      if (filteredAttributes.length) {\n        result.push({\n          key: GROUP_KEY_ATTRIBUTES,\n          title: `Attributes`,\n          children: filteredAttributes.map((attributeKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.ATTRIBUTES, attributeKey),\n            title: createHighlightedNode(attributeKey, filter),\n          })),\n        });\n      }\n      if (filteredMetrics.length) {\n        result.push({\n          key: GROUP_KEY_METRICS,\n          title: `Metrics (${filteredMetrics.length})`,\n          children: filteredMetrics.map((metricKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.METRICS, metricKey),\n            title: createHighlightedNode(metricKey, filter),\n          })),\n        });\n      }\n      if (filteredParams.length) {\n        result.push({\n          key: GROUP_KEY_PARAMS,\n          title: `Parameters (${filteredParams.length})`,\n          children: filteredParams.map((paramKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.PARAMS, paramKey),\n            title: createHighlightedNode(paramKey, filter),\n          })),\n        });\n      }\n      if (filteredTags.length) {\n        result.push({\n          key: GROUP_KEY_TAGS,\n          title: `Tags (${filteredTags.length})`,\n          children: filteredTags.map((tagKey) => ({\n            key: makeCanonicalSortKey(COLUMN_TYPES.TAGS, tagKey),\n            title: tagKey,\n          })),\n        });\n      }\n\n      return result;\n    }, [attributeColumnNames, filter, runsData, tagsKeyList]);\n\n    // This callback toggles entire group of keys\n    const toggleGroup = useCallback(\n      (isChecked: boolean, keyList: string[]) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, ...keyList]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => !keyList.includes(k)));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    // This callback is intended to select/deselect a single key\n    const toggleSingleKey = useCallback(\n      (key: string, isChecked: boolean) => {\n        if (!isChecked) {\n          setCheckedColumns((checked) => [...checked, key]);\n        } else {\n          setCheckedColumns((checked) => checked.filter((k) => k !== key));\n        }\n      },\n      [setCheckedColumns],\n    );\n\n    useEffect(() => {\n      if (columnSelectorVisible) {\n        setFilter('');\n\n        // Let's wait for the next execution frame, then:\n        // - restore the dropdown menu scroll position\n        // - focus the search input\n        // - bring the dropdown into the viewport using scrollIntoView()\n        requestAnimationFrame(() => {\n          scrollableContainerRef?.current?.scrollTo(0, 0);\n          searchInputRef.current?.focus({ preventScroll: true });\n\n          if (buttonRef.current) {\n            buttonRef.current.scrollIntoView({ block: 'nearest', behavior: 'smooth' });\n          }\n        });\n      }\n    }, [columnSelectorVisible]);\n\n    const onCheck = useCallback(\n      // We need to recreate antd's tree check callback signature\n      (_: any, { node: { key, checked } }: AntdTreeCheckCallback) => {\n        if (isCanonicalSortKeyOfType(key.toString(), GROUP_KEY)) {\n          const columnType = extractCanonicalSortKey(key.toString(), GROUP_KEY);\n          const canonicalKeysForGroup = canonicalKeyNames[columnType];\n          if (canonicalKeysForGroup) {\n            toggleGroup(checked, findMatching(canonicalKeysForGroup, filter));\n          }\n        } else {\n          toggleSingleKey(key.toString(), checked);\n        }\n      },\n      [canonicalKeyNames, toggleGroup, toggleSingleKey, filter],\n    );\n\n    // This callback moves focus to tree element if down arrow has been pressed\n    // when inside search input area.\n    const searchInputKeyDown = useCallback<React.KeyboardEventHandler<HTMLInputElement>>((e) => {\n      if (e.key === 'ArrowDown') {\n        const treeElement = locateAntdTree(scrollableContainerRef.current);\n\n        if (treeElement) {\n          treeElement.focus();\n        }\n      }\n    }, []);\n\n    // A JSX block containing the dropdown\n    const dropdownContent = (\n      <div css={styles.dropdown}>\n        <div css={(theme) => ({ padding: theme.spacing.md })}>\n          <Input\n            value={filter}\n            prefix={<Search1Icon />}\n            placeholder='Search columns'\n            allowClear\n            ref={searchInputRef}\n            onChange={(e) => {\n              setFilter(e.target.value);\n            }}\n            onKeyDown={searchInputKeyDown}\n          />\n        </div>\n        <div ref={scrollableContainerRef} css={styles.scrollableContainer}>\n          <Tree\n            data-testid='column-selector-tree'\n            mode='checkable'\n            dangerouslySetAntdProps={{\n              checkedKeys: selectedColumns,\n              onCheck,\n            }}\n            defaultExpandedKeys={[\n              GROUP_KEY_ATTRIBUTES,\n              GROUP_KEY_PARAMS,\n              GROUP_KEY_METRICS,\n              GROUP_KEY_TAGS,\n            ]}\n            treeData={treeData}\n          />\n        </div>\n      </div>\n    );\n\n    return (\n      <Dropdown\n        overlay={dropdownContent}\n        placement='bottomRight'\n        trigger={['click']}\n        visible={columnSelectorVisible}\n        onVisibleChange={onChangeColumnSelectorVisible}\n      >\n        <Button\n          ref={buttonRef}\n          style={{ display: 'flex', alignItems: 'center' }}\n          data-testid='column-selection-dropdown'\n        >\n          <FormattedMessage\n            defaultMessage='Columns'\n            description='Dropdown text to display columns names that could to be rendered for the experiment runs table'\n          />{' '}\n          <ChevronDownIcon />\n        </Button>\n      </Dropdown>\n    );\n  },\n);\n\n/**\n * A component displaying the searchable column list.\n * This is a thin layer wrapping the implementation to optimize search state rerenders.\n */\nexport const ExperimentViewRunsColumnSelector = (props: ExperimentViewRunsColumnSelectorProps) => {\n  const { updateSearchFacets, searchFacetsState } = useFetchExperimentRuns();\n  return (\n    <ExperimentViewRunsColumnSelectorImpl\n      {...props}\n      selectedColumns={searchFacetsState.selectedColumns}\n      updateSearchFacets={updateSearchFacets}\n    />\n  );\n};\n\nconst styles = {\n  dropdown: (theme: Theme) => ({\n    backgroundColor: theme.colors.white,\n    width: 400,\n    border: `1px solid`,\n    borderColor: theme.colors.border,\n  }),\n  scrollableContainer: (theme: Theme) => ({\n    // Maximum height of 15 elements times 32 pixels as defined in\n    // design-system/src/design-system/Tree/Tree.tsx\n    maxHeight: 15 * 32,\n    overflowY: 'scroll' as const,\n    overflowX: 'hidden' as const,\n    paddingBottom: theme.spacing.md,\n    'span[title]': {\n      whiteSpace: 'nowrap' as const,\n      textOverflow: 'ellipsis',\n      overflow: 'hidden',\n    },\n  }),\n};\n","import {\n  Button,\n  DownloadIcon,\n  InfoBorderIcon,\n  Input,\n  Search1Icon,\n  Select,\n  Option,\n  Tooltip,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  CloseIcon,\n} from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { ExperimentSearchSyntaxDocUrl } from '../../../../../common/constants';\nimport { middleTruncateStr } from '../../../../../common/utils/StringUtils';\nimport { TAGS_TO_COLUMNS_MAP } from '../../utils/experimentPage.column-utils';\nimport {\n  COLUMN_SORT_BY_ASC,\n  COLUMN_SORT_BY_DESC,\n  SORT_DELIMITER_SYMBOL,\n} from '../../../../constants';\nimport {\n  LIFECYCLE_FILTER,\n  UpdateExperimentSearchFacetsFn,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\nimport { ExperimentRunSortOption } from '../../hooks/useRunSortOptions';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { getStartTimeColumnDisplayName } from '../../utils/experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRefreshButton } from './ExperimentViewRefreshButton';\nimport { ExperimentViewRunsColumnSelector } from './ExperimentViewRunsColumnSelector';\n\n// A default placeholder for the search box\nconst SEARCH_BOX_PLACEHOLDER = 'metrics.rmse < 1 and params.model = \"tree\"';\n\nexport type ExperimentViewRunsControlsFiltersProps = {\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  viewState: SearchExperimentRunsViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  sortOptions: ExperimentRunSortOption[];\n  runsData: ExperimentRunsSelectorResult;\n  onDownloadCsv: () => void;\n};\n\nexport const ExperimentViewRunsControlsFilters = React.memo(\n  ({\n    searchFacetsState,\n    updateSearchFacets,\n    runsData,\n    viewState,\n    updateViewState,\n    onDownloadCsv,\n    sortOptions,\n  }: ExperimentViewRunsControlsFiltersProps) => {\n    const { lifecycleFilter, orderByKey, orderByAsc, startTime } = searchFacetsState;\n\n    const [searchFilterValue, setSearchFilterValue] = useState<string>();\n    const intl = useIntl();\n\n    // List of labels for \"start time\" filter\n    const startTimeColumnLabels = useMemo(() => getStartTimeColumnDisplayName(intl), [intl]);\n\n    // Callback fired when the sort column value changes\n    const sortKeyChanged = useCallback(\n      ({ value: compiledOrderByKey }) => {\n        const [newOrderBy, newOrderAscending] = compiledOrderByKey.split(SORT_DELIMITER_SYMBOL);\n\n        const columnToAdd = TAGS_TO_COLUMNS_MAP[newOrderBy] || newOrderBy;\n        const isOrderAscending = newOrderAscending === COLUMN_SORT_BY_ASC;\n\n        updateSearchFacets((currentFacets) => {\n          const { selectedColumns } = currentFacets;\n          if (!selectedColumns.includes(columnToAdd)) {\n            selectedColumns.push(columnToAdd);\n          }\n          return {\n            ...currentFacets,\n            selectedColumns,\n            orderByKey: newOrderBy,\n            orderByAsc: isOrderAscending,\n          };\n        });\n      },\n      [updateSearchFacets],\n    );\n\n    // Callback fired when search filter is being used\n    const triggerSearch: React.KeyboardEventHandler<HTMLInputElement> = (e) => {\n      if (e.key === 'Enter') {\n        updateSearchFacets({ searchFilter: searchFilterValue });\n      }\n    };\n\n    // Each time we're setting search filter externally, update it here as well\n    useEffect(() => {\n      setSearchFilterValue(searchFacetsState.searchFilter);\n    }, [searchFacetsState]);\n\n    // Callback fired when \"clear\" button is clicked\n    const clearFacetsState = useCallback(() => {\n      const cleanSearchFacetsState = new SearchExperimentRunsFacetsState();\n      const { selectedColumns, runsExpanded, runsPinned } = searchFacetsState;\n      updateSearchFacets(\n        Object.assign(cleanSearchFacetsState, {\n          runsExpanded,\n          runsPinned,\n          selectedColumns,\n        }),\n      );\n    }, [searchFacetsState, updateSearchFacets]);\n\n    // Shows or hides the column selector\n    const changeColumnSelectorVisible = useCallback(\n      (value: boolean) => updateViewState({ columnSelectorVisible: value }),\n      [updateViewState],\n    );\n\n    // Currently used canonical \"sort by\" value in form of \"COLUMN_NAME***DIRECTION\", e.g. \"metrics.`metric`***DESCENDING\"\n    const currentSortSelectValue = useMemo(\n      () =>\n        `${orderByKey}${SORT_DELIMITER_SYMBOL}${\n          orderByAsc ? COLUMN_SORT_BY_ASC : COLUMN_SORT_BY_DESC\n        }`,\n      [orderByAsc, orderByKey],\n    );\n\n    /**\n     * Calculate and memoize a label displayed in the \"sort by\" select.\n     *\n     * If full metrics and params list is populated by runs from the API, use the\n     * value corresponding to the calculated sort option list.\n     *\n     * If the sort option list is incomplete (e.g. because fetched run set is empty) while the\n     * order key is given (e.g. because URL state says so), use it to extract the key name.\n     */\n    const currentSortSelectLabel = useMemo(() => {\n      // Search through all sort options generated basing on the fetched runs\n      const sortOption = sortOptions.find((option) => option.value === currentSortSelectValue);\n\n      let sortOptionLabel = sortOption?.label;\n\n      // If the actually chosen sort value is not found in the sort option list (e.g. because the list of fetched runs is empty),\n      // use it to generate the label\n      if (!sortOptionLabel) {\n        // The following regex extracts plain sort key name from its canonical form, i.e.\n        // metrics.`metric_key_name` => metric_key_name\n        const extractedKeyName = orderByKey.match(/^.+\\.`(.+)`$/);\n        if (extractedKeyName) {\n          // eslint-disable-next-line prefer-destructuring\n          sortOptionLabel = extractedKeyName[1];\n        }\n      }\n\n      return (\n        <>\n          <FormattedMessage\n            defaultMessage='Sort'\n            description='Sort by default option for sort by select dropdown for experiment runs'\n          />\n          : {orderByAsc ? <ArrowUpIcon /> : <ArrowDownIcon />} {sortOptionLabel}\n        </>\n      );\n    }, [currentSortSelectValue, orderByAsc, orderByKey, sortOptions]);\n\n    const currentLifecycleFilterLabel = (\n      <>\n        <FormattedMessage\n          defaultMessage='State:'\n          description='Filtering label to filter experiments based on state of active or deleted'\n        />{' '}\n        {lifecycleFilter}\n      </>\n    );\n\n    const currentStartTimeFilterLabel = (\n      <>\n        <FormattedMessage\n          defaultMessage='Started during'\n          description='Label for the start time select dropdown for experiment runs view'\n        />\n        : {startTimeColumnLabels[startTime as keyof typeof startTimeColumnLabels]}\n      </>\n    );\n\n    return (\n      <>\n        <div css={styles.groupBar}>\n          <div css={styles.controlBar}>\n            <ExperimentViewRefreshButton />\n            <div css={styles.searchBox}>\n              <Input\n                value={searchFilterValue}\n                prefix={<Search1Icon css={styles.searchBarIcon} />}\n                onKeyDown={triggerSearch}\n                onChange={(e) => setSearchFilterValue(e.target.value)}\n                placeholder={SEARCH_BOX_PLACEHOLDER}\n                data-test-id='search-box'\n                suffix={\n                  <div css={styles.searchInputSuffix}>\n                    {searchFilterValue && (\n                      <Button onClick={clearFacetsState} type='link' data-test-id='clear-button'>\n                        <CloseIcon />\n                      </Button>\n                    )}\n                    <Tooltip\n                      title={\n                        <div className='search-input-tooltip-content'>\n                          <FormattedMessage\n                            defaultMessage='Search runs using a simplified version of the SQL {whereBold} clause'\n                            description='Tooltip string to explain how to search runs from the experiments table'\n                            values={{ whereBold: <b>WHERE</b> }}\n                          />\n                          <br />\n                          <FormattedMessage\n                            defaultMessage='<link>Learn more</link>'\n                            description='Learn more tooltip link to learn more on how to search in an experiments run table'\n                            values={{\n                              link: (chunks: any) => (\n                                <a\n                                  href={ExperimentSearchSyntaxDocUrl}\n                                  target='_blank'\n                                  rel='noopener noreferrer'\n                                >\n                                  {chunks}\n                                </a>\n                              ),\n                            }}\n                          />\n                        </div>\n                      }\n                      placement='bottom'\n                    >\n                      <InfoBorderIcon css={styles.searchBarIcon} />\n                    </Tooltip>\n                  </div>\n                }\n              />\n            </div>\n            <Select\n              className='sort-select'\n              css={styles.sortSelectControl}\n              value={{\n                value: currentSortSelectValue,\n                label: currentSortSelectLabel,\n              }}\n              labelInValue\n              // Temporarily we're disabling virtualized list to maintain\n              // backwards compatiblity. Functional unit tests rely heavily\n              // on non-virtualized values.\n              dangerouslySetAntdProps={\n                { virtual: false, dropdownStyle: styles.sortSelectDropdown } as any\n              }\n              onChange={sortKeyChanged}\n              data-test-id='sort-select-dropdown'\n            >\n              {sortOptions.map((sortOption) => (\n                <Option\n                  key={sortOption.value}\n                  title={sortOption.label}\n                  data-test-id={`sort-select-${sortOption.label}-${sortOption.order}`}\n                  value={sortOption.value}\n                >\n                  {sortOption.order === COLUMN_SORT_BY_ASC ? <ArrowUpIcon /> : <ArrowDownIcon />}{' '}\n                  {middleTruncateStr(sortOption.label, 50)}\n                </Option>\n              ))}\n            </Select>\n            <Select\n              value={{ value: lifecycleFilter, label: currentLifecycleFilterLabel }}\n              labelInValue\n              data-testid='lifecycle-filter'\n              onChange={({ value }) => updateSearchFacets({ lifecycleFilter: value })}\n            >\n              <Select.Option data-testid='active-runs-menu-item' value={LIFECYCLE_FILTER.ACTIVE}>\n                <FormattedMessage\n                  defaultMessage='Active'\n                  description='Linked model dropdown option to show active experiment runs'\n                />\n              </Select.Option>\n              <Select.Option data-testid='deleted-runs-menu-item' value={LIFECYCLE_FILTER.DELETED}>\n                <FormattedMessage\n                  defaultMessage='Deleted'\n                  description='Linked model dropdown option to show deleted experiment runs'\n                />\n              </Select.Option>\n            </Select>\n\n            <Select\n              className='start-time-select'\n              value={{ value: startTime, label: currentStartTimeFilterLabel }}\n              labelInValue\n              onChange={({ value: newStartTime }) => {\n                updateSearchFacets({ startTime: newStartTime });\n              }}\n              data-test-id='start-time-select-dropdown'\n              // Temporarily we're disabling virtualized list to maintain\n              // backwards compatiblity. Functional unit tests rely heavily\n              // on non-virtualized values.\n              dangerouslySetAntdProps={{ virtual: false } as any}\n            >\n              {Object.keys(startTimeColumnLabels).map((startTimeKey) => (\n                <Option\n                  key={startTimeKey}\n                  title={startTimeColumnLabels[startTimeKey as keyof typeof startTimeColumnLabels]}\n                  data-test-id={`start-time-select-${startTimeKey}`}\n                  value={startTimeKey}\n                >\n                  {startTimeColumnLabels[startTimeKey as keyof typeof startTimeColumnLabels]}\n                </Option>\n              ))}\n            </Select>\n            <Tooltip\n              title={intl.formatMessage({\n                defaultMessage: 'Download CSV',\n                description:\n                  'Tooltip for the download csv button to download experiments offline in a CSV format',\n              })}\n            >\n              <Button className='csv-button' onClick={onDownloadCsv}>\n                <DownloadIcon />{' '}\n                <FormattedMessage\n                  defaultMessage='Download'\n                  description='String for the download csv button to download experiments offline in a CSV format'\n                />\n              </Button>\n            </Tooltip>\n          </div>\n          <div css={styles.groupSeparator} />\n\n          <ExperimentViewRunsColumnSelector\n            columnSelectorVisible={viewState.columnSelectorVisible}\n            onChangeColumnSelectorVisible={changeColumnSelectorVisible}\n            runsData={runsData}\n          />\n        </div>\n      </>\n    );\n  },\n);\n\nconst styles = {\n  groupBar: { display: 'grid', gridTemplateColumns: 'auto 1fr auto' },\n  controlBar: (theme: Theme) => ({ display: 'flex', gap: theme.spacing.sm, alignItems: 'center' }),\n  searchBarIcon: (theme: Theme) => ({\n    svg: { width: 16, height: 16, color: theme.colors.textSecondary },\n  }),\n  groupSeparator: (theme: Theme) => ({ minWidth: theme.spacing.sm }),\n  searchInputSuffix: { display: 'flex', gap: 4, alignItems: 'center' },\n  columnSwitch: { margin: '5px' },\n  searchBox: (theme: Theme) => ({ display: 'flex', gap: theme.spacing.sm, width: 360 }),\n  sortSelectControl: { minWidth: 140, maxWidth: 360 },\n\n  lifecycleFilters: (theme: Theme) => ({\n    display: 'flex',\n    gap: 8,\n    alignItems: 'center',\n    marginTop: theme.spacing.sm,\n    marginBottom: theme.spacing.sm,\n    marginLeft: theme.spacing.lg * 2,\n  }),\n  sortSelectDropdown: { minWidth: 360 },\n};\n","import React, { useCallback } from 'react';\nimport Utils from '../../../../../common/utils/Utils';\nimport { UpdateExperimentSearchFacetsFn, UpdateExperimentViewStateFn } from '../../../../types';\nimport { useRunSortOptions } from '../../hooks/useRunSortOptions';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { downloadRunsCsv } from '../../utils/experimentPage.common-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControlsActions } from './ExperimentViewRunsControlsActions';\nimport { ExperimentViewRunsControlsFilters } from './ExperimentViewRunsControlsFilters';\n\ntype ExperimentViewRunsControlsProps = {\n  viewState: SearchExperimentRunsViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n\n  runsData: ExperimentRunsSelectorResult;\n};\n\n/**\n * This component houses all controls related to searching runs: sort controls,\n * filters and run related actions (delete, restore, download CSV).\n */\nexport const ExperimentViewRunsControls = React.memo(\n  ({\n    runsData,\n    viewState,\n    updateViewState,\n    updateSearchFacets,\n    searchFacetsState,\n  }: ExperimentViewRunsControlsProps) => {\n    const { paramKeyList, metricKeyList, tagsList } = runsData;\n\n    const filteredParamKeys = paramKeyList;\n    const filteredMetricKeys = metricKeyList;\n    const filteredTagKeys = Utils.getVisibleTagKeyList(tagsList);\n\n    const onDownloadCsv = useCallback(\n      () => downloadRunsCsv(runsData, filteredTagKeys, filteredParamKeys, filteredMetricKeys),\n      [filteredMetricKeys, filteredParamKeys, filteredTagKeys, runsData],\n    );\n\n    const sortOptions = useRunSortOptions(filteredMetricKeys, filteredParamKeys);\n\n    const selectedRunsCount = Object.values(viewState.runsSelected).filter(Boolean).length;\n\n    return (\n      <div css={styles.wrapper}>\n        {selectedRunsCount > 0 ? (\n          <ExperimentViewRunsControlsActions\n            runsData={runsData}\n            updateSearchFacets={updateSearchFacets}\n            searchFacetsState={searchFacetsState}\n            viewState={viewState}\n          />\n        ) : (\n          <ExperimentViewRunsControlsFilters\n            onDownloadCsv={onDownloadCsv}\n            updateSearchFacets={updateSearchFacets}\n            searchFacetsState={searchFacetsState}\n            viewState={viewState}\n            updateViewState={updateViewState}\n            sortOptions={sortOptions}\n            runsData={runsData}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nconst styles = {\n  wrapper: { display: 'flex', gap: 8, flexDirection: 'column' as const, marginTop: 12 },\n};\n","import { useMemo } from 'react';\nimport {\n  ATTRIBUTE_COLUMN_SORT_KEY,\n  ATTRIBUTE_COLUMN_SORT_LABEL,\n  COLUMN_SORT_BY_ASC,\n  COLUMN_SORT_BY_DESC,\n  COLUMN_TYPES,\n  SORT_DELIMITER_SYMBOL,\n} from '../../../constants';\nimport ExperimentViewUtil from '../../ExperimentViewUtil';\n\nexport type ExperimentRunSortOption = {\n  label: string;\n  order: string;\n  value: string;\n};\n\ntype SORT_KEY_TYPE = keyof (typeof ATTRIBUTE_COLUMN_SORT_KEY & typeof ATTRIBUTE_COLUMN_SORT_LABEL);\n\n/**\n * This hook creates a set of run+sort options basing on currently selected\n * columns and the list of all metrics and keys.\n */\nexport const useRunSortOptions = (\n  filteredMetricKeys: string[],\n  filteredParamKeys: string[],\n): ExperimentRunSortOption[] =>\n  useMemo(() => {\n    let sortOptions = [];\n    const ColumnSortByOrder = [COLUMN_SORT_BY_ASC, COLUMN_SORT_BY_DESC];\n    const attributesSortBy = Object.keys(ATTRIBUTE_COLUMN_SORT_LABEL).reduce<any[]>(\n      (options, sortLabelKey) => {\n        const sortLabel = ATTRIBUTE_COLUMN_SORT_LABEL[sortLabelKey as SORT_KEY_TYPE];\n\n        ColumnSortByOrder.forEach((order) => {\n          options.push({\n            label: sortLabel,\n            value:\n              ATTRIBUTE_COLUMN_SORT_KEY[sortLabelKey as SORT_KEY_TYPE] +\n              SORT_DELIMITER_SYMBOL +\n              order,\n            order,\n          });\n        });\n\n        return options;\n      },\n      [],\n    );\n    const metricsSortBy = filteredMetricKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${ExperimentViewUtil.makeCanonicalKey(\n            COLUMN_TYPES.METRICS,\n            sortLabelKey,\n          )}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    const paramsSortBy = filteredParamKeys.reduce<any[]>((options, sortLabelKey) => {\n      ColumnSortByOrder.forEach((order) => {\n        options.push({\n          label: sortLabelKey,\n          value: `${ExperimentViewUtil.makeCanonicalKey(\n            COLUMN_TYPES.PARAMS,\n            sortLabelKey,\n          )}${SORT_DELIMITER_SYMBOL}${order}`,\n          order,\n        });\n      });\n\n      return options;\n    }, []);\n    sortOptions = [...attributesSortBy, ...metricsSortBy, ...paramsSortBy];\n\n    return sortOptions;\n  }, [filteredMetricKeys, filteredParamKeys]);\n","import type { AgGridReactProps, AgReactUiProps } from '@ag-grid-community/react';\nimport { Spinner } from '@databricks/design-system';\nimport React from 'react';\n\nconst MLFlowAgGridImpl = React.lazy(() => import('./AgGrid'));\n\n/**\n * A simple loader that will lazily load MLFlow's ag grid implementation.\n * Extracted to a separate module for testing purposes.\n */\nexport const MLFlowAgGridLoader = (props: AgGridReactProps | AgReactUiProps) => (\n  <React.Suspense\n    fallback={\n      <div\n        css={(cssTheme) => ({\n          display: 'flex',\n          justifyContent: 'center',\n          margin: cssTheme.spacing.md,\n        })}\n      >\n        <Spinner />\n      </div>\n    }\n  >\n    <MLFlowAgGridImpl {...props} />\n  </React.Suspense>\n);\n","import React, { Component } from 'react';\nimport { LoggingRunsDocUrl } from '../constants';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Display a helper overlay to on board new users on MLflow when the experiments runs table is\n * empty.\n */\nexport class ExperimentRunsTableEmptyOverlay extends Component {\n  getLearnMoreLinkUrl = () => LoggingRunsDocUrl;\n\n  render() {\n    const learnMoreLinkUrl = this.getLearnMoreLinkUrl();\n    return (\n      <div className='experiment-runs-table-empty-overlay' css={classNames.wrapper}>\n        <span>\n          <FormattedMessage\n            // eslint-disable-next-line max-len\n            defaultMessage='No runs yet. <link>Learn more</link> about how to create ML model training {newLine} runs in this experiment.'\n            // eslint-disable-next-line max-len\n            description='Empty state text for experiment runs page'\n            values={{\n              link: (chunks) => (\n                // Reported during ESLint upgrade\n                // eslint-disable-next-line react/jsx-no-target-blank\n                <a target='_blank' href={learnMoreLinkUrl}>\n                  {chunks}\n                </a>\n              ),\n              newLine: <br />,\n            }}\n          />\n        </span>\n      </div>\n    );\n  }\n}\n\nconst classNames = {\n  wrapper: {\n    position: 'relative',\n    top: '10px',\n    fontSize: '13px',\n    padding: '30px',\n    width: '100 %',\n    pointerEvents: 'all',\n  },\n};\n","import { isNumber } from 'lodash';\nimport Utils from '../../../../common/utils/Utils';\nimport { ExperimentEntity, KeyValueEntity, ModelInfoEntity, RunInfoEntity } from '../../../types';\nimport {\n  RunRowDateAndNestInfo,\n  RunRowModelsInfo,\n  RunRowType,\n  RunRowVersionInfo,\n} from './experimentPage.row-types';\nimport { SearchExperimentRunsFacetsState } from '../models/SearchExperimentRunsFacetsState';\nimport { ExperimentRunsSelectorResult } from './experimentRuns.selector';\nimport {\n  EXPERIMENT_FIELD_PREFIX_METRIC,\n  EXPERIMENT_FIELD_PREFIX_PARAM,\n  EXPERIMENT_FIELD_PREFIX_TAG,\n  EXPERIMENT_PARENT_ID_TAG,\n} from './experimentPage.common-utils';\n\n/**\n * A simple tree-like interface used in nested rows calculations.\n */\ninterface SimpleTreeNode {\n  value: string;\n  parent?: SimpleTreeNode;\n}\n\n/**\n * An intermediate interface representing single row in agGrid (but not necessarily\n * a single run - these might be nested and not expanded). Is created from the data\n * originating from the store, then after enriching with metrics, params, attributed etc.\n * is being transformed to RunRowType which serves as a final agGrid compatible type.\n */\ninterface RowRenderMetadata {\n  index: number;\n  isParent?: boolean;\n  hasExpander?: boolean;\n  expanderOpen?: boolean;\n  isPinnable?: boolean;\n  runInfo: RunInfoEntity;\n  level: number;\n  childrenIds?: string[];\n  params: KeyValueEntity[];\n  metrics: KeyValueEntity[];\n  tags: Record<string, KeyValueEntity>;\n}\n\n/**\n * For a given run dataset from the store, this function prepares\n * a list of rows metadata discarding any information about the parent/child run hierarchy.\n */\nconst getFlatRowRenderMetadata = (runData: SingleRunData[]) =>\n  runData.map<RowRenderMetadata>(({ runInfo, metrics = [], params = [], tags = {} }, index) => ({\n    index,\n    runInfo,\n    level: 0, // All runs will be on \"0\" level here,\n    isPinnable: !tags[EXPERIMENT_PARENT_ID_TAG]?.value,\n    metrics: metrics,\n    params: params,\n    tags: tags,\n  }));\n\n/**\n * For a given run dataset from the store, this function prepares\n * a list of rows metadata taking the parent/child run hierarchy into consideration.\n */\nconst getNestedRowRenderMetadata = ({\n  runsExpanded,\n  runData,\n}: {\n  runsExpanded: Record<string, boolean>;\n  runData: SingleRunData[];\n}) => {\n  // First, map run IDs to their indices - will be helpful later on.\n  const runIdToIndex: Record<string, number> = {};\n  runData.forEach(({ runInfo }, index) => {\n    runIdToIndex[runInfo.run_uuid] = index;\n  });\n\n  // Create a list of tree nodes for all run infos. Each leaf's value is the run UUID.\n  const treeNodes: SimpleTreeNode[] = runData.map(({ runInfo }) => ({ value: runInfo.run_uuid }));\n\n  // We're going to check if any hierarchy is detected in the run set. If not,\n  // we will not bother with unnecessary calculations.\n  let foundHierarchy = false;\n\n  // Iterate through all the tags and assign proper parent references\n  runData.forEach(({ tags }, index) => {\n    const parentRunId = tags?.[EXPERIMENT_PARENT_ID_TAG];\n    if (parentRunId) {\n      const parentRunIndex = runIdToIndex[parentRunId.value];\n      if (parentRunIndex !== undefined) {\n        foundHierarchy = true;\n        treeNodes[index].parent = treeNodes[parentRunIndex];\n      }\n    }\n  });\n\n  // If no parent tags are found, we're not going calculate\n  // tree-related stuff and return a flat list instead.\n  if (!foundHierarchy) {\n    return getFlatRowRenderMetadata(runData);\n  }\n\n  // Iterate through the tree and convert it to a flat parent->children mapping array\n  const parentIdToChildren: Record<string, number[]> = {};\n  const rootIndexes: any[] = [];\n  treeNodes.forEach((treeNode, index) => {\n    const { parent } = treeNode;\n    if (parent !== undefined && parent.value !== treeNode.value) {\n      if (parentIdToChildren[parent.value]) {\n        parentIdToChildren[parent.value].push(index);\n      } else {\n        parentIdToChildren[parent.value] = [index];\n      }\n    } else {\n      // If a node has no parent, let's register it as a root index\n      rootIndexes.push(index);\n    }\n  });\n\n  const resultRowsMetadata: RowRenderMetadata[] = [];\n\n  // Create and invoke a simple DFS search with \"visited\" set so we won't be caught in a cycle\n  const visited = new Set();\n  const doDfs = (dfsIndex: number, currLevel: number) => {\n    if (!visited.has(dfsIndex)) {\n      const currentNodeRunInfo = runData[dfsIndex].runInfo;\n      const currentNodeRunId = currentNodeRunInfo.run_uuid;\n\n      // Only rows that are top-level parents or those being on the top level are pinnable\n      const isPinnable = Boolean(rootIndexes.includes(dfsIndex)) || currLevel === 0;\n\n      const rowMetadata: RowRenderMetadata = {\n        index: dfsIndex,\n        isParent: false,\n        hasExpander: false,\n        level: currLevel,\n        runInfo: currentNodeRunInfo,\n        params: runData[dfsIndex].params || [],\n        metrics: runData[dfsIndex].metrics || [],\n        tags: runData[dfsIndex].tags || {},\n        isPinnable,\n      };\n      if (parentIdToChildren[currentNodeRunId]) {\n        rowMetadata.isParent = true;\n        rowMetadata.hasExpander = true;\n        rowMetadata.expanderOpen = Boolean(runsExpanded[currentNodeRunId]);\n        rowMetadata.childrenIds = parentIdToChildren[currentNodeRunId].map(\n          (cIdx) => runData[cIdx].runInfo.run_uuid,\n        );\n      }\n\n      resultRowsMetadata.push(rowMetadata);\n      visited.add(dfsIndex);\n\n      const childrenIndices = parentIdToChildren[currentNodeRunId];\n      // Repeat DFS for children nodes - only if the current node is expanded\n      if (childrenIndices) {\n        if (runsExpanded[currentNodeRunId]) {\n          childrenIndices.forEach((dIdx) => {\n            doDfs(dIdx, currLevel + 1);\n          });\n        }\n      }\n    }\n  };\n\n  // Invoke the DFS for all root indexes\n  rootIndexes.forEach((rootNodeIndex) => {\n    doDfs(rootNodeIndex, 0);\n  });\n  return resultRowsMetadata;\n};\n\n/**\n * Iterates through all key/value data given for a run and\n * returns mapped dataset in a \"PREFIX-NAME\" form, e.g. '$$$param$$$-paramname\".\n * Fills '-' placeholder in all empty places.\n */\nconst createKeyValueDataForRunRow = (\n  list: { key: string; value: string }[],\n  keys: string[],\n  prefix: string,\n) => {\n  if (!list) {\n    return [];\n  }\n\n  const map: Record<string, string> = {};\n\n  // First, populate all values (cells) with default placeholder: '-'\n  for (const key of keys) {\n    map[`${prefix}-${key}`] = '-';\n  }\n\n  // Then, override with existing value if found\n  for (const { key, value } of list) {\n    if (value || isNumber(value)) {\n      map[`${prefix}-${key}`] = value;\n    }\n  }\n\n  return map;\n};\n\n/**\n * Creates ag-grid compatible row dataset for all given runs basing on\n * the data retrieved from the API and from the refux store.\n * Please refer to PrepareRunsGridDataParams type for type reference.\n */\nexport const prepareRunsGridData = ({\n  experiments,\n  modelVersionsByRunUuid,\n  runsExpanded,\n  nestChildren,\n  referenceTime,\n  paramKeyList,\n  metricKeyList,\n  tagKeyList,\n  runsPinned,\n  runData,\n  runUuidsMatchingFilter,\n}: PrepareRunsGridDataParams) => {\n  const experimentNameMap = Utils.getExperimentNameMap(\n    Utils.sortExperimentsById(experiments),\n  ) as Record<string, { name: string; basename: string }>;\n\n  // Let's start with generating intermediate row metadata - either as a nested or a flat list.\n  // We need to assemble separate hierarchies for pinned rows and unpinned rows:\n  const rowRenderMetadata: RowRenderMetadata[] = nestChildren\n    ? getNestedRowRenderMetadata({ runData, runsExpanded })\n    : getFlatRowRenderMetadata(runData);\n\n  // We will aggregate children of pinned parent rows here so we will easily pin them as well\n  const childrenToPin: string[] = [];\n\n  // Now, enrich the intermediate row metadata with attributes, metrics and params and\n  // return it as a grid-consumable \"RunRowType\" type.\n  const runs = rowRenderMetadata.map<RunRowType>((runInfoMetadata) => {\n    const {\n      runInfo,\n      isParent = false,\n      hasExpander = false,\n      level = 0,\n      expanderOpen = false,\n      isPinnable = false,\n      childrenIds = [],\n      tags,\n      params,\n      metrics,\n    } = runInfoMetadata;\n\n    const formattedMetrics = (metrics || []).map(({ key, value }) => ({\n      key,\n      value: Utils.formatMetric(value),\n    }));\n\n    // Extract necessary basic info\n    const runUuid = runInfo.run_uuid;\n    const { experiment_id: experimentId } = runInfo;\n    const experimentName = experimentNameMap[experimentId];\n    const user = Utils.getUser(runInfo, tags);\n    const duration = Utils.getDuration(runInfo.start_time, runInfo.end_time);\n    const runName = Utils.getRunName(runInfo) || runInfo.run_uuid;\n\n    // Extract visible tags (i.e. those not prefixed with \"mlflow.\")\n    const visibleTags = Utils.getVisibleTagValues(tags).map(([key, value]) => ({\n      key,\n      value,\n    }));\n\n    // Prepare a data package to be used by \"Start time\" cell\n    const runDateAndNestInfo: RunRowDateAndNestInfo = {\n      startTime: runInfo.start_time,\n      referenceTime,\n      experimentId,\n      runUuid,\n      runStatus: runInfo.status,\n      isParent,\n      hasExpander,\n      expanderOpen,\n      childrenIds,\n      level,\n    };\n\n    // Prepare a data package to be used by \"Models\" cell\n    const models: RunRowModelsInfo = {\n      registeredModels: modelVersionsByRunUuid[runInfo.run_uuid] || [], // ModelInfoEntity\n      loggedModels: Utils.getLoggedModelsFromTags(tags),\n      experimentId: runInfo.experiment_id,\n      runUuid: runInfo.run_uuid,\n    };\n\n    // Prepare a data package to be used by \"Version\" cell\n    const version: RunRowVersionInfo = {\n      version: Utils.getSourceVersion(tags),\n      name: Utils.getSourceName(tags),\n      type: Utils.getSourceType(tags),\n    };\n\n    const isCurrentRowPinned = runsPinned.includes(runUuid);\n    const isParentPinned = childrenToPin.includes(runUuid);\n\n    // If this or a parent row is pinned, pin children as well\n    if (isCurrentRowPinned || isParentPinned) {\n      childrenToPin.push(...childrenIds);\n    }\n\n    // Compile everything into a data object to be consumed by the grid component\n    return {\n      runUuid,\n      runDateAndNestInfo,\n      runInfo,\n      experimentName,\n      experimentId,\n      duration,\n      user,\n      runName,\n      tags,\n      models,\n      version,\n      pinnable: isPinnable,\n      pinned: isCurrentRowPinned || isParentPinned,\n      ...createKeyValueDataForRunRow(params, paramKeyList, EXPERIMENT_FIELD_PREFIX_PARAM),\n      ...createKeyValueDataForRunRow(\n        formattedMetrics,\n        metricKeyList,\n        EXPERIMENT_FIELD_PREFIX_METRIC,\n      ),\n      ...createKeyValueDataForRunRow(visibleTags, tagKeyList, EXPERIMENT_FIELD_PREFIX_TAG),\n    };\n  });\n\n  // If the flat structure is displayed, we can hoist pinned rows to the top\n  return [\n    // Add pinned rows to the top\n    ...runs.filter(({ pinned }) => pinned),\n\n    // Next, add all remaining rows - however, sweep out all runs that don't match the current filter. This\n    // will hide all filtered out runs that were pinned before, but were eventually un-pinned.\n    ...runs.filter(({ pinned, runUuid }) => !pinned && runUuidsMatchingFilter.includes(runUuid)),\n  ];\n};\n\ntype SingleRunData = {\n  runInfo: RunInfoEntity;\n  params: KeyValueEntity[];\n  metrics: KeyValueEntity[];\n  tags: Record<string, KeyValueEntity>;\n};\n\n/**\n * All parameters necessary to calculate run row data.\n */\ntype PrepareRunsGridDataParams = Pick<\n  ExperimentRunsSelectorResult,\n  'metricKeyList' | 'paramKeyList' | 'modelVersionsByRunUuid'\n> &\n  Pick<SearchExperimentRunsFacetsState, 'runsExpanded' | 'runsPinned'> & {\n    /**\n     * List of experiments containing the runs\n     */\n    experiments: ExperimentEntity[];\n\n    /**\n     * Registered model versions arrays per run uuid\n     */\n    modelVersionsByRunUuid: Record<string, ModelInfoEntity[]>;\n\n    /**\n     * Boolean flag indicating if hierarchical runs should be generated\n     */\n    nestChildren: boolean;\n\n    /**\n     * List of all visible tag keys\n     */\n    tagKeyList: string[];\n\n    /**\n     * A reference time necessary to calculate \"xxx minutes ago\"-like labels\n     */\n    referenceTime: Date;\n\n    /**\n     * List of simplified run objects containing all relevant data\n     */\n    runData: SingleRunData[];\n\n    /**\n     * List of all runs IDs that match the current filter\n     * (this excludes all rows that on the list just because they are pinned)\n     */\n    runUuidsMatchingFilter: string[];\n  };\n","import { Button, PlusCircleBorderIcon } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Width of the CTA column\n */\nconst COLUMN_CTA_WIDTH = 180;\n\n/**\n * CSS classes used internally\n */\nconst CLASS_OUT_OF_VIEWPORT = 'is-out-of-viewport';\nconst CLASS_IS_HIDDEN = 'is-hidden';\nconst CLASS_IS_MINIMIZED = 'is-minimized';\n\n/**\n * List all necessary agGrid sub-element classes\n */\nconst AG_GRID_CLS = {\n  ROOT: '.ag-root',\n  LEFT_COLS_CONTAINER: '.ag-pinned-left-cols-container',\n  COLS_CONTAINER: '.ag-center-cols-container',\n  HEADER: '.ag-header',\n};\n\ninterface ExperimentViewRunsTableAddColumnCTAProps {\n  onClick: () => void;\n  gridContainerElement: HTMLElement | null;\n  isInitialized: boolean;\n  visible?: boolean;\n  moreAvailableParamsAndMetricsColumnCount?: number;\n}\n\n/**\n * Component displaying dynamic table column with \"add metrics and parameters\" CTA.\n *\n * Sample usage:\n *\n * const [gridInitialized, setGridInitialized] = useState(false);\n *\n * return (\n *   <div ref={containerElement}>\n *     <AgGrid onGridReady={() => setGridInitialized(true)} {...} />\n *     <ExperimentViewRunsTableAddColumnCTA\n *       gridContainerElement={containerElement.current}\n *       isInitialized={gridInitialized}\n *       onAddColumnClicked={onAddColumnClicked}\n *       visible={!isLoading}\n *       moreAvailableParamsAndMetricsColumnCount={3}\n *     />\n *   </div>\n * );\n */\nexport const ExperimentViewRunsTableAddColumnCTA = ({\n  onClick,\n  gridContainerElement,\n  isInitialized,\n  visible,\n  moreAvailableParamsAndMetricsColumnCount = 0,\n}: ExperimentViewRunsTableAddColumnCTAProps) => {\n  const ctaRef = useRef<HTMLDivElement>(null);\n\n  const savedContainerRef = useRef<HTMLElement>();\n\n  const initialize = useCallback((containerElement: HTMLElement) => {\n    if (!ctaRef.current || !window.ResizeObserver || !containerElement) {\n      return undefined;\n    }\n\n    const targetElement = ctaRef.current;\n\n    /**\n     * On initialization, first gather all the agGrid sub-elements\n     */\n    const rootElement = containerElement.querySelector(AG_GRID_CLS.ROOT);\n    const refLeftElem = containerElement.querySelector(AG_GRID_CLS.LEFT_COLS_CONTAINER);\n    const refCenterElem = containerElement.querySelector(AG_GRID_CLS.COLS_CONTAINER);\n    const refHeaderElem = containerElement.querySelector(AG_GRID_CLS.HEADER);\n\n    /**\n     * Initialize variables used for position calculation\n     */\n    let gridAreaWidth = 0;\n    let leftColContainerWidth = 0;\n    let centerColContainerWidth = 0;\n    let colContainerHeight = 0;\n    let headerHeight = 0;\n\n    /**\n     * Execute only if all elements are in place\n     */\n    if (refLeftElem && refCenterElem && refHeaderElem && rootElement) {\n      /**\n       * Hook up an resize observer\n       */\n      const resizeObserver = new ResizeObserver((entries) => {\n        /**\n         * For every changed element, gather the exact dimensions\n         */\n        for (const entry of entries) {\n          if (entry.target === rootElement) {\n            gridAreaWidth = entry.contentRect.width;\n          }\n          if (entry.target === refLeftElem) {\n            leftColContainerWidth = entry.contentRect.width;\n            colContainerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refHeaderElem) {\n            headerHeight = entry.contentRect.height;\n          }\n          if (entry.target === refCenterElem) {\n            centerColContainerWidth = entry.contentRect.width;\n          }\n        }\n\n        /**\n         * Our \"left\" position will be offset by column container widths\n         */\n        const calculatedLeft = leftColContainerWidth + centerColContainerWidth;\n\n        /**\n         * Our \"top\"  position will be offset by the header height\n         */\n        const calculatedTop = headerHeight;\n\n        /**\n         * If the column is out of viewport (expanding out of the root element),\n         * add proper CSS class to hide it\n         */\n        const isOutOfViewport = calculatedLeft + COLUMN_CTA_WIDTH >= gridAreaWidth;\n        isOutOfViewport\n          ? savedContainerRef.current?.classList.add(CLASS_OUT_OF_VIEWPORT)\n          : savedContainerRef.current?.classList.remove(CLASS_OUT_OF_VIEWPORT);\n\n        /**\n         * If the available height is too low, add a class that indicates\n         * that we should display minimized version\n         */\n        const shouldBeMinimized = colContainerHeight < 100;\n        shouldBeMinimized\n          ? savedContainerRef.current?.classList.add(CLASS_IS_MINIMIZED)\n          : savedContainerRef.current?.classList.remove(CLASS_IS_MINIMIZED);\n\n        /**\n         * Finally, set proper values as CSS transform property. Use 3d transform\n         * to ensure hardware acceleration.\n         */\n        targetElement.style.transform = `translate3d(${calculatedLeft}px, ${calculatedTop}px, 0)`;\n\n        /**\n         * Set target height and add 1px to accomodate the border.\n         */\n        targetElement.style.height = `${colContainerHeight + 1}px`;\n      });\n\n      /**\n       * Setup observer with all the necessary elements.\n       */\n      resizeObserver.observe(refLeftElem);\n      resizeObserver.observe(refCenterElem);\n      resizeObserver.observe(refHeaderElem);\n      resizeObserver.observe(rootElement);\n\n      /**\n       * After cleanup, disconnect the observer.\n       */\n      return () => resizeObserver.disconnect();\n    }\n    return undefined;\n  }, []);\n\n  useEffect(() => {\n    if (isInitialized && gridContainerElement) {\n      savedContainerRef.current = gridContainerElement;\n      initialize(gridContainerElement);\n    }\n  }, [initialize, isInitialized, gridContainerElement]);\n\n  /**\n   * This component works only if ResizeObserver is supported by the browser.\n   * If it's not supported, return nothing.\n   */\n  if (!window.ResizeObserver) {\n    return null;\n  }\n\n  return (\n    <div ref={ctaRef} css={styles.columnContainer} className={visible ? '' : CLASS_IS_HIDDEN}>\n      {visible && (\n        <div css={styles.buttonContainer}>\n          <Button css={styles.button} type='link' onClick={onClick}>\n            <PlusCircleBorderIcon css={styles.buttonIcon} />\n            <div css={styles.caption}>\n              <FormattedMessage\n                defaultMessage='Show more metrics and parameters'\n                description='Label for a CTA button in experiment runs table which invokes column management dropdown'\n              />{' '}\n              {moreAvailableParamsAndMetricsColumnCount ? (\n                <>({moreAvailableParamsAndMetricsColumnCount})</>\n              ) : null}\n            </div>\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst styles = {\n  columnContainer: (theme: Theme) => ({\n    width: COLUMN_CTA_WIDTH,\n    height: 0,\n    position: 'absolute' as const,\n    border: `1px solid ${theme.colors.border}`,\n    borderLeft: 0,\n    borderTop: 0,\n    top: 0,\n    left: 0,\n    // Slightly expanded icon to conform to the designs\n    svg: {\n      height: 16,\n      width: 16,\n    },\n    willChange: 'transform' as const,\n    transform: 'translate3d(0, 0, 0)',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'flex',\n      alignItems: 'center' as const,\n    },\n    [`&.${CLASS_IS_HIDDEN}, .${CLASS_OUT_OF_VIEWPORT} &`]: {\n      display: 'none',\n    },\n  }),\n  buttonContainer: (theme: Theme) => ({\n    position: 'sticky' as const,\n    top: 0,\n    paddingLeft: theme.spacing.lg,\n    paddingRight: theme.spacing.lg,\n    paddingTop: theme.spacing.lg,\n    width: '100%',\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      paddingTop: theme.spacing.xs,\n    },\n  }),\n  button: { whiteSpace: 'pre-wrap' as const, width: '100%' },\n  buttonIcon: (theme: Theme) => ({ color: theme.colors.textSecondary }),\n  caption: (theme: Theme) => ({\n    color: theme.colors.textSecondary,\n    [`.${CLASS_IS_MINIMIZED} &`]: {\n      display: 'none',\n    },\n  }),\n};\n","import {\n  ColumnApi,\n  GridApi,\n  GridReadyEvent,\n  RowSelectedEvent,\n  SelectionChangedEvent,\n} from '@ag-grid-community/core';\nimport { Theme } from '@emotion/react';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { MLFlowAgGridLoader } from '../../../../../common/components/ag-grid/AgGridLoader';\nimport { ExperimentRunsTableEmptyOverlay } from '../../../../../common/components/ExperimentRunsTableEmptyOverlay';\nimport Utils from '../../../../../common/utils/Utils';\nimport { ATTRIBUTE_COLUMN_SORT_KEY, COLUMN_TYPES } from '../../../../constants';\nimport {\n  ExperimentEntity,\n  UpdateExperimentSearchFacetsFn,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\nimport { SearchExperimentRunsFacetsState } from '../../models/SearchExperimentRunsFacetsState';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport {\n  ADJUSTABLE_ATTRIBUTE_COLUMNS,\n  ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT,\n  EXPERIMENTS_DEFAULT_COLUMN_SETUP,\n  getFrameworkComponents,\n  getRowId,\n  isCanonicalSortKeyOfType,\n  useRunsColumnDefinitions,\n} from '../../utils/experimentPage.column-utils';\nimport { RunRowType } from '../../utils/experimentPage.row-types';\nimport { prepareRunsGridData } from '../../utils/experimentPage.row-utils';\nimport { ExperimentRunsSelectorResult } from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsTableAddColumnCTA } from './ExperimentViewRunsTableAddColumnCTA';\n\nexport interface ExperimentViewRunsTableProps {\n  experiments: ExperimentEntity[];\n  searchFacetsState: SearchExperimentRunsFacetsState;\n  runsData: ExperimentRunsSelectorResult;\n  viewState: SearchExperimentRunsViewState;\n  updateViewState: UpdateExperimentViewStateFn;\n  isLoading: boolean;\n  updateSearchFacets: UpdateExperimentSearchFacetsFn;\n  onAddColumnClicked: () => void;\n}\n\n/**\n * Creates time with milliseconds set to zero, usable in calculating\n * relative time\n */\nconst createCurrentTime = () => {\n  const mountTime = new Date();\n  mountTime.setMilliseconds(0);\n  return mountTime;\n};\n\nexport const ExperimentViewRunsTable = React.memo(\n  ({\n    experiments,\n    searchFacetsState,\n    runsData,\n    isLoading,\n    updateSearchFacets,\n    updateViewState,\n    onAddColumnClicked,\n  }: ExperimentViewRunsTableProps) => {\n    const { runsExpanded, orderByKey, searchFilter, runsPinned } = searchFacetsState;\n    const {\n      paramKeyList,\n      metricKeyList,\n      tagsList,\n      modelVersionsByRunUuid,\n      paramsList,\n      metricsList,\n      runInfos,\n      runUuidsMatchingFilter,\n    } = runsData;\n\n    const [gridApi, setGridApi] = useState<GridApi>();\n    const [columnApi, setColumnApi] = useState<ColumnApi>();\n    const prevSelectRunUuids = useRef<string[]>([]);\n    const [runsCount, setRunsCount] = useState(runInfos.length);\n\n    const filteredTagKeys = useMemo(() => Utils.getVisibleTagKeyList(tagsList), [tagsList]);\n\n    const containerElement = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n      if (!gridApi) {\n        return;\n      }\n\n      if (isLoading) {\n        gridApi.showLoadingOverlay();\n      } else {\n        gridApi.hideOverlay();\n      }\n    }, [gridApi, isLoading]);\n\n    /**\n     * Updates selected rows in the view state\n     */\n    const onSelectionChange = useCallback(\n      ({ api }: SelectionChangedEvent) => {\n        const selectedUUIDs: string[] = api\n          .getSelectedRows()\n          .map(({ runInfo }) => runInfo.run_uuid);\n        updateViewState({\n          runsSelected: selectedUUIDs.reduce(\n            (aggregate, curr) => ({ ...aggregate, [curr]: true }),\n            {},\n          ),\n        });\n        prevSelectRunUuids.current = selectedUUIDs;\n      },\n      [updateViewState],\n    );\n\n    /**\n     * A onRowSelected event handler that runs before onSelectionChange.\n     * It checks if the currently (de)selected row contains any children\n     * and if true, (de)select them as well.\n     */\n    const handleRowSelected = useCallback((event: RowSelectedEvent) => {\n      const selectedRows = event.api.getSelectedRows();\n\n      // Let's check if the actual number of selected rows have changed\n      // to avoid empty runs\n      if (prevSelectRunUuids.current && selectedRows.length !== prevSelectRunUuids.current.length) {\n        const isSelected = Boolean(event.node.isSelected());\n\n        // We will continue only if the selected row has properly set runDateInfo\n        const { runDateAndNestInfo } = event.data as RunRowType;\n        if (!runDateAndNestInfo) {\n          return;\n        }\n        const { isParent, expanderOpen, childrenIds } = runDateAndNestInfo;\n\n        // We will continue only if the selected row is a parent containing\n        // children and is actually expanded\n        if (isParent && expanderOpen && childrenIds) {\n          const childrenIdsToSelect = childrenIds;\n\n          event.api.forEachNode((node) => {\n            const { runInfo, runDateAndNestInfo: childRunDateInfo } = node.data as RunRowType;\n\n            const childrenRunUuid = runInfo.run_uuid;\n            if (childrenIdsToSelect.includes(childrenRunUuid)) {\n              // If we found children being parents, mark their children\n              // to be selected as well.\n              if (childRunDateInfo?.childrenIds) {\n                childrenIdsToSelect.push(...childRunDateInfo.childrenIds);\n              }\n\n              node.setSelected(isSelected, false, true);\n            }\n          });\n        }\n      }\n    }, []);\n\n    const onSortBy = useCallback(\n      (newOrderByKey: string, newOrderByAsc: boolean) => {\n        updateSearchFacets({ orderByKey: newOrderByKey, orderByAsc: newOrderByAsc });\n      },\n      [updateSearchFacets],\n    );\n\n    const toggleRowExpanded = useCallback(\n      (parentId: string) =>\n        updateSearchFacets(({ runsExpanded: currentRunsExpanded, ...state }) => ({\n          ...state,\n          runsExpanded: { ...currentRunsExpanded, [parentId]: !currentRunsExpanded[parentId] },\n        })),\n      [updateSearchFacets],\n    );\n\n    const shouldNestChildrenAndFetchParents = useMemo(\n      () => (!orderByKey && !searchFilter) || orderByKey === ATTRIBUTE_COLUMN_SORT_KEY.DATE,\n      [orderByKey, searchFilter],\n    );\n\n    // Value used a reference for the \"date\" column\n    const [referenceTime, setReferenceTime] = useState(createCurrentTime);\n\n    // We're setting new reference date only when new runs data package has arrived\n    useEffect(() => {\n      setReferenceTime(createCurrentTime);\n    }, [runInfos]);\n\n    useEffect(() => {\n      if (!gridApi || isLoading) {\n        return;\n      }\n      const data = prepareRunsGridData({\n        experiments,\n        paramKeyList,\n        metricKeyList,\n        modelVersionsByRunUuid,\n        runsExpanded,\n        tagKeyList: filteredTagKeys,\n        nestChildren: shouldNestChildrenAndFetchParents,\n        referenceTime,\n        runData: runInfos.map((runInfo, index) => ({\n          runInfo,\n          params: paramsList[index],\n          metrics: metricsList[index],\n          tags: tagsList[index],\n        })),\n        runUuidsMatchingFilter,\n        runsPinned,\n      });\n      gridApi.setRowData(data);\n      setRunsCount(data.length);\n    }, [\n      gridApi,\n      isLoading,\n      experiments,\n      metricKeyList,\n      metricsList,\n      modelVersionsByRunUuid,\n      paramKeyList,\n      paramsList,\n      runInfos,\n      runsExpanded,\n      tagsList,\n      filteredTagKeys,\n      shouldNestChildrenAndFetchParents,\n      referenceTime,\n      runsPinned,\n      runUuidsMatchingFilter,\n    ]);\n\n    const togglePinnedRow = useCallback(\n      (uuid: string) => {\n        updateSearchFacets((existingFacets) => ({\n          ...existingFacets,\n          runsPinned: !existingFacets.runsPinned.includes(uuid)\n            ? [...existingFacets.runsPinned, uuid]\n            : existingFacets.runsPinned.filter((r) => r !== uuid),\n        }));\n        // In the next frame, redraw the toggled row in to update the hover state\n        // and tooltips so they won't dangle in the previous mouse position.\n        requestAnimationFrame(() => {\n          if (!gridApi) {\n            return;\n          }\n          const rowNode = gridApi.getRowNode(uuid);\n          if (rowNode) {\n            gridApi.redrawRows({ rowNodes: [rowNode] });\n          }\n        });\n      },\n      [gridApi, updateSearchFacets],\n    );\n\n    const columnDefs = useRunsColumnDefinitions({\n      searchFacetsState,\n      onSortBy,\n      onExpand: toggleRowExpanded,\n      compareExperiments: experiments.length > 1,\n      onTogglePin: togglePinnedRow,\n      metricKeyList,\n      paramKeyList,\n      tagKeyList: filteredTagKeys,\n      columnApi,\n    });\n\n    const gridReadyHandler = useCallback((params: GridReadyEvent) => {\n      setGridApi(params.api);\n      setColumnApi(params.columnApi);\n    }, []);\n\n    // Count all columns available for selection\n    const allAvailableColumnsCount = useMemo(() => {\n      const attributeColumnCount =\n        experiments.length > 1\n          ? ADJUSTABLE_ATTRIBUTE_COLUMNS.length\n          : ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT.length;\n\n      const valuesColumnCount = metricKeyList.length + paramKeyList.length + filteredTagKeys.length;\n\n      return attributeColumnCount + valuesColumnCount;\n    }, [experiments.length, filteredTagKeys.length, metricKeyList.length, paramKeyList.length]);\n\n    const hasSelectedAllColumns =\n      searchFacetsState.selectedColumns.length >= allAvailableColumnsCount;\n\n    // Count metrics and params columns that were not selected yet so it can be displayed in CTA\n    const moreAvailableParamsAndMetricsColumns = useMemo(() => {\n      const selectedMetricsAndParamsColumns = searchFacetsState.selectedColumns.filter(\n        (s) =>\n          isCanonicalSortKeyOfType(s, COLUMN_TYPES.METRICS) ||\n          isCanonicalSortKeyOfType(s, COLUMN_TYPES.PARAMS),\n      ).length;\n\n      const allMetricsAndParamsColumns = metricKeyList.length + paramKeyList.length;\n\n      return Math.max(0, allMetricsAndParamsColumns - selectedMetricsAndParamsColumns);\n    }, [metricKeyList.length, paramKeyList.length, searchFacetsState.selectedColumns]);\n\n    return (\n      <>\n        <div css={styles.runsCount}>\n          <FormattedMessage\n            // eslint-disable-next-line max-len\n            defaultMessage='Showing {length} matching {length, plural, =0 {runs} =1 {run} other {runs}}'\n            // eslint-disable-next-line max-len\n            description='Message for displaying how many runs match search criteria on experiment page'\n            values={{ length: runsCount }}\n          />\n        </div>\n        <div\n          ref={containerElement}\n          className='ag-theme-balham ag-grid-sticky'\n          css={styles.agGridOverrides}\n        >\n          <MLFlowAgGridLoader\n            defaultColDef={EXPERIMENTS_DEFAULT_COLUMN_SETUP}\n            columnDefs={columnDefs}\n            domLayout='autoHeight'\n            rowSelection='multiple'\n            onGridReady={gridReadyHandler}\n            onSelectionChanged={onSelectionChange}\n            onRowSelected={handleRowSelected}\n            suppressRowClickSelection\n            suppressColumnMoveAnimation\n            suppressScrollOnNewData\n            suppressFieldDotNotation\n            enableCellTextSelection\n            components={getFrameworkComponents()}\n            suppressNoRowsOverlay\n            loadingOverlayComponent='loadingOverlayComponent'\n            loadingOverlayComponentParams={{ showImmediately: true }}\n            getRowId={getRowId}\n          />\n          {!hasSelectedAllColumns && (\n            <ExperimentViewRunsTableAddColumnCTA\n              gridContainerElement={containerElement.current}\n              isInitialized={Boolean(gridApi)}\n              onClick={onAddColumnClicked}\n              visible={!isLoading}\n              moreAvailableParamsAndMetricsColumnCount={moreAvailableParamsAndMetricsColumns}\n            />\n          )}\n        </div>\n        {runsCount < 1 && !isLoading && (\n          <div css={styles.noResultsWrapper}>\n            <ExperimentRunsTableEmptyOverlay />\n          </div>\n        )}\n      </>\n    );\n  },\n);\n\nconst styles = {\n  runsCount: (theme: Theme) => ({ margin: `${theme.spacing.md}px 0` }),\n  noResultsWrapper: (theme: Theme) => ({\n    marginTop: -theme.spacing.md * 4,\n    textAlign: 'center' as const,\n    backgroundColor: theme.colors.backgroundPrimary,\n    position: 'relative' as const,\n  }),\n  agGridOverrides: (theme: Theme) => ({\n    marginTop: 12,\n    position: 'relative' as const,\n    '&.ag-theme-balham': {\n      '--ag-border-color': 'rgba(0, 0, 0, 0.06)',\n      '--ag-header-foreground-color': '#20272e',\n      '--ag-header-background-color': `${theme.colors.grey100}`,\n      '--ag-row-hover-color': `${theme.colors.grey200}`,\n      '&.ag-grid-sticky .ag-header': {\n        position: 'sticky' as const,\n        top: 0,\n        zIndex: 1,\n      },\n      '&.ag-grid-sticky .ag-root': {\n        overflow: 'visible' as const,\n      },\n      '&.ag-grid-sticky .ag-root-wrapper': {\n        border: '0',\n        borderRadius: '4px',\n        overflow: 'visible' as const,\n      },\n      '.ag-cell.is-ordered-by, .ag-header-cell > .is-ordered-by': {\n        backgroundColor: theme.colors.blue100,\n      },\n      '.ag-header-cell': {\n        padding: 0,\n      },\n      '.ag-header-cell .ag-checkbox': {\n        padding: '0 12px',\n      },\n      '.ag-overlay-loading-wrapper': {\n        paddingTop: theme.spacing.md * 4,\n        alignItems: 'center' as const,\n      },\n      '.ag-overlay-loading-wrapper .ag-react-container': {\n        flex: 1,\n        zIndex: 1,\n      },\n      '.ag-layout-auto-height .ag-center-cols-container': {\n        borderRight: `1px solid ${theme.colors.border}`,\n        minHeight: 0,\n      },\n    },\n  }),\n};\n","/**\n * Defines non-persistable, local state that\n * controls visibility of various UI elements in the\n * runs table and controls\n */\nexport class SearchExperimentRunsViewState {\n  /**\n   * Currently selected runs\n   */\n  runsSelected: Record<string, boolean> = {};\n\n  /**\n   * Currently hidden, selected child runs\n   */\n  hiddenChildRunsSelected: Record<string, boolean> = {};\n\n  /**\n   * Display \"select columns\" dropdown\n   */\n  columnSelectorVisible = false;\n}\n","import { Button, Tooltip } from '@databricks/design-system';\nimport { Theme } from '@emotion/react';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { connect } from 'react-redux';\nimport { ExperimentStoreEntities } from '../../../../types';\nimport { EXPERIMENT_PARENT_ID_TAG } from '../../utils/experimentPage.common-utils';\n\nexport interface ExperimentViewLoadMoreProps {\n  loadMoreRuns: () => void;\n  moreRunsAvailable: boolean;\n  isLoadingRuns: boolean;\n}\n\nexport interface ExperimentViewLoadMoreConnectProps {\n  containsNestedRuns: boolean;\n}\n\n// Simple JSX wrappers for tooltips\nconst noMoreRunsTooltipWrapper = (node: React.ReactNode) => (\n  <Tooltip\n    placement='bottom'\n    title={\n      <FormattedMessage\n        defaultMessage='No more runs to load.'\n        description='Tooltip text for load more button when there are no more experiment runs to load'\n      />\n    }\n  >\n    {node}\n  </Tooltip>\n);\n\nconst nestedRunsTooltipWrapper = (node: React.ReactNode) => (\n  <Tooltip\n    placement='bottom'\n    title={\n      <FormattedMessage\n        defaultMessage='Loaded child runs are nested under their parents.'\n        description='Tooltip text for load more button explaining the runs are nested under their parent experiment run'\n      />\n    }\n  >\n    {node}\n  </Tooltip>\n);\n\n/**\n * Component displaying \"Load more\" button with proper tooltips\n */\nexport const ExperimentViewLoadMoreImpl = ({\n  loadMoreRuns,\n  moreRunsAvailable,\n  isLoadingRuns,\n  containsNestedRuns,\n}: ExperimentViewLoadMoreProps & ExperimentViewLoadMoreConnectProps) => {\n  const loadMoreButton = (\n    <Button\n      type='primary'\n      onClick={loadMoreRuns}\n      disabled={!moreRunsAvailable || isLoadingRuns}\n      loading={isLoadingRuns}\n    >\n      <FormattedMessage\n        defaultMessage='Load more'\n        description='Load more button text to load more experiment runs'\n      />\n    </Button>\n  );\n\n  return (\n    <div css={styles.loadMoreButton}>\n      {!moreRunsAvailable\n        ? noMoreRunsTooltipWrapper(loadMoreButton)\n        : containsNestedRuns\n        ? nestedRunsTooltipWrapper(loadMoreButton)\n        : loadMoreButton}\n    </div>\n  );\n};\n\n/**\n * We're extracting a single boolean flag indicating if there are any runs\n * indicating a run hierarchy. If true, we'll use it to display the corresponding tooltip.\n */\nconst mapStateToProps = (state: { entities: ExperimentStoreEntities }) => {\n  const currentRunUUIDs = Object.keys(state.entities.runInfosByUuid);\n  const containsNestedRuns = Object.entries(state.entities.tagsByRunUuid).some(\n    ([key, tagList]) =>\n      currentRunUUIDs.includes(key) && Object.keys(tagList).includes(EXPERIMENT_PARENT_ID_TAG),\n  );\n  return { containsNestedRuns };\n};\n\nexport const ExperimentViewLoadMore = connect(mapStateToProps)(ExperimentViewLoadMoreImpl);\n\nconst styles = {\n  loadMoreButton: (theme: Theme) => ({\n    display: 'flex',\n    justifyContent: 'center',\n    marginTop: theme.spacing.md,\n  }),\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  ExperimentEntity,\n  ExperimentStoreEntities,\n  LIFECYCLE_FILTER,\n  MODEL_VERSION_FILTER,\n  UpdateExperimentViewStateFn,\n} from '../../../../types';\nimport {\n  experimentRunsSelector,\n  ExperimentRunsSelectorParams,\n  ExperimentRunsSelectorResult,\n} from '../../utils/experimentRuns.selector';\nimport { ExperimentViewRunsControls } from './ExperimentViewRunsControls';\nimport { ExperimentViewRunsTable } from './ExperimentViewRunsTable';\n\nimport { searchModelVersionsApi } from '../../../../../model-registry/actions';\nimport { loadMoreRunsApi, searchRunsApi, searchRunsPayload } from '../../../../actions';\nimport { GetExperimentRunsContextProvider } from '../../contexts/GetExperimentRunsContext';\nimport { useFetchExperimentRuns } from '../../hooks/useFetchExperimentRuns';\nimport { SearchExperimentRunsViewState } from '../../models/SearchExperimentRunsViewState';\nimport { ExperimentViewLoadMore } from './ExperimentViewLoadMore';\n\nexport interface ExperimentViewRunsOwnProps {\n  experiments: ExperimentEntity[];\n  modelVersionFilter?: MODEL_VERSION_FILTER;\n  lifecycleFilter?: LIFECYCLE_FILTER;\n}\n\nexport interface ExperimentViewRunsProps extends ExperimentViewRunsOwnProps {\n  runsData: ExperimentRunsSelectorResult;\n}\n\nexport const ExperimentViewRunsImpl = React.memo((props: ExperimentViewRunsProps) => {\n  const { experiments, runsData } = props;\n\n  // Persistable sort/filter model state is taken from the context\n  const {\n    searchFacetsState,\n    updateSearchFacets,\n    fetchExperimentRuns,\n    isLoadingRuns,\n    loadMoreRuns,\n    moreRunsAvailable,\n  } = useFetchExperimentRuns();\n\n  // Non-persistable view model state is being created locally\n  const [viewState, setViewState] = useState(new SearchExperimentRunsViewState());\n\n  // Initial fetch of runs after mounting\n  useEffect(() => {\n    fetchExperimentRuns();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateViewState = useCallback<UpdateExperimentViewStateFn>(\n    (newPartialViewState) =>\n      setViewState((currentViewState) => ({ ...currentViewState, ...newPartialViewState })),\n    [],\n  );\n\n  const addColumnClicked = useCallback(() => {\n    updateViewState({ columnSelectorVisible: true });\n  }, [updateViewState]);\n\n  return (\n    <>\n      <ExperimentViewRunsControls\n        viewState={viewState}\n        updateViewState={updateViewState}\n        runsData={runsData}\n        searchFacetsState={searchFacetsState}\n        updateSearchFacets={updateSearchFacets}\n      />\n      <ExperimentViewRunsTable\n        experiments={experiments}\n        runsData={runsData}\n        searchFacetsState={searchFacetsState}\n        viewState={viewState}\n        isLoading={isLoadingRuns}\n        updateSearchFacets={updateSearchFacets}\n        updateViewState={updateViewState}\n        onAddColumnClicked={addColumnClicked}\n      />\n      <ExperimentViewLoadMore\n        isLoadingRuns={isLoadingRuns}\n        loadMoreRuns={loadMoreRuns}\n        moreRunsAvailable={moreRunsAvailable}\n      />\n    </>\n  );\n});\n\n/**\n * Concrete actions for GetExperimentRuns context provider\n */\nconst getExperimentRunsActions = {\n  searchRunsApi,\n  loadMoreRunsApi,\n  searchRunsPayload,\n  searchModelVersionsApi,\n};\n\n/**\n * Function mapping redux state used in connect()\n */\nconst mapStateToProps = (\n  state: { entities: ExperimentStoreEntities },\n  params: ExperimentRunsSelectorParams,\n) => {\n  return { runsData: experimentRunsSelector(state, params) };\n};\n\n/**\n * Component responsible for displaying runs table with its set of\n * respective sort and filter controls on the experiment page.\n */\nexport const ExperimentViewRunsConnect: React.ComponentType<ExperimentViewRunsOwnProps> = connect(\n  // mapStateToProps function:\n  mapStateToProps,\n  // mapDispatchToProps function (not provided):\n  undefined,\n  // mergeProps function (not provided):\n  undefined,\n  {\n    // We're interested only in \"entities\" sub-tree so we won't\n    // re-render on other state changes (e.g. API request IDs)\n    areStatesEqual: (nextState, prevState) => nextState.entities === prevState.entities,\n  },\n)(ExperimentViewRunsImpl);\n\n/**\n * This component serves as a layer for injecting props necessary for connect() to work\n */\nexport const ExperimentViewRunsInjectFilters = (props: ExperimentViewRunsOwnProps) => {\n  const { searchFacetsState } = useFetchExperimentRuns();\n  return (\n    <ExperimentViewRunsConnect\n      {...props}\n      modelVersionFilter={searchFacetsState.modelVersionFilter as MODEL_VERSION_FILTER}\n      lifecycleFilter={searchFacetsState.lifecycleFilter as LIFECYCLE_FILTER}\n    />\n  );\n};\n\n/**\n * This component serves as a layer for creating context for searching runs\n * and provides implementations of necessary redux actions.\n */\nexport const ExperimentViewRunsInjectContext = (props: ExperimentViewRunsOwnProps) => (\n  <GetExperimentRunsContextProvider actions={getExperimentRunsActions}>\n    <ExperimentViewRunsInjectFilters {...props} />\n  </GetExperimentRunsContextProvider>\n);\n\n/**\n * Export context injection layer as a main entry point\n */\nexport const ExperimentViewRuns = ExperimentViewRunsInjectContext;\n","import { Skeleton } from '@databricks/design-system';\nimport { useEffect } from 'react';\nimport { ErrorCodes } from '../../../common/constants';\nimport NotFoundPage from '../NotFoundPage';\nimport { PermissionDeniedView } from '../PermissionDeniedView';\nimport { ExperimentViewDescriptions } from './components/ExperimentViewDescriptions';\nimport { ExperimentViewNotes } from './components/ExperimentViewNotes';\nimport { ExperimentViewOnboarding } from './components/ExperimentViewOnboarding';\nimport { ExperimentViewHeader } from './components/header/ExperimentViewHeader';\nimport { ExperimentViewHeaderCompare } from './components/header/ExperimentViewHeaderCompare';\nimport { ExperimentViewRuns } from './components/runs/ExperimentViewRuns';\nimport { useExperimentIds } from './hooks/useExperimentIds';\nimport { useExperiments } from './hooks/useExperiments';\nimport { useFetchExperiments } from './hooks/useFetchExperiments';\n\nexport const ExperimentView = () => {\n  const experimentIds = useExperimentIds();\n  const experiments = useExperiments(experimentIds);\n\n  const [firstExperiment] = experiments;\n\n  const { fetchExperiments, isLoadingExperiment, requestError } = useFetchExperiments();\n\n  useEffect(() => {\n    fetchExperiments(experimentIds);\n  }, [fetchExperiments, experimentIds]);\n\n  const isComparingExperiments = experimentIds.length > 1;\n\n  if (requestError && requestError.getErrorCode() === ErrorCodes.PERMISSION_DENIED) {\n    return <PermissionDeniedView errorMessage={requestError.getMessageField()} />;\n  }\n\n  if (requestError && requestError.getErrorCode() === ErrorCodes.RESOURCE_DOES_NOT_EXIST) {\n    return <NotFoundPage />;\n  }\n\n  if (isLoadingExperiment || !firstExperiment) {\n    return <Skeleton active />;\n  }\n\n  return (\n    <>\n      {isComparingExperiments ? (\n        <ExperimentViewHeaderCompare experiments={experiments} />\n      ) : (\n        <>\n          <ExperimentViewHeader experiment={firstExperiment} />\n          <ExperimentViewOnboarding />\n          <ExperimentViewDescriptions experiment={firstExperiment} />\n          <ExperimentViewNotes experiment={firstExperiment} />\n        </>\n      )}\n\n      <ExperimentViewRuns experiments={experiments} />\n    </>\n  );\n};\n\nexport default ExperimentView;\n","import { isEqual } from 'lodash';\nimport { useSelector } from 'react-redux';\nimport type { ExperimentEntity, ExperimentStoreEntities } from '../../../types';\n\nexport type UseExperimentsResult = ExperimentEntity[];\n\n/**\n * Hook that returns data and functions necessary for rendering\n * experiment(s) details - name, title, tags etc.\n */\nexport const useExperiments = (ids: (number | string)[]): UseExperimentsResult =>\n  useSelector(\n    (state: { entities: ExperimentStoreEntities }) =>\n      ids.map((id) => state.entities.experimentsById[id]).filter(Boolean),\n    (oldExperiments, newExperiments) => isEqual(oldExperiments, newExperiments),\n  );\n","// prettier-ignore\nimport {\n  getExperimentApi,\n  setCompareExperiments,\n  setExperimentTagApi,\n} from '../../actions';\nimport { GetExperimentsContextProvider } from './contexts/GetExperimentsContext';\nimport { ExperimentView } from './ExperimentView';\n\n/**\n * Concrete actions for GetExperiments context\n */\nconst getExperimentActions = {\n  setExperimentTagApi,\n  getExperimentApi,\n  setCompareExperiments,\n};\n\n/**\n * Main entry point for the experiment page. This component\n * provides underlying structure with context containing\n * concrete versions of store actions.\n */\nexport const ExperimentPage = () => (\n  <GetExperimentsContextProvider actions={getExperimentActions}>\n    <ExperimentView />\n  </GetExperimentsContextProvider>\n);\n\nexport default ExperimentPage;\n"],"names":["useAsyncDispatch","useDispatch","GetExperimentsContext","createContext","GetExperimentsContextProvider","children","actions","fetchExperimentsRequestIds","setFetchExperimentsRequestIds","useState","isLoadingExperiment","setIsLoadingExperiment","requestError","setRequestError","dispatch","fetchExperiments","useCallback","experimentIds","newRequestIds","map","experimentId","requestAction","getExperimentApi","catch","e","Utils","meta","id","requestIds","isEqual","fetchFn","contextValue","useMemo","Provider","value","RequestStateWrapper","shouldOptimisticallyRender","_isLoading","_renderError","requests","some","r","includes","active","forEach","request","error","PermissionDeniedView","errorMessage","theme","useDesignSystemTheme","className","style","height","marginTop","src","permissionDeniedLock","alt","paddingTop","css","color","colors","textSecondary","ExperimentViewArtifactLocation","artifactLocation","ExperimentViewDescriptions","React","experiment","styles","container","defaultMessage","experiment_id","artifact_location","display","gap","spacing","lg","useFetchExperiments","getExperimentsContext","useContext","Error","ExperimentViewNotes","storedNote","useSelector","state","tags","getExperimentTags","Object","values","find","t","getKey","NOTE_CONTENT_TAG","undefined","extractNoteFromTags","showNotesEditor","setShowNotesEditor","setExperimentTagApi","handleSubmitEditNote","updatedNote","action","then","CollapsibleSection","title","collapsibleSectionHeader","type","onClick","forceOpen","defaultCollapsed","EditableNote","defaultMarkdown","onSubmit","onCancel","showEditor","lineHeight","showTrackingHelperStoreKey","ExperimentViewOnboarding","onboardingLocalStore","storeIdentifier","ONBOARDING","LocalStorageUtils","disableOnboardingHelper","setItem","getItem","message","link","chunks","href","ExperimentTrackingDocUrl","target","rel","closable","onClose","size","useIntl","intl","Context","invariantIntlContext","ExperimentViewCopyTitle","dangerouslySetAntdProps","copyable","text","name","icon","tooltips","formatMessage","CopyButton","copyText","showTooltip","setShowTooltip","visible","navigator","clipboard","writeText","setTimeout","onMouseLeave","CopyBox","readOnly","GetLinkModal","ExperimentViewHeaderShareButton","showGetLinkModal","setShowGetLinkModal","window","top","location","ExperimentViewHeader","normalizedExperimentName","split","pop","PageHeader","breadcrumbs","ExperimentViewHeaderCompare","experiments","pageTitle","numExperiments","length","LIFECYCLE_FILTER","MODEL_VERSION_FILTER","experimentRunsSelector","params","comparingExperiments","runUuids","entities","runInfosByUuid","filter","run_uuid","modelVersionsByRunUuid","runUuidsMatchingFilter","runInfos","lifecycleFilter","ACTIVE","modelVersionFilter","ALL_RUNS","run_id","getRunInfo","rInfo","lifecycle_stage","WITH_MODEL_VERSIONS","WTIHOUT_MODEL_VERSIONS","console","warn","extractRunInfos","metricKeysSet","Set","paramKeysSet","metricsList","runInfo","metricsByRunUuid","getLatestMetrics","metrics","metric","add","key","paramsList","paramValues","getParams","param","tagsList","getRunTags","firstExperimentId","experimentTags","metricKeyList","Array","from","sort","paramKeyList","ExpandableList","Component","toggled","handleToggle","this","setState","prevState","props","onToggle","render","showLines","expandableListClassName","item","index","expandedElems","slice","expandedContent","showMore","defaultProps","textDecoration","cursor","TrimmedText","maxSize","allowShowMore","trimmedText","substr","setShowMore","expandButton","ErrorIcon","textValidationDanger","FinishedIcon","textValidationSuccess","ExperimentViewUtil","static","selected","checkboxHandler","cellType","CellComponent","checked","onChange","status","str","test","replace","columns","data","i","csv","csvEscape","j","tagKeyList","row","start_time","end_time","paramsMap","toParamsMap","metricsMap","toMetricsMap","tagsMap","paramKey","push","getValue","metricKey","tagKey","tableToCsv","curOrderByKey","curOrderByAsc","canonicalKey","sortIconStyle","onCheckAll","isAllCheckedBool","onSortBy","excludedCols","excludedColsSet","canonicalSortKey","displayName","ATTRIBUTE_COLUMN_LABELS","ATTRIBUTE_COLUMN_SORT_KEY","column","has","h","sortIcon","getSortIcon","isSortable","cellClassName","classNames","sortable","sortIconContainer","getHeaderCell","keyType","keyName","width","metricRanges","range","fraction","max","min","percent","modelVersion","version","registryIcon","getModelVersionPageRoute","verticalAlign","associatedModelVersions","handleCellToggle","renderLinkedModelCell","metricsByRun","ret","hasOwnProperty","Math","runsExpanded","runId","expanderOpen","DEFAULT_EXPANDED_VALUE","hasExpander","onExpandBound","runUuid","padding","runIdToIdx","idx","treeNodes","TreeNode","parentRunId","parentRunIdx","parent","parentIdToChildren","rootsIdxs","old","newList","mergedRows","visited","dfs","curr_level","isParent","isExpanderOpen","childrenIds","cIdx","level","childrenIdxs","dIdx","nestChildren","getNestedRowRenderMetadata","keys","getRow","getRowRenderMetadata","rowMetadata","rows","isChild","backgroundColor","contents","numRunsFromLatestSearch","nextPageToken","categorizedUncheckedKeys","attributeColumnsToTags","attributeKeyList","attributeColumnsToUncheck","_","COLUMN_TYPES","paramColumnsToUncheck","metricColumnsToUncheck","tagColumnsToUncheck","dropDiffColumns","prevRow","currRow","col","prevValue","currValue","entries","preSwitchCategorizedUncheckedKeys","postSwitchCategorizedUncheckedKeys","currCategorizedUncheckedKeys","restoredUncheckedKeys","column_type","userCheckedKeys","userUncheckedKeys","fontSize","marginLeft","minWidth","expander","pointer","runInfoCell","maxWidth","constructor","findRoot","current","isRoot","isCycle","EXPERIMENT_FIELD_PREFIX_PARAM","EXPERIMENT_FIELD_PREFIX_METRIC","EXPERIMENT_FIELD_PREFIX_TAG","EXPERIMENT_PARENT_ID_TAG","DeleteRunModalImpl","super","handleSubmit","bind","deletePromises","selectedRunIds","deleteRunApi","Promise","all","openErrorModal","number","ConfirmModal","isOpen","helpText","confirmButtonText","mapDispatchToProps","connect","RestoreRunModalImpl","restorePromises","restoreRunApi","useExperimentIds","match","useRouteMatch","useLocation","normalizedLocationSearch","decodeURIComponent","search","compareExperimentIdsQueryParam","queryParams","qs","substring","experimentIdsRaw","toString","JSON","parse","START_TIME_COLUMN_OFFSET","ALL","LAST_HOUR","LAST_24_HOURS","LAST_7_DAYS","LAST_30_DAYS","LAST_YEAR","shouldRefetchRuns","currentSearchFacetsState","newSearchFacetsState","searchFilter","orderByAsc","orderByKey","startTime","createSearchRunsParams","searchFacetsState","referenceTime","pageToken","runViewType","ViewType","runsPinned","orderBy","createOrderByExpression","startTimeExpression","offset","createStartTimeExpression","createFilterExpression","shouldFetchParents","shouldNestChildrenAndFetchParents","fetchModelVersionsForRuns","runsPayload","actionCreator","runsWithLogModelHistory","run","chunk","MAX_RUNS_IN_SEARCH_MODEL_VERSIONS_FILTER","runsChunk","info","ColumnHeaderCell","handleSortBy","newOrderByAsc","enableSorting","getClassName","role","headerLabelWrapper","headerSortIcon","alignItems","marginRight","getRunStatusIcon","DateCellRenderer","runStatus","onExpand","isRenderingAsParent","isNaN","isRenderingAsChild","paddingRight","sm","paddingLeft","ExperimentNameCellRenderer","to","Routes","basename","ModelsCellRenderer","registeredModels","loggedModels","models","modelToRender","modelDiv","registeredModelName","registeredModelVersion","registeredModelSvg","flavors","loggedModelFlavorText","loggedModelLink","artifactPath","loggedModelSvg","imageWrapper","img","position","SourceCellRenderer","sourceType","VersionCellRenderer","PinRowCellRenderer","pinnable","placement","pinWrapper","onTogglePin","input","svg","grey600","RunNameCellRenderer","typography","fontSizeBase","minHeight","makeCanonicalSortKey","isCanonicalSortKeyOfType","startsWith","TAGS_TO_COLUMNS_MAP","getRowId","ADJUSTABLE_ATTRIBUTE_COLUMNS_SINGLE_EXPERIMENT","ADJUSTABLE_ATTRIBUTE_COLUMNS","useRunsColumnDefinitions","compareExperiments","columnApi","selectedColumns","cumulativeColumns","cachedMetricKeys","useRef","cachedParamKeys","cachedTagKeys","paramKeys","metricKeys","tagKeys","useCumulativeColumnKeys","columnSet","commonSortOrderProps","getOrderedByClassName","getHeaderClassName","getCellClassName","colDef","headerComponentParams","field","checkboxSelection","headerName","headerCheckboxSelection","cellRenderer","cellRendererParams","pinned","resizable","headerTooltip","initialWidth","equals","dateInfo1","dateInfo2","cellClass","colId","experimentName1","experimentName2","initialHide","tags1","tags2","version1","version2","models1","models2","canonicalSortKeys","useEffect","setColumnVisible","EXPERIMENTS_DEFAULT_COLUMN_SETUP","autoSizePadding","menuIcon","suppressMenu","suppressMovable","DEFAULT_SELECTED_COLUMNS","SearchExperimentRunsFacetsState","DEFAULT_ORDER_BY_KEY","DEFAULT_ORDER_BY_ASC","DEFAULT_START_TIME","DEFAULT_LIFECYCLE_FILTER","DEFAULT_MODEL_VERSION_FILTER","KNOWN_STATE_KEYS","urlParserDecoder","defaultDecoder","mergeFacetsStates","base","object","assign","persistLocalStorage","idKey","saveComponentState","createPersistedQueryString","sortFilterModelToSave","QueryString","addQueryPrefix","arrayFormat","encodeValuesOnly","restoreExperimentSearchFacetsState","locationSearch","baseState","localStorageValue","loadComponentState","model","isObject","isArray","rawUrlData","ignoreQueryPrefix","comma","arrayLimit","decoder","restData","stateData","rawURLSearchData","isKnownField","extractExperimentSearchFacetsState","urlState","isPristine","queryString","GetExperimentRunsContext","GetExperimentRunsContextProvider","history","useHistory","searchRunsRequestId","setSearchRunsRequestId","isLoadingRuns","setIsLoadingRuns","moreRunsAvailable","setMoreRunsAvailable","experimentIdsHash","stringify","setSearchFacetsState","pathname","isPristineFlag","internalFetchExperimentRuns","requestSearchFacetsState","requestExperimentIds","requestReferenceTime","Date","now","requestNextPageToken","loadMore","Boolean","actionToUse","loadMoreRunsApi","searchRunsApi","next_page_token","runs","searchModelVersionsApi","loadMoreRuns","fetchExperimentRuns","persistState","newQueryString","currentLocationSearch","currentParameters","persistExperimentSearchFacetsState","updateSearchFacets","newFilterModel","updateOptions","forceRefresh","preservePristine","oldModel","newModel","isFunction","listen","useFetchExperimentRuns","getExperimentRunsContextValue","ExperimentViewRunModals","showDeleteRunModal","showRestoreRunModal","showRenameRunModal","runsSelected","onCloseDeleteRunModal","onCloseRestoreRunModal","onCloseRenameRunModal","renamedRunName","refreshRuns","DeleteRunModal","RestoreRunModal","RenameRunModal","runName","onSuccess","ExperimentViewRunsControlsActions","viewState","runsData","setShowDeleteRunModal","setShowRestoreRunModal","setShowRenameRunModal","setRenamedRunName","renameButtonClicked","runsSelectedList","selectedRun","run_name","compareButtonClicked","onDeleteRun","onRestoreRun","selectedRunsCount","canRestoreRuns","canRenameRuns","canCompareRuns","controlBar","disabled","gapElement","danger","flex","UnitNumber","_ref","prefixCls","_ref$offset","concat","left","getOffset","start","end","unit","SingleNumber","unitNodes","offsetStyle","originCount","count","originValue","Number","abs","_React$useState","_React$useState2","_slicedToArray","setPrevValue","_React$useState3","_React$useState4","prevCount","setPrevCount","onTransitionEnd","timeout","clearTimeout","_extends","transition","unitNumberList","prevIndex","findIndex","n","singleUnit","transform","__rest","s","p","prototype","call","indexOf","getOwnPropertySymbols","propertyIsEnumerable","_a","customizePrefixCls","motionClassName","show","_a$component","component","restProps","getPrefixCls","ConfigContext","newProps","numberNodes","numberList","String","num","borderColor","boxShadow","cloneElement","oriProps","isPresetColor","PresetColorTypes","Badge","_classNames","_classNames2","customizeScrollNumberPrefixCls","scrollNumberPrefixCls","_a$count","_a$overflowCount","overflowCount","_a$dot","dot","_a$size","_a$showZero","showZero","_React$useContext","direction","numberedDisplayCount","hasStatus","isZero","showAsDot","mergedCount","isHidden","countRef","livingCount","displayCountRef","displayCount","isDotRef","mergedStyle","parseInt","right","titleNode","statusTextNode","displayNode","_typeof","statusCls","_defineProperty","statusStyle","background","badgeClassName","statusTextColor","CSSMotion","motionName","motionAppear","_classNames3","isDot","scrollNumberCls","scrollNumberStyle","ScrollNumber","Ribbon","_ref$placement","colorInPreset","ribbonCls","colorStyle","cornerColorStyle","ExperimentViewRefreshButtonImpl","searchRunsPayload","lastFetchTime","setLastFetchTime","newRunsCount","setNewRunsCount","interval","setInterval","searchPayloadData","maxResults","MAX_DETECT_NEW_RUNS_RESULTS","result","newRuns","POLL_INTERVAL","clearInterval","pill","sup","lime","zIndex","ExperimentViewRefreshButton","areStatesEqual","nextState","GROUP_KEY","GROUP_KEY_ATTRIBUTES","GROUP_KEY_PARAMS","GROUP_KEY_METRICS","GROUP_KEY_TAGS","ATTRIBUTE_COLUMNS","ATTRIBUTE_COLUMNS_COMPARE","findMatching","filterQuery","v","toLowerCase","createHighlightedNode","beforeStr","matchStr","afterStr","ExperimentViewRunsColumnSelectorImpl","columnSelectorVisible","onChangeColumnSelectorVisible","setFilter","searchInputRef","scrollableContainerRef","buttonRef","attributeColumnNames","setCheckedColumns","updateFn","facets","newColumns","uniqueNewColumns","tagsKeyList","canonicalKeyNames","treeData","filteredAttributes","filteredParams","filteredMetrics","filteredTags","attributeKey","toggleGroup","isChecked","keyList","k","toggleSingleKey","requestAnimationFrame","scrollTo","focus","preventScroll","scrollIntoView","block","behavior","onCheck","node","columnType","canonicalKeysForGroup","searchInputKeyDown","treeElement","querySelector","dropdownContent","dropdown","md","prefix","placeholder","allowClear","ref","onKeyDown","scrollableContainer","mode","checkedKeys","defaultExpandedKeys","overlay","trigger","onVisibleChange","ExperimentViewRunsColumnSelector","white","border","maxHeight","overflowY","overflowX","paddingBottom","whiteSpace","textOverflow","overflow","ExperimentViewRunsControlsFilters","updateViewState","onDownloadCsv","sortOptions","searchFilterValue","setSearchFilterValue","startTimeColumnLabels","getStartTimeColumnDisplayName","sortKeyChanged","compiledOrderByKey","newOrderBy","newOrderAscending","SORT_DELIMITER_SYMBOL","columnToAdd","isOrderAscending","COLUMN_SORT_BY_ASC","currentFacets","clearFacetsState","cleanSearchFacetsState","changeColumnSelectorVisible","currentSortSelectValue","COLUMN_SORT_BY_DESC","currentSortSelectLabel","sortOption","option","sortOptionLabel","label","extractedKeyName","currentLifecycleFilterLabel","currentStartTimeFilterLabel","groupBar","searchBox","searchBarIcon","suffix","searchInputSuffix","whereBold","ExperimentSearchSyntaxDocUrl","sortSelectControl","labelInValue","virtual","dropdownStyle","sortSelectDropdown","order","middleTruncateStr","DELETED","newStartTime","startTimeKey","groupSeparator","gridTemplateColumns","columnSwitch","margin","lifecycleFilters","marginBottom","ExperimentViewRunsControls","filteredParamKeys","filteredMetricKeys","filteredTagKeys","runInfosToCsv","blob","Blob","saveAs","downloadRunsCsv","ColumnSortByOrder","ATTRIBUTE_COLUMN_SORT_LABEL","reduce","options","sortLabelKey","sortLabel","makeCanonicalKey","useRunSortOptions","wrapper","flexDirection","MLFlowAgGridImpl","MLFlowAgGridLoader","fallback","cssTheme","justifyContent","ExperimentRunsTableEmptyOverlay","getLearnMoreLinkUrl","LoggingRunsDocUrl","learnMoreLinkUrl","newLine","pointerEvents","getFlatRowRenderMetadata","runData","isPinnable","createKeyValueDataForRunRow","list","isNumber","prepareRunsGridData","experimentNameMap","rowRenderMetadata","runIdToIndex","foundHierarchy","parentRunIndex","rootIndexes","treeNode","resultRowsMetadata","doDfs","dfsIndex","currLevel","currentNodeRunInfo","currentNodeRunId","childrenIndices","rootNodeIndex","childrenToPin","runInfoMetadata","formattedMetrics","experimentName","user","duration","visibleTags","runDateAndNestInfo","isCurrentRowPinned","isParentPinned","CLASS_OUT_OF_VIEWPORT","CLASS_IS_HIDDEN","CLASS_IS_MINIMIZED","AG_GRID_CLS","ExperimentViewRunsTableAddColumnCTA","gridContainerElement","isInitialized","moreAvailableParamsAndMetricsColumnCount","ctaRef","savedContainerRef","initialize","containerElement","ResizeObserver","targetElement","rootElement","refLeftElem","refCenterElem","refHeaderElem","gridAreaWidth","leftColContainerWidth","centerColContainerWidth","colContainerHeight","headerHeight","resizeObserver","entry","contentRect","calculatedLeft","calculatedTop","classList","remove","observe","disconnect","columnContainer","buttonContainer","button","buttonIcon","caption","borderLeft","borderTop","willChange","xs","createCurrentTime","mountTime","setMilliseconds","ExperimentViewRunsTable","isLoading","onAddColumnClicked","gridApi","setGridApi","setColumnApi","prevSelectRunUuids","runsCount","setRunsCount","showLoadingOverlay","hideOverlay","onSelectionChange","api","selectedUUIDs","getSelectedRows","aggregate","curr","handleRowSelected","event","selectedRows","isSelected","childrenIdsToSelect","forEachNode","childRunDateInfo","childrenRunUuid","setSelected","newOrderByKey","toggleRowExpanded","parentId","currentRunsExpanded","setReferenceTime","setRowData","togglePinnedRow","uuid","existingFacets","rowNode","getRowNode","redrawRows","rowNodes","columnDefs","gridReadyHandler","allAvailableColumnsCount","hasSelectedAllColumns","moreAvailableParamsAndMetricsColumns","selectedMetricsAndParamsColumns","allMetricsAndParamsColumns","agGridOverrides","defaultColDef","domLayout","rowSelection","onGridReady","onSelectionChanged","onRowSelected","suppressRowClickSelection","suppressColumnMoveAnimation","suppressScrollOnNewData","suppressFieldDotNotation","enableCellTextSelection","components","agColumnHeader","loadingOverlayComponent","Spinner","suppressNoRowsOverlay","loadingOverlayComponentParams","showImmediately","noResultsWrapper","textAlign","backgroundPrimary","grey100","grey200","borderRadius","blue100","borderRight","SearchExperimentRunsViewState","hiddenChildRunsSelected","nestedRunsTooltipWrapper","ExperimentViewLoadMore","currentRunUUIDs","containsNestedRuns","tagsByRunUuid","tagList","loadMoreButton","loading","ExperimentViewRunsImpl","setViewState","newPartialViewState","currentViewState","addColumnClicked","getExperimentRunsActions","ExperimentViewRunsConnect","ExperimentViewRunsInjectFilters","ExperimentViewRuns","ExperimentView","ids","experimentsById","oldExperiments","newExperiments","firstExperiment","isComparingExperiments","getErrorCode","ErrorCodes","getMessageField","NotFoundPage","getExperimentActions","setCompareExperiments","ExperimentPage"],"sourceRoot":""}