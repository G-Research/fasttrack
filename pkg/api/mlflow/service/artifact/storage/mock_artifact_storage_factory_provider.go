// Code generated by mockery v2.34.0. DO NOT EDIT.

package storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockArtifactStorageFactoryProvider is an autogenerated mock type for the ArtifactStorageFactoryProvider type
type MockArtifactStorageFactoryProvider struct {
	mock.Mock
}

// GetStorage provides a mock function with given fields: ctx, runArtifactPath
func (_m *MockArtifactStorageFactoryProvider) GetStorage(ctx context.Context, runArtifactPath string) (ArtifactStorageProvider, error) {
	ret := _m.Called(ctx, runArtifactPath)

	var r0 ArtifactStorageProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ArtifactStorageProvider, error)); ok {
		return rf(ctx, runArtifactPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ArtifactStorageProvider); ok {
		r0 = rf(ctx, runArtifactPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ArtifactStorageProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runArtifactPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockArtifactStorageFactoryProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockArtifactStorageFactoryProvider creates a new instance of MockArtifactStorageFactoryProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockArtifactStorageFactoryProvider(t mockConstructorTestingTNewMockArtifactStorageFactoryProvider) *MockArtifactStorageFactoryProvider {
	mock := &MockArtifactStorageFactoryProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
