package cmd

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/spf13/cobra"
)

const (
	DatabaseSourcesFlag   = "pkg-sources-database"
	MigrationsSourcesFlag = "pkg-sources-migrations"
)

var newMigrateTemplate = `// Code generated by make rebuild-migrations; DO NOT EDIT.
package {{ .module }}

import (
	"gorm.io/gorm"

	"github.com/G-Research/fasttrackml/pkg/database/migrations"
)

const Version = "{{ .uniqueID }}"

func Migrate(db *gorm.DB) error {
	return migrations.RunWithoutForeignKeyIfNeeded(db, func() error {
		return db.Transaction(func(tx *gorm.DB) error {

                        // TODO add migration code as needed

			// Update the schema version
			return tx.Model(&SchemaVersion{}).
				Where("1 = 1").
				Update("Version", Version).
				Error
		})
	})
}
`

var NewMigrationCmd = &cobra.Command{
	Use:   "new-migration",
	Short: "Creates a blank migration at the next available number",
	Long: `The new-migration command will create a new, blank database
               migration using the next available migration number.`,
	RunE: newMigrationCmd,
}

func newMigrationCmd(cmd *cobra.Command, args []string) error {
	module, uniqueID, err := getNextModuleAndUniqueID(cmd)
	if err != nil {
		return err
	}
	fmt.Printf("next migration module is: %s\n", module)
	fmt.Printf("next uniqueID is: %s\n", uniqueID)

	if err := createNewMigration(cmd, module, uniqueID); err != nil {
		return err
	}

	if err := rebuildMigrations(cmd); err != nil {
		return err
	}

	return nil
}

func getNextModuleAndUniqueID(cmd *cobra.Command) (module string, uniqueID string, err error) {
	// find next migration number

	files, err := os.ReadDir(cmd.Flag(MigrationsSourcesFlag).Value.String())
	if err != nil {
		return
	}

	max := ""
	for _, file := range files {
		if file.IsDir() && file.Name() > max {
			max = file.Name()
		}
	}

	maxModule := strings.Split(max, "_")[1]
	number, err := strconv.Atoi(maxModule)
	if err != nil {
		return
	}
	module = fmt.Sprintf("v_%04d", number+1)
	uniqueID = time.Now().Format("20060102030405")
	return
}

func createNewMigration(cmd *cobra.Command, module, uniqueID string) error {
	newModuleFolder := fmt.Sprintf("%s/%s",
		cmd.Flag(MigrationsSourcesFlag).Value.String(), module)
	if err := os.Mkdir(newModuleFolder, 0o755); err != nil {
		return err
	}

	modelsBytes, err := os.ReadFile(fmt.Sprintf("%s/model.go",
		cmd.Flag(DatabaseSourcesFlag).Value.String()))
	if err != nil {
		return err
	}
	modelsBytes = []byte(strings.Replace(
		string(modelsBytes),
		"package database",
		fmt.Sprintf("package %s", module),
		1,
	))

	modelsFile := fmt.Sprintf("%s/model.go", newModuleFolder)
	if err := os.WriteFile(modelsFile, modelsBytes, 0o644); err != nil {
		return err
	}

	tmpl, err := template.New("migrations").Parse(newMigrateTemplate)
	if err != nil {
		return fmt.Errorf("error parsing template: %w", err)
	}
	data := map[string]any{
		"module":   module,
		"uniqueID": uniqueID,
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, data); err != nil {
		return fmt.Errorf("error executing template: %w", err)
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	newFile := fmt.Sprintf("%s/migrate.go", newModuleFolder)
	if err := os.WriteFile(newFile, src, 0o644); err != nil {
		return err
	}
	return nil
}

// nolint:errcheck,gosec
func init() {
	RootCmd.AddCommand(NewMigrationCmd)
	NewMigrationCmd.Flags().StringP(DatabaseSourcesFlag,
		"d", "./pkg/database", "Location for database package sources")
	NewMigrationCmd.Flags().StringP(MigrationsSourcesFlag,
		"m", "./pkg/database/migrations", "Location for migration sources")
}
