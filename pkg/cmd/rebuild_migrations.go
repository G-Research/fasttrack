package cmd

import (
	"bytes"
	"fmt"
	"go/format"
	"html/template"
	"os"
	"sort"

	"github.com/spf13/cobra"
)

var migrationTemplate = `// Code generated by make rebuild-migrations; DO NOT EDIT.
package database

import (
	"fmt"

	log "github.com/sirupsen/logrus"
	"gorm.io/gorm"

	{{ range packages }}"github.com/G-Research/fasttrackml/pkg/database/migrations/{{ . }}"
        {{ end }}
)

func currentVersion() string {
	return {{ maxPackage }}.Version
}

func generatedMigrations(db *gorm.DB, schemaVersion string) error {
	switch schemaVersion {
	{{- range $i, $package := packages }}
        {{- if eq $i 0 }}
        case "":
	{{- else if le $i maxIndex }}
	case {{ package (sub $i 1)}}.Version:
	{{- end }}{{ template "migration" $i }}{{- end }}
	default:
		return fmt.Errorf("unsupported database FastTrackML schema version %s", schemaVersion)
        }
        return nil
}
{{ define "migration" }}
log.Infof("Migrating database to FastTrackML schema %s", {{ package . }}.Version)
if err := {{ package . }}.Migrate(db); err != nil {
	return fmt.Errorf("error migrating database to FastTrackML schema %s: %w", {{ package . }}.Version, err)
}
{{ if ne (package .) (maxPackage) }}fallthrough{{ end }}
{{ end }}
`

var RebuildMigrationsCmd = &cobra.Command{
	Use:   "rebuild-migrations",
	Short: "Rebuilds the migration_generated.go file with the current state of pkg/database/migrations",
	Long: `The rebuild-migrations command rebuilds the migration_generated.go file using the
               current state of the pkg/database/migrations folder.`,
	RunE: rebuildMigrationsCmd,
}

func rebuildMigrationsCmd(cmd *cobra.Command, args []string) error {
	if err := rebuildMigrations(); err != nil {
		return err
	}

	return nil
}

func rebuildMigrations() error {
	// find next migration number
	files, err := os.ReadDir("pkg/database/migrations")
	if err != nil {
		return err
	}

	packages := []string{}
	for _, file := range files {
		if file.IsDir() {
			packages = append(packages, file.Name())
		}
	}

	sort.Slice(packages, func(i, j int) bool {
		return packages[i] < packages[j]
	})

	var funcs = template.FuncMap{
		"sub": func(n1, n2 int) int {
			return n1 - n2
		},
		"package": func(index int) string {
			return packages[index]
		},
		"packages": func() []string {
			return packages
		},
		"maxPackage": func() string {
			return packages[len(packages)-1]
		},
		"maxIndex": func() int {
			return len(packages) - 1
		},
	}

	tmpl, err := template.New("migrations").Funcs(funcs).Parse(migrationTemplate)
	if err != nil {
		return fmt.Errorf("error parsing template: %w", err)
	}

	var buf bytes.Buffer
	if err := tmpl.Execute(&buf, nil); err != nil {
		return fmt.Errorf("error executing template: %w", err)
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	if err := os.WriteFile("pkg/database/migrate_generated.go", src, 0o644); err != nil {
		return err
	}
	return nil
}

// nolint:errcheck,gosec
func init() {
	RootCmd.AddCommand(RebuildMigrationsCmd)
}
