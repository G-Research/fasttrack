syntax = "proto2";

package mlflow;

import "scalapb/scalapb.proto";
import "databricks.proto";

option java_package = "org.mlflow.api.proto";
option py_generic_services = true;
option (scalapb.options) = {
  flat_package: true,
};

service MlflowServiceWrapped {


  // Log a metric for a run. A metric is a key-value pair (string key, float value) with an
  // associated timestamp. Examples include the various metrics that represent ML model accuracy.
  // A metric can be logged multiple times.
  //
  rpc logMetricWrapped(LogMetricWrapped) returns (LogMetricWrapped.Response) {
    option (rpc) = {
      endpoints: [{
        method: "POST",
        path: "/mlflow/runs/log-metric"
        since { major: 2, minor: 0 },
      }],

      visibility: PUBLIC,
      rpc_doc_title: "Log Metric Wrapped",
    };
  }
}

message LogMetricWrapped {
  option (scalapb.message).extends = "com.databricks.rpc.RPC[$this.Response]";

  // ID of the run under which to log the metric. Must be provided.
  optional string run_id = 6;

  // [Deprecated, use run_id instead] ID of the run under which to log the metric. This field will
  // be removed in a future MLflow version.
  optional string run_uuid = 1;

  // Name of the metric.
  optional string key = 2 [(validate_required) = true];

  // Double value of the metric being logged.
  optional double value = 3 [(validate_required) = true];

  // Unix timestamp in milliseconds at the time metric was logged.
  optional int64 timestamp = 4 [(validate_required) = true];

  // Step at which to log the metric
  optional int64 step = 5 [default = 0];

  // Context at which to log the metric
  repeated MetricContext context = 7;

  message Response {}
}

// Context for a metric.
message MetricContext {
  // The context key.
  optional string key = 1;
  // The context value.
  optional string value = 2;
}

// Metric associated with a run, represented as a key-value pair.
message MetricWithContext {
  // Key identifying this metric.
  optional string key = 1;

  // Value associated with this metric.
  optional double value = 2;

  // The timestamp at which this metric was recorded.
  optional int64 timestamp = 3;

  // Step at which to log the metric.
  optional int64 step = 4 [default = 0];
  // Context associated wiwth this metric
  repeated MetricContext context = 5;
}