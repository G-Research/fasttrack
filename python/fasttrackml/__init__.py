import contextlib

from fasttrackml.fluent_context_support import log_metric_with_context
from mlflow import (
    ActiveRun,
    MlflowClient,
    MlflowException,
    active_run,
    autolog,
    create_experiment,
    delete_experiment,
    delete_run,
    delete_tag,
    doctor,
    end_run,
    evaluate,
    get_artifact_uri,
    get_experiment,
    get_experiment_by_name,
    get_parent_run,
    get_registry_uri,
    get_run,
    get_tracking_uri,
    is_tracking_uri_set,
    last_active_run,
    load_table,
    log_artifact,
    log_artifacts,
    log_dict,
    log_figure,
    log_image,
    log_input,
    log_metric,
    log_metrics,
    log_param,
    log_params,
    log_table,
    log_text,
    register_model,
    run,
    search_experiments,
    search_model_versions,
    search_registered_models,
    search_runs,
    set_experiment,
    set_experiment_tag,
    set_experiment_tags,
    set_registry_uri,
    set_tag,
    set_tags,
    set_tracking_uri,
    start_run,
)

__all__ = [
    "ActiveRun",
    "MlflowClient",
    "MlflowException",
    "active_run",
    "autolog",
    "create_experiment",
    "delete_experiment",
    "delete_run",
    "delete_tag",
    "doctor",
    "end_run",
    "evaluate",
    "get_artifact_uri",
    "get_experiment",
    "get_experiment_by_name",
    "get_parent_run",
    "get_registry_uri",
    "get_run",
    "get_tracking_uri",
    "is_tracking_uri_set",
    "last_active_run",
    "load_table",
    "log_artifact",
    "log_artifacts",
    "log_dict",
    "log_figure",
    "log_image",
    "log_input",
    "log_metric",
    "log_metric_with_context",
    "log_metrics",
    "log_param",
    "log_params",
    "log_table",
    "log_text",
    "register_model",
    "run",
    "search_experiments",
    "search_model_versions",
    "search_registered_models",
    "search_runs",
    "set_experiment",
    "set_experiment_tag",
    "set_experiment_tags",
    "set_registry_uri",
    "set_tag",
    "set_tags",
    "set_tracking_uri",
    "start_run",
]


# `mlflow.gateway` depends on optional dependencies such as pydantic and has version
# restrictions for dependencies. Importing this module fails if they are not installed or
# if invalid versions of these required packages are installed.
with contextlib.suppress(Exception):
    from mlflow import gateway  # noqa: F401

    __all__.append("gateway")
